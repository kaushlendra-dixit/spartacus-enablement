import { Compiler, Injector, OnDestroy } from '@angular/core';
import { CmsComponentMapping, ConfigInitializerService } from '@spartacus/core';
import { Observable } from 'rxjs';
/**
 * Service responsible for resolving cms config based feature modules.
 */
import * as ɵngcc0 from '@angular/core';
export declare class FeatureModulesService implements OnDestroy {
    protected configInitializer: ConfigInitializerService;
    protected compiler: Compiler;
    protected injector: Injector;
    private featureModulesConfig?;
    private componentFeatureMap;
    private features;
    private dependencyModules;
    constructor(configInitializer: ConfigInitializerService, compiler: Compiler, injector: Injector);
    private initFeatureMap;
    /**
     * Check if there is feature module configuration that covers specified
     * component type
     */
    hasFeatureFor(componentType: string): boolean;
    /**
     * Return full CmsComponent mapping defined in feature module
     */
    getCmsMapping(componentType: string): Observable<CmsComponentMapping>;
    /**
     * Get all injectors for feature and its dependencies
     *
     * As it's a synchronous method, it works only for already resolved features,
     * returning undefined otherwise
     */
    getInjectors(componentType: string): Injector[] | undefined;
    /**
     * Resolve feature based on feature name, if feature was not yet resolved
     *
     * It will first resolve all module dependencies if defined
     */
    private resolveFeature;
    /**
     * Initialize feature module by returning feature instance
     */
    private resolveFeatureModule;
    /**
     * Returns configuration provided in feature module
     */
    private resolveFeatureConfiguration;
    /**
     * Resolves dependency module and initializes single module instance
     */
    private resolveDependencyModule;
    /**
     * Resolve any Angular module from an function that return module or moduleFactory
     */
    private resolveModuleFactory;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FeatureModulesService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS1tb2R1bGVzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZmVhdHVyZS1tb2R1bGVzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21waWxlciwgSW5qZWN0b3IsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDbXNDb21wb25lbnRNYXBwaW5nLCBDb25maWdJbml0aWFsaXplclNlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbi8qKlxyXG4gKiBTZXJ2aWNlIHJlc3BvbnNpYmxlIGZvciByZXNvbHZpbmcgY21zIGNvbmZpZyBiYXNlZCBmZWF0dXJlIG1vZHVsZXMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGZWF0dXJlTW9kdWxlc1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJvdGVjdGVkIGNvbmZpZ0luaXRpYWxpemVyOiBDb25maWdJbml0aWFsaXplclNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgY29tcGlsZXI6IENvbXBpbGVyO1xyXG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcjtcclxuICAgIHByaXZhdGUgZmVhdHVyZU1vZHVsZXNDb25maWc/O1xyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGZWF0dXJlTWFwO1xyXG4gICAgcHJpdmF0ZSBmZWF0dXJlcztcclxuICAgIHByaXZhdGUgZGVwZW5kZW5jeU1vZHVsZXM7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdJbml0aWFsaXplcjogQ29uZmlnSW5pdGlhbGl6ZXJTZXJ2aWNlLCBjb21waWxlcjogQ29tcGlsZXIsIGluamVjdG9yOiBJbmplY3Rvcik7XHJcbiAgICBwcml2YXRlIGluaXRGZWF0dXJlTWFwO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGVyZSBpcyBmZWF0dXJlIG1vZHVsZSBjb25maWd1cmF0aW9uIHRoYXQgY292ZXJzIHNwZWNpZmllZFxyXG4gICAgICogY29tcG9uZW50IHR5cGVcclxuICAgICAqL1xyXG4gICAgaGFzRmVhdHVyZUZvcihjb21wb25lbnRUeXBlOiBzdHJpbmcpOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZnVsbCBDbXNDb21wb25lbnQgbWFwcGluZyBkZWZpbmVkIGluIGZlYXR1cmUgbW9kdWxlXHJcbiAgICAgKi9cclxuICAgIGdldENtc01hcHBpbmcoY29tcG9uZW50VHlwZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxDbXNDb21wb25lbnRNYXBwaW5nPjtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBpbmplY3RvcnMgZm9yIGZlYXR1cmUgYW5kIGl0cyBkZXBlbmRlbmNpZXNcclxuICAgICAqXHJcbiAgICAgKiBBcyBpdCdzIGEgc3luY2hyb25vdXMgbWV0aG9kLCBpdCB3b3JrcyBvbmx5IGZvciBhbHJlYWR5IHJlc29sdmVkIGZlYXR1cmVzLFxyXG4gICAgICogcmV0dXJuaW5nIHVuZGVmaW5lZCBvdGhlcndpc2VcclxuICAgICAqL1xyXG4gICAgZ2V0SW5qZWN0b3JzKGNvbXBvbmVudFR5cGU6IHN0cmluZyk6IEluamVjdG9yW10gfCB1bmRlZmluZWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJlc29sdmUgZmVhdHVyZSBiYXNlZCBvbiBmZWF0dXJlIG5hbWUsIGlmIGZlYXR1cmUgd2FzIG5vdCB5ZXQgcmVzb2x2ZWRcclxuICAgICAqXHJcbiAgICAgKiBJdCB3aWxsIGZpcnN0IHJlc29sdmUgYWxsIG1vZHVsZSBkZXBlbmRlbmNpZXMgaWYgZGVmaW5lZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlc29sdmVGZWF0dXJlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGZlYXR1cmUgbW9kdWxlIGJ5IHJldHVybmluZyBmZWF0dXJlIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVzb2x2ZUZlYXR1cmVNb2R1bGU7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY29uZmlndXJhdGlvbiBwcm92aWRlZCBpbiBmZWF0dXJlIG1vZHVsZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlc29sdmVGZWF0dXJlQ29uZmlndXJhdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZXMgZGVwZW5kZW5jeSBtb2R1bGUgYW5kIGluaXRpYWxpemVzIHNpbmdsZSBtb2R1bGUgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZXNvbHZlRGVwZW5kZW5jeU1vZHVsZTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZSBhbnkgQW5ndWxhciBtb2R1bGUgZnJvbSBhbiBmdW5jdGlvbiB0aGF0IHJldHVybiBtb2R1bGUgb3IgbW9kdWxlRmFjdG9yeVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlc29sdmVNb2R1bGVGYWN0b3J5O1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxufVxyXG4iXX0=