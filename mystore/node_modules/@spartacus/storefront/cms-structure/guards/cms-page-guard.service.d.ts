import { RouterStateSnapshot, UrlTree } from '@angular/router';
import { CmsActivatedRouteSnapshot, CmsService, Page, PageContext, SemanticPathService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { CmsComponentsService } from '../services/cms-components.service';
import { CmsGuardsService } from '../services/cms-guards.service';
import { CmsI18nService } from '../services/cms-i18n.service';
import { CmsRoutesService } from '../services/cms-routes.service';
/**
 * Helper service for `CmsPageGuard`
 */
import * as ɵngcc0 from '@angular/core';
export declare class CmsPageGuardService {
    protected semanticPathService: SemanticPathService;
    protected cmsService: CmsService;
    protected cmsRoutes: CmsRoutesService;
    protected cmsI18n: CmsI18nService;
    protected cmsGuards: CmsGuardsService;
    protected cmsComponentsService: CmsComponentsService;
    constructor(semanticPathService: SemanticPathService, cmsService: CmsService, cmsRoutes: CmsRoutesService, cmsI18n: CmsI18nService, cmsGuards: CmsGuardsService, cmsComponentsService: CmsComponentsService);
    /**
     * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.
     *
     * Based on `cmsComponents` config for the components in the page:
     * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.
     * - If all components' guards emitted true, then the route can be activated
     * - Then we trigger loading of configured i18n chunks in parallel
     * - And we register the configured children routes of cms components
     *
     * @param pageContext current cms page context
     * @param pageData cms page data
     * @param route activated route snapshot
     * @param state router state snapshot
     *
     * @returns boolean observable - whether the route can be activated
     */
    canActivatePage(pageContext: PageContext, pageData: Page, route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;
    /**
     * Activates the "NOT FOUND" cms page.
     *
     * It loads cms page data for the "NOT FOUND" page and puts it in the state of the the requested page label.
     * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.
     */
    canActivateNotFoundPage(pageContext: PageContext, route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CmsPageGuardService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXBhZ2UtZ3VhcmQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJjbXMtcGFnZS1ndWFyZC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlclN0YXRlU25hcHNob3QsIFVybFRyZWUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBDbXNBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDbXNTZXJ2aWNlLCBQYWdlLCBQYWdlQ29udGV4dCwgU2VtYW50aWNQYXRoU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ21zQ29tcG9uZW50c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jbXMtY29tcG9uZW50cy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ21zR3VhcmRzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2Ntcy1ndWFyZHMuc2VydmljZSc7XHJcbmltcG9ydCB7IENtc0kxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY21zLWkxOG4uc2VydmljZSc7XHJcbmltcG9ydCB7IENtc1JvdXRlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jbXMtcm91dGVzLnNlcnZpY2UnO1xyXG4vKipcclxuICogSGVscGVyIHNlcnZpY2UgZm9yIGBDbXNQYWdlR3VhcmRgXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbXNQYWdlR3VhcmRTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCBzZW1hbnRpY1BhdGhTZXJ2aWNlOiBTZW1hbnRpY1BhdGhTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGNtc1NlcnZpY2U6IENtc1NlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgY21zUm91dGVzOiBDbXNSb3V0ZXNTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGNtc0kxOG46IENtc0kxOG5TZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGNtc0d1YXJkczogQ21zR3VhcmRzU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBjbXNDb21wb25lbnRzU2VydmljZTogQ21zQ29tcG9uZW50c1NlcnZpY2U7XHJcbiAgICBjb25zdHJ1Y3RvcihzZW1hbnRpY1BhdGhTZXJ2aWNlOiBTZW1hbnRpY1BhdGhTZXJ2aWNlLCBjbXNTZXJ2aWNlOiBDbXNTZXJ2aWNlLCBjbXNSb3V0ZXM6IENtc1JvdXRlc1NlcnZpY2UsIGNtc0kxOG46IENtc0kxOG5TZXJ2aWNlLCBjbXNHdWFyZHM6IENtc0d1YXJkc1NlcnZpY2UsIGNtc0NvbXBvbmVudHNTZXJ2aWNlOiBDbXNDb21wb25lbnRzU2VydmljZSk7XHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIENNUyBjb21wb25lbnRzIHR5cGVzIGluIHRoZSBjdXJyZW50IENNUyBwYWdlLCB0cmlnZ2VycyAoY29uZmlndXJhYmxlKSBzaWRlIGVmZmVjdHMgYW5kIHJldHVybnMgYSBib29sZWFuIC0gd2hldGhlciB0aGUgcm91dGUgY2FuIGJlIGFjdGl2YXRlZC5cclxuICAgICAqXHJcbiAgICAgKiBCYXNlZCBvbiBgY21zQ29tcG9uZW50c2AgY29uZmlnIGZvciB0aGUgY29tcG9uZW50cyBpbiB0aGUgcGFnZTpcclxuICAgICAqIC0gRXZhbHVhdGVzIGNvbXBvbmVudHMnIGd1YXJkczsgaWYgb25lIG9mIHRoZW0gZW1pdHMgZmFsc2Ugb3IgVXJsVHJlZSAtIHRoZSByb3V0ZSBjYW5ub3QgYmUgYWN0aXZhdGVkIG9yIHJlZGlyZWN0cyB0byB0aGUgZ2l2ZW4gVXJsVHJlZSwgcmVzcGVjdGl2ZWx5LlxyXG4gICAgICogLSBJZiBhbGwgY29tcG9uZW50cycgZ3VhcmRzIGVtaXR0ZWQgdHJ1ZSwgdGhlbiB0aGUgcm91dGUgY2FuIGJlIGFjdGl2YXRlZFxyXG4gICAgICogLSBUaGVuIHdlIHRyaWdnZXIgbG9hZGluZyBvZiBjb25maWd1cmVkIGkxOG4gY2h1bmtzIGluIHBhcmFsbGVsXHJcbiAgICAgKiAtIEFuZCB3ZSByZWdpc3RlciB0aGUgY29uZmlndXJlZCBjaGlsZHJlbiByb3V0ZXMgb2YgY21zIGNvbXBvbmVudHNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFnZUNvbnRleHQgY3VycmVudCBjbXMgcGFnZSBjb250ZXh0XHJcbiAgICAgKiBAcGFyYW0gcGFnZURhdGEgY21zIHBhZ2UgZGF0YVxyXG4gICAgICogQHBhcmFtIHJvdXRlIGFjdGl2YXRlZCByb3V0ZSBzbmFwc2hvdFxyXG4gICAgICogQHBhcmFtIHN0YXRlIHJvdXRlciBzdGF0ZSBzbmFwc2hvdFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIGJvb2xlYW4gb2JzZXJ2YWJsZSAtIHdoZXRoZXIgdGhlIHJvdXRlIGNhbiBiZSBhY3RpdmF0ZWRcclxuICAgICAqL1xyXG4gICAgY2FuQWN0aXZhdGVQYWdlKHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCwgcGFnZURhdGE6IFBhZ2UsIHJvdXRlOiBDbXNBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Ym9vbGVhbiB8IFVybFRyZWU+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIFwiTk9UIEZPVU5EXCIgY21zIHBhZ2UuXHJcbiAgICAgKlxyXG4gICAgICogSXQgbG9hZHMgY21zIHBhZ2UgZGF0YSBmb3IgdGhlIFwiTk9UIEZPVU5EXCIgcGFnZSBhbmQgcHV0cyBpdCBpbiB0aGUgc3RhdGUgb2YgdGhlIHRoZSByZXF1ZXN0ZWQgcGFnZSBsYWJlbC5cclxuICAgICAqIFRoZW4gaXQgcHJvY2Vzc2VzIGl0cyBDTVMgY29tcG9uZW50cyB3aXRoIHRoZSBtZXRob2QgYGNhbkFjdGl2YXRlUGFnZSgpYCBvZiB0aGlzIHNlcnZpY2UuIEZvciBtb3JlLCBzZWUgaXRzIGRvY3MuXHJcbiAgICAgKi9cclxuICAgIGNhbkFjdGl2YXRlTm90Rm91bmRQYWdlKHBhZ2VDb250ZXh0OiBQYWdlQ29udGV4dCwgcm91dGU6IENtc0FjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVXJsVHJlZT47XHJcbn1cclxuIl19