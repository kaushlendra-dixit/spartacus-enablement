import { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';
import { CmsActivatedRouteSnapshot, CmsService, ProtectedRoutesGuard, RoutingConfigService, RoutingService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { CmsPageGuardService } from './cms-page-guard.service';
import * as ɵngcc0 from '@angular/core';
export declare class CmsPageGuard implements CanActivate {
    protected routingService: RoutingService;
    protected cmsService: CmsService;
    protected protectedRoutesGuard: ProtectedRoutesGuard;
    protected service: CmsPageGuardService;
    protected routingConfig: RoutingConfigService;
    static guardName: string;
    constructor(routingService: RoutingService, cmsService: CmsService, protectedRoutesGuard: ProtectedRoutesGuard, service: CmsPageGuardService, routingConfig: RoutingConfigService);
    /**
     * Tries to load the CMS page data for the anticipated route and returns:
     * - `true` - if it can be activated
     * - `false` - if it cannot be activated
     * - `UrlTree` - if user should be redirected to a given `UrlTree`
     *
     * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,
     * based on their configuration (`cmsComponents` config).
     *
     * For more, see docs of the `CmsPageGuardService.canActivatePage`.
     */
    canActivate(route: CmsActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree>;
    /**
     * Returns whether we should reload the CMS page data, even when it was loaded before.
     */
    private shouldReload;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CmsPageGuard, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXBhZ2UuZ3VhcmQuZC50cyIsInNvdXJjZXMiOlsiY21zLXBhZ2UuZ3VhcmQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW5BY3RpdmF0ZSwgUm91dGVyU3RhdGVTbmFwc2hvdCwgVXJsVHJlZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IENtc0FjdGl2YXRlZFJvdXRlU25hcHNob3QsIENtc1NlcnZpY2UsIFByb3RlY3RlZFJvdXRlc0d1YXJkLCBSb3V0aW5nQ29uZmlnU2VydmljZSwgUm91dGluZ1NlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENtc1BhZ2VHdWFyZFNlcnZpY2UgfSBmcm9tICcuL2Ntcy1wYWdlLWd1YXJkLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbXNQYWdlR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XHJcbiAgICBwcm90ZWN0ZWQgcm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGNtc1NlcnZpY2U6IENtc1NlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgcHJvdGVjdGVkUm91dGVzR3VhcmQ6IFByb3RlY3RlZFJvdXRlc0d1YXJkO1xyXG4gICAgcHJvdGVjdGVkIHNlcnZpY2U6IENtc1BhZ2VHdWFyZFNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgcm91dGluZ0NvbmZpZzogUm91dGluZ0NvbmZpZ1NlcnZpY2U7XHJcbiAgICBzdGF0aWMgZ3VhcmROYW1lOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0aW5nU2VydmljZTogUm91dGluZ1NlcnZpY2UsIGNtc1NlcnZpY2U6IENtc1NlcnZpY2UsIHByb3RlY3RlZFJvdXRlc0d1YXJkOiBQcm90ZWN0ZWRSb3V0ZXNHdWFyZCwgc2VydmljZTogQ21zUGFnZUd1YXJkU2VydmljZSwgcm91dGluZ0NvbmZpZzogUm91dGluZ0NvbmZpZ1NlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUcmllcyB0byBsb2FkIHRoZSBDTVMgcGFnZSBkYXRhIGZvciB0aGUgYW50aWNpcGF0ZWQgcm91dGUgYW5kIHJldHVybnM6XHJcbiAgICAgKiAtIGB0cnVlYCAtIGlmIGl0IGNhbiBiZSBhY3RpdmF0ZWRcclxuICAgICAqIC0gYGZhbHNlYCAtIGlmIGl0IGNhbm5vdCBiZSBhY3RpdmF0ZWRcclxuICAgICAqIC0gYFVybFRyZWVgIC0gaWYgdXNlciBzaG91bGQgYmUgcmVkaXJlY3RlZCB0byBhIGdpdmVuIGBVcmxUcmVlYFxyXG4gICAgICpcclxuICAgICAqIElmIHRoZSByb3V0ZSBjYW4gYmUgYWN0aXZhdGVkLCBpdCBmaXJlcyBhZGRpdGlvbmFsIGNhbGN1bGF0aW9ucyBvbiB0aGUgQ01TIGNvbXBvbmVudHMgcHJlc2VudCBvbiB0aGlzIENNUyBwYWdlLFxyXG4gICAgICogYmFzZWQgb24gdGhlaXIgY29uZmlndXJhdGlvbiAoYGNtc0NvbXBvbmVudHNgIGNvbmZpZykuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIG1vcmUsIHNlZSBkb2NzIG9mIHRoZSBgQ21zUGFnZUd1YXJkU2VydmljZS5jYW5BY3RpdmF0ZVBhZ2VgLlxyXG4gICAgICovXHJcbiAgICBjYW5BY3RpdmF0ZShyb3V0ZTogQ21zQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHdlIHNob3VsZCByZWxvYWQgdGhlIENNUyBwYWdlIGRhdGEsIGV2ZW4gd2hlbiBpdCB3YXMgbG9hZGVkIGJlZm9yZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzaG91bGRSZWxvYWQ7XHJcbn1cclxuIl19