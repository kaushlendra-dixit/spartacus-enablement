import { CmsService, Page } from '@spartacus/core';
import { Observable } from 'rxjs';
import { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';
import { BREAKPOINT, LayoutConfig, LayoutSlotConfig, SlotConfig } from '../../../layout/config/layout-config';
import { PageLayoutHandler } from './page-layout-handler';
import * as ɵngcc0 from '@angular/core';
export declare class PageLayoutService {
    private cms;
    private config;
    private breakpointService;
    private handlers;
    constructor(cms: CmsService, config: LayoutConfig, breakpointService: BreakpointService, handlers: PageLayoutHandler[]);
    private warnLogMessages;
    private logSlots;
    getSlots(section?: string): Observable<string[]>;
    /**
     * Returns an observable with the last page slot above-the-fold
     * for the given pageTemplate / breakpoint.
     *
     * The page fold is configurable in the `LayoutConfig` for each page layout.
     */
    getPageFoldSlot(pageTemplate: string): Observable<string>;
    private resolveSlots;
    get page$(): Observable<Page>;
    get templateName$(): Observable<string>;
    /**
     * load slots from the layout configuration. The breakpoint is used
     * to load a specific configuration for the given breakpoint. If there's
     * no configuration available for the given breakpoint the default slot
     * configuration is returned.
     */
    protected getSlotConfig(templateUid: string, configAttribute: string, section?: string, breakpoint?: BREAKPOINT): SlotConfig;
    protected getSlotConfigForSection(templateUid: string, configAttribute: string, section?: string, breakpoint?: BREAKPOINT): SlotConfig;
    /**
     * Returns a list of slots for a breakpoint specific configuratoin
     * If there's no specific configuration for the breakpoint,
     * the closest available configuration will be returned.
     */
    protected getResponsiveSlotConfig(layoutSlotConfig: LayoutSlotConfig, configAttribute: string, breakpoint?: BREAKPOINT): SlotConfig;
    /**
     * In order to help developers, we print some detailed log information in
     * case there's no layout configuration available for the given page template
     * or section. Additionally, the slot positions are printed in the console
     * in a format that can be copied / paste to the configuration.
     */
    private logMissingLayoutConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PageLayoutService, [null, null, null, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1sYXlvdXQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwYWdlLWxheW91dC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENtc1NlcnZpY2UsIFBhZ2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJyZWFrcG9pbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vbGF5b3V0L2JyZWFrcG9pbnQvYnJlYWtwb2ludC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQlJFQUtQT0lOVCwgTGF5b3V0Q29uZmlnLCBMYXlvdXRTbG90Q29uZmlnLCBTbG90Q29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vbGF5b3V0L2NvbmZpZy9sYXlvdXQtY29uZmlnJztcclxuaW1wb3J0IHsgUGFnZUxheW91dEhhbmRsZXIgfSBmcm9tICcuL3BhZ2UtbGF5b3V0LWhhbmRsZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYWdlTGF5b3V0U2VydmljZSB7XHJcbiAgICBwcml2YXRlIGNtcztcclxuICAgIHByaXZhdGUgY29uZmlnO1xyXG4gICAgcHJpdmF0ZSBicmVha3BvaW50U2VydmljZTtcclxuICAgIHByaXZhdGUgaGFuZGxlcnM7XHJcbiAgICBjb25zdHJ1Y3RvcihjbXM6IENtc1NlcnZpY2UsIGNvbmZpZzogTGF5b3V0Q29uZmlnLCBicmVha3BvaW50U2VydmljZTogQnJlYWtwb2ludFNlcnZpY2UsIGhhbmRsZXJzOiBQYWdlTGF5b3V0SGFuZGxlcltdKTtcclxuICAgIHByaXZhdGUgd2FybkxvZ01lc3NhZ2VzO1xyXG4gICAgcHJpdmF0ZSBsb2dTbG90cztcclxuICAgIGdldFNsb3RzKHNlY3Rpb24/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdpdGggdGhlIGxhc3QgcGFnZSBzbG90IGFib3ZlLXRoZS1mb2xkXHJcbiAgICAgKiBmb3IgdGhlIGdpdmVuIHBhZ2VUZW1wbGF0ZSAvIGJyZWFrcG9pbnQuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHBhZ2UgZm9sZCBpcyBjb25maWd1cmFibGUgaW4gdGhlIGBMYXlvdXRDb25maWdgIGZvciBlYWNoIHBhZ2UgbGF5b3V0LlxyXG4gICAgICovXHJcbiAgICBnZXRQYWdlRm9sZFNsb3QocGFnZVRlbXBsYXRlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBwcml2YXRlIHJlc29sdmVTbG90cztcclxuICAgIGdldCBwYWdlJCgpOiBPYnNlcnZhYmxlPFBhZ2U+O1xyXG4gICAgZ2V0IHRlbXBsYXRlTmFtZSQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBsb2FkIHNsb3RzIGZyb20gdGhlIGxheW91dCBjb25maWd1cmF0aW9uLiBUaGUgYnJlYWtwb2ludCBpcyB1c2VkXHJcbiAgICAgKiB0byBsb2FkIGEgc3BlY2lmaWMgY29uZmlndXJhdGlvbiBmb3IgdGhlIGdpdmVuIGJyZWFrcG9pbnQuIElmIHRoZXJlJ3NcclxuICAgICAqIG5vIGNvbmZpZ3VyYXRpb24gYXZhaWxhYmxlIGZvciB0aGUgZ2l2ZW4gYnJlYWtwb2ludCB0aGUgZGVmYXVsdCBzbG90XHJcbiAgICAgKiBjb25maWd1cmF0aW9uIGlzIHJldHVybmVkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0U2xvdENvbmZpZyh0ZW1wbGF0ZVVpZDogc3RyaW5nLCBjb25maWdBdHRyaWJ1dGU6IHN0cmluZywgc2VjdGlvbj86IHN0cmluZywgYnJlYWtwb2ludD86IEJSRUFLUE9JTlQpOiBTbG90Q29uZmlnO1xyXG4gICAgcHJvdGVjdGVkIGdldFNsb3RDb25maWdGb3JTZWN0aW9uKHRlbXBsYXRlVWlkOiBzdHJpbmcsIGNvbmZpZ0F0dHJpYnV0ZTogc3RyaW5nLCBzZWN0aW9uPzogc3RyaW5nLCBicmVha3BvaW50PzogQlJFQUtQT0lOVCk6IFNsb3RDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIHNsb3RzIGZvciBhIGJyZWFrcG9pbnQgc3BlY2lmaWMgY29uZmlndXJhdG9pblxyXG4gICAgICogSWYgdGhlcmUncyBubyBzcGVjaWZpYyBjb25maWd1cmF0aW9uIGZvciB0aGUgYnJlYWtwb2ludCxcclxuICAgICAqIHRoZSBjbG9zZXN0IGF2YWlsYWJsZSBjb25maWd1cmF0aW9uIHdpbGwgYmUgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRSZXNwb25zaXZlU2xvdENvbmZpZyhsYXlvdXRTbG90Q29uZmlnOiBMYXlvdXRTbG90Q29uZmlnLCBjb25maWdBdHRyaWJ1dGU6IHN0cmluZywgYnJlYWtwb2ludD86IEJSRUFLUE9JTlQpOiBTbG90Q29uZmlnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbiBvcmRlciB0byBoZWxwIGRldmVsb3BlcnMsIHdlIHByaW50IHNvbWUgZGV0YWlsZWQgbG9nIGluZm9ybWF0aW9uIGluXHJcbiAgICAgKiBjYXNlIHRoZXJlJ3Mgbm8gbGF5b3V0IGNvbmZpZ3VyYXRpb24gYXZhaWxhYmxlIGZvciB0aGUgZ2l2ZW4gcGFnZSB0ZW1wbGF0ZVxyXG4gICAgICogb3Igc2VjdGlvbi4gQWRkaXRpb25hbGx5LCB0aGUgc2xvdCBwb3NpdGlvbnMgYXJlIHByaW50ZWQgaW4gdGhlIGNvbnNvbGVcclxuICAgICAqIGluIGEgZm9ybWF0IHRoYXQgY2FuIGJlIGNvcGllZCAvIHBhc3RlIHRvIHRoZSBjb25maWd1cmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGxvZ01pc3NpbmdMYXlvdXRDb25maWc7XHJcbn1cclxuIl19