import { ComponentRef, ViewContainerRef } from '@angular/core';
import { Observable } from 'rxjs';
import { LayoutConfig } from '../../config/layout-config';
import { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';
import { LaunchRenderStrategy } from './launch-render.strategy';
import * as ɵngcc0 from '@angular/core';
export declare class LaunchDialogService {
    protected renderStrategies: LaunchRenderStrategy[];
    protected layoutConfig: LayoutConfig;
    private _dialogClose;
    constructor(renderStrategies: LaunchRenderStrategy[], layoutConfig: LayoutConfig);
    /**
     * Render the element based on the strategy from the launch configuration
     *
     * @param caller LAUNCH_CALLER
     * @param vcr View Container Ref of the container for inline rendering
     */
    launch(caller: LAUNCH_CALLER | string, vcr?: ViewContainerRef): void | Observable<ComponentRef<any>>;
    /**
     * Util method to remove element from rendered elements list
     *
     * @param caller LAUNCH_CALLER
     */
    clear(caller: LAUNCH_CALLER | string): void;
    get dialogClose(): Observable<string>;
    closeDialog(reason: string): void;
    /**
     * Returns the configuration for the caller
     *
     * @param caller LAUNCH_CALLER
     */
    protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions;
    /**
     * Returns the render strategy based on the configuration
     *
     * @param config Configuration for launch
     */
    protected getStrategy(config: LaunchOptions): LaunchRenderStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LaunchDialogService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF1bmNoLWRpYWxvZy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImxhdW5jaC1kaWFsb2cuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IExheW91dENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9sYXlvdXQtY29uZmlnJztcclxuaW1wb3J0IHsgTGF1bmNoT3B0aW9ucywgTEFVTkNIX0NBTExFUiB9IGZyb20gJy4uL2NvbmZpZy9sYXVuY2gtY29uZmlnJztcclxuaW1wb3J0IHsgTGF1bmNoUmVuZGVyU3RyYXRlZ3kgfSBmcm9tICcuL2xhdW5jaC1yZW5kZXIuc3RyYXRlZ3knO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMYXVuY2hEaWFsb2dTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCByZW5kZXJTdHJhdGVnaWVzOiBMYXVuY2hSZW5kZXJTdHJhdGVneVtdO1xyXG4gICAgcHJvdGVjdGVkIGxheW91dENvbmZpZzogTGF5b3V0Q29uZmlnO1xyXG4gICAgcHJpdmF0ZSBfZGlhbG9nQ2xvc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJTdHJhdGVnaWVzOiBMYXVuY2hSZW5kZXJTdHJhdGVneVtdLCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZyk7XHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciB0aGUgZWxlbWVudCBiYXNlZCBvbiB0aGUgc3RyYXRlZ3kgZnJvbSB0aGUgbGF1bmNoIGNvbmZpZ3VyYXRpb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FsbGVyIExBVU5DSF9DQUxMRVJcclxuICAgICAqIEBwYXJhbSB2Y3IgVmlldyBDb250YWluZXIgUmVmIG9mIHRoZSBjb250YWluZXIgZm9yIGlubGluZSByZW5kZXJpbmdcclxuICAgICAqL1xyXG4gICAgbGF1bmNoKGNhbGxlcjogTEFVTkNIX0NBTExFUiB8IHN0cmluZywgdmNyPzogVmlld0NvbnRhaW5lclJlZik6IHZvaWQgfCBPYnNlcnZhYmxlPENvbXBvbmVudFJlZjxhbnk+PjtcclxuICAgIC8qKlxyXG4gICAgICogVXRpbCBtZXRob2QgdG8gcmVtb3ZlIGVsZW1lbnQgZnJvbSByZW5kZXJlZCBlbGVtZW50cyBsaXN0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxlciBMQVVOQ0hfQ0FMTEVSXHJcbiAgICAgKi9cclxuICAgIGNsZWFyKGNhbGxlcjogTEFVTkNIX0NBTExFUiB8IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBnZXQgZGlhbG9nQ2xvc2UoKTogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgY2xvc2VEaWFsb2cocmVhc29uOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgY2FsbGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxlciBMQVVOQ0hfQ0FMTEVSXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBmaW5kQ29uZmlndXJhdGlvbihjYWxsZXI6IExBVU5DSF9DQUxMRVIgfCBzdHJpbmcpOiBMYXVuY2hPcHRpb25zO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSByZW5kZXIgc3RyYXRlZ3kgYmFzZWQgb24gdGhlIGNvbmZpZ3VyYXRpb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24gZm9yIGxhdW5jaFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0U3RyYXRlZ3koY29uZmlnOiBMYXVuY2hPcHRpb25zKTogTGF1bmNoUmVuZGVyU3RyYXRlZ3k7XHJcbn1cclxuIl19