import { OnDestroy } from '@angular/core';
import { ConfigInitializerService, LanguageService, WindowRef } from '@spartacus/core';
import { Subscription } from 'rxjs';
import { Direction, DirectionMode } from './config/direction.model';
/**
 * The `DirectionService` can be used to add the direction to the overall storefront or individual elements.
 * By default, the direction is added to the `html` element (i.e. `<html dir="ltr">`). The API of this service
 * does however provide methods to add direction to individual elements if needed.
 *
 * The direction is configurable and allows for language driven direction configuration.
 *
 * To react to the active language, the service subscribes to the active language in the initialize method. This
 * is called from an APP_INITIALIZER method and should only happen once.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DirectionService implements OnDestroy {
    protected configInit: ConfigInitializerService;
    protected languageService: LanguageService;
    protected winRef: WindowRef;
    protected config: Direction;
    protected startsDetecting: boolean;
    protected subscription: Subscription;
    constructor(configInit: ConfigInitializerService, languageService: LanguageService, winRef: WindowRef);
    /**
     * Initializes the layout direction for the storefront.
     */
    initialize(): Promise<void>;
    /**
     * Observes the _active_ language and set the required direction for the given language.
     * The method is guarded to ensure that the active language is observed only once.
     */
    protected detect(): void;
    /**
     * Sets the direction attribute for the given element. If the direction is undefined, the `dir`
     * attribute is removed.
     */
    setDirection(el: HTMLElement, direction: DirectionMode): void;
    /**
     * Gets the `DirectionMode` for the given language isoCode. The language isoCode is compared
     * to the configured list of languages(`direction.rtlLanguages` vs `direction.ltrLanguages`).
     *
     * If no language is given, or no language mapping could be found, we fallback to the default
     * `direction.mode`.
     */
    getDirection(language?: string): DirectionMode;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DirectionService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGlyZWN0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbmZpZ0luaXRpYWxpemVyU2VydmljZSwgTGFuZ3VhZ2VTZXJ2aWNlLCBXaW5kb3dSZWYgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRGlyZWN0aW9uLCBEaXJlY3Rpb25Nb2RlIH0gZnJvbSAnLi9jb25maWcvZGlyZWN0aW9uLm1vZGVsJztcclxuLyoqXHJcbiAqIFRoZSBgRGlyZWN0aW9uU2VydmljZWAgY2FuIGJlIHVzZWQgdG8gYWRkIHRoZSBkaXJlY3Rpb24gdG8gdGhlIG92ZXJhbGwgc3RvcmVmcm9udCBvciBpbmRpdmlkdWFsIGVsZW1lbnRzLlxyXG4gKiBCeSBkZWZhdWx0LCB0aGUgZGlyZWN0aW9uIGlzIGFkZGVkIHRvIHRoZSBgaHRtbGAgZWxlbWVudCAoaS5lLiBgPGh0bWwgZGlyPVwibHRyXCI+YCkuIFRoZSBBUEkgb2YgdGhpcyBzZXJ2aWNlXHJcbiAqIGRvZXMgaG93ZXZlciBwcm92aWRlIG1ldGhvZHMgdG8gYWRkIGRpcmVjdGlvbiB0byBpbmRpdmlkdWFsIGVsZW1lbnRzIGlmIG5lZWRlZC5cclxuICpcclxuICogVGhlIGRpcmVjdGlvbiBpcyBjb25maWd1cmFibGUgYW5kIGFsbG93cyBmb3IgbGFuZ3VhZ2UgZHJpdmVuIGRpcmVjdGlvbiBjb25maWd1cmF0aW9uLlxyXG4gKlxyXG4gKiBUbyByZWFjdCB0byB0aGUgYWN0aXZlIGxhbmd1YWdlLCB0aGUgc2VydmljZSBzdWJzY3JpYmVzIHRvIHRoZSBhY3RpdmUgbGFuZ3VhZ2UgaW4gdGhlIGluaXRpYWxpemUgbWV0aG9kLiBUaGlzXHJcbiAqIGlzIGNhbGxlZCBmcm9tIGFuIEFQUF9JTklUSUFMSVpFUiBtZXRob2QgYW5kIHNob3VsZCBvbmx5IGhhcHBlbiBvbmNlLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGlyZWN0aW9uU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnSW5pdDogQ29uZmlnSW5pdGlhbGl6ZXJTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIHdpblJlZjogV2luZG93UmVmO1xyXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogRGlyZWN0aW9uO1xyXG4gICAgcHJvdGVjdGVkIHN0YXJ0c0RldGVjdGluZzogYm9vbGVhbjtcclxuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ0luaXQ6IENvbmZpZ0luaXRpYWxpemVyU2VydmljZSwgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2UsIHdpblJlZjogV2luZG93UmVmKTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGxheW91dCBkaXJlY3Rpb24gZm9yIHRoZSBzdG9yZWZyb250LlxyXG4gICAgICovXHJcbiAgICBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD47XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmVzIHRoZSBfYWN0aXZlXyBsYW5ndWFnZSBhbmQgc2V0IHRoZSByZXF1aXJlZCBkaXJlY3Rpb24gZm9yIHRoZSBnaXZlbiBsYW5ndWFnZS5cclxuICAgICAqIFRoZSBtZXRob2QgaXMgZ3VhcmRlZCB0byBlbnN1cmUgdGhhdCB0aGUgYWN0aXZlIGxhbmd1YWdlIGlzIG9ic2VydmVkIG9ubHkgb25jZS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGRldGVjdCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBkaXJlY3Rpb24gYXR0cmlidXRlIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC4gSWYgdGhlIGRpcmVjdGlvbiBpcyB1bmRlZmluZWQsIHRoZSBgZGlyYFxyXG4gICAgICogYXR0cmlidXRlIGlzIHJlbW92ZWQuXHJcbiAgICAgKi9cclxuICAgIHNldERpcmVjdGlvbihlbDogSFRNTEVsZW1lbnQsIGRpcmVjdGlvbjogRGlyZWN0aW9uTW9kZSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGBEaXJlY3Rpb25Nb2RlYCBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlIGlzb0NvZGUuIFRoZSBsYW5ndWFnZSBpc29Db2RlIGlzIGNvbXBhcmVkXHJcbiAgICAgKiB0byB0aGUgY29uZmlndXJlZCBsaXN0IG9mIGxhbmd1YWdlcyhgZGlyZWN0aW9uLnJ0bExhbmd1YWdlc2AgdnMgYGRpcmVjdGlvbi5sdHJMYW5ndWFnZXNgKS5cclxuICAgICAqXHJcbiAgICAgKiBJZiBubyBsYW5ndWFnZSBpcyBnaXZlbiwgb3Igbm8gbGFuZ3VhZ2UgbWFwcGluZyBjb3VsZCBiZSBmb3VuZCwgd2UgZmFsbGJhY2sgdG8gdGhlIGRlZmF1bHRcclxuICAgICAqIGBkaXJlY3Rpb24ubW9kZWAuXHJcbiAgICAgKi9cclxuICAgIGdldERpcmVjdGlvbihsYW5ndWFnZT86IHN0cmluZyk6IERpcmVjdGlvbk1vZGU7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==