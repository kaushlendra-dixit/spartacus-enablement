import { BaseFocusService } from '../base/base-focus.service';
import { PersistFocusConfig } from '../keyboard-focus.model';
/**
 * Shared service to persist the focus for an element or a group
 * of elements. The persisted element focus can be used to persist
 * the focus for a DOM tree, so that the focus remains after a repaint
 * or reoccurs when a DOM tree is "unlocked".
 */
import * as ɵngcc0 from '@angular/core';
export declare class PersistFocusService extends BaseFocusService {
    protected focus: Map<string, string>;
    get(group?: string): string;
    /**
     * Persist the keyboard focus state for the given key. The focus is stored globally
     * or for the given group.
     */
    set(key: string, group?: string): void;
    /**
     * Clears the persisted keyboard focus state globally or for the given group.
     */
    clear(group?: string): void;
    /**
     * Returns the group for the host element based on the configured group or
     * by the `data-cx-focus-group` attribute stored on the host.
     */
    getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PersistFocusService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc2lzdC1mb2N1cy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInBlcnNpc3QtZm9jdXMuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VGb2N1c1NlcnZpY2UgfSBmcm9tICcuLi9iYXNlL2Jhc2UtZm9jdXMuc2VydmljZSc7XHJcbmltcG9ydCB7IFBlcnNpc3RGb2N1c0NvbmZpZyB9IGZyb20gJy4uL2tleWJvYXJkLWZvY3VzLm1vZGVsJztcclxuLyoqXHJcbiAqIFNoYXJlZCBzZXJ2aWNlIHRvIHBlcnNpc3QgdGhlIGZvY3VzIGZvciBhbiBlbGVtZW50IG9yIGEgZ3JvdXBcclxuICogb2YgZWxlbWVudHMuIFRoZSBwZXJzaXN0ZWQgZWxlbWVudCBmb2N1cyBjYW4gYmUgdXNlZCB0byBwZXJzaXN0XHJcbiAqIHRoZSBmb2N1cyBmb3IgYSBET00gdHJlZSwgc28gdGhhdCB0aGUgZm9jdXMgcmVtYWlucyBhZnRlciBhIHJlcGFpbnRcclxuICogb3IgcmVvY2N1cnMgd2hlbiBhIERPTSB0cmVlIGlzIFwidW5sb2NrZWRcIi5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBlcnNpc3RGb2N1c1NlcnZpY2UgZXh0ZW5kcyBCYXNlRm9jdXNTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCBmb2N1czogTWFwPHN0cmluZywgc3RyaW5nPjtcclxuICAgIGdldChncm91cD86IHN0cmluZyk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogUGVyc2lzdCB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgZm9yIHRoZSBnaXZlbiBrZXkuIFRoZSBmb2N1cyBpcyBzdG9yZWQgZ2xvYmFsbHlcclxuICAgICAqIG9yIGZvciB0aGUgZ2l2ZW4gZ3JvdXAuXHJcbiAgICAgKi9cclxuICAgIHNldChrZXk6IHN0cmluZywgZ3JvdXA/OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIHBlcnNpc3RlZCBrZXlib2FyZCBmb2N1cyBzdGF0ZSBnbG9iYWxseSBvciBmb3IgdGhlIGdpdmVuIGdyb3VwLlxyXG4gICAgICovXHJcbiAgICBjbGVhcihncm91cD86IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGdyb3VwIGZvciB0aGUgaG9zdCBlbGVtZW50IGJhc2VkIG9uIHRoZSBjb25maWd1cmVkIGdyb3VwIG9yXHJcbiAgICAgKiBieSB0aGUgYGRhdGEtY3gtZm9jdXMtZ3JvdXBgIGF0dHJpYnV0ZSBzdG9yZWQgb24gdGhlIGhvc3QuXHJcbiAgICAgKi9cclxuICAgIGdldFBlcnNpc3RlbmNlR3JvdXAoaG9zdDogSFRNTEVsZW1lbnQsIGNvbmZpZz86IFBlcnNpc3RGb2N1c0NvbmZpZyk6IHN0cmluZztcclxufVxyXG4iXX0=