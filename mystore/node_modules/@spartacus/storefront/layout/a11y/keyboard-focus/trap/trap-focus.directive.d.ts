import { ElementRef, OnInit } from '@angular/core';
import { TrapFocusConfig } from '../keyboard-focus.model';
import { TabFocusDirective } from '../tab/tab-focus.directive';
import { TrapFocusService } from './trap-focus.service';
/**
 * Directive that keeps the focus inside the focussable child elements,
 * also known as a _focus trap_.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TrapFocusDirective extends TabFocusDirective implements OnInit {
    protected elementRef: ElementRef;
    protected service: TrapFocusService;
    protected defaultConfig: TrapFocusConfig;
    protected config: TrapFocusConfig;
    handleTrapDown: (event: KeyboardEvent) => void;
    handleTrapUp: (event: KeyboardEvent) => void;
    constructor(elementRef: ElementRef, service: TrapFocusService);
    /**
     * Moves the focus of the element reference up or down, depending on the increment.
     * The focus of the element is trapped to avoid it from going out of the group.
     *
     * @param event UIEvent that is used to get the target element. The event is blocked
     *   from standard execution and further bubbling.
     * @param increment indicates whether the next or previous is focussed.
     */
    protected moveFocus(event: UIEvent, increment: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TrapFocusDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TrapFocusDirective, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhcC1mb2N1cy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidHJhcC1mb2N1cy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyYXBGb2N1c0NvbmZpZyB9IGZyb20gJy4uL2tleWJvYXJkLWZvY3VzLm1vZGVsJztcclxuaW1wb3J0IHsgVGFiRm9jdXNEaXJlY3RpdmUgfSBmcm9tICcuLi90YWIvdGFiLWZvY3VzLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFRyYXBGb2N1c1NlcnZpY2UgfSBmcm9tICcuL3RyYXAtZm9jdXMuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBEaXJlY3RpdmUgdGhhdCBrZWVwcyB0aGUgZm9jdXMgaW5zaWRlIHRoZSBmb2N1c3NhYmxlIGNoaWxkIGVsZW1lbnRzLFxyXG4gKiBhbHNvIGtub3duIGFzIGEgX2ZvY3VzIHRyYXBfLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVHJhcEZvY3VzRGlyZWN0aXZlIGV4dGVuZHMgVGFiRm9jdXNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XHJcbiAgICBwcm90ZWN0ZWQgc2VydmljZTogVHJhcEZvY3VzU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBkZWZhdWx0Q29uZmlnOiBUcmFwRm9jdXNDb25maWc7XHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBUcmFwRm9jdXNDb25maWc7XHJcbiAgICBoYW5kbGVUcmFwRG93bjogKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkO1xyXG4gICAgaGFuZGxlVHJhcFVwOiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBzZXJ2aWNlOiBUcmFwRm9jdXNTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogTW92ZXMgdGhlIGZvY3VzIG9mIHRoZSBlbGVtZW50IHJlZmVyZW5jZSB1cCBvciBkb3duLCBkZXBlbmRpbmcgb24gdGhlIGluY3JlbWVudC5cclxuICAgICAqIFRoZSBmb2N1cyBvZiB0aGUgZWxlbWVudCBpcyB0cmFwcGVkIHRvIGF2b2lkIGl0IGZyb20gZ29pbmcgb3V0IG9mIHRoZSBncm91cC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgVUlFdmVudCB0aGF0IGlzIHVzZWQgdG8gZ2V0IHRoZSB0YXJnZXQgZWxlbWVudC4gVGhlIGV2ZW50IGlzIGJsb2NrZWRcclxuICAgICAqICAgZnJvbSBzdGFuZGFyZCBleGVjdXRpb24gYW5kIGZ1cnRoZXIgYnViYmxpbmcuXHJcbiAgICAgKiBAcGFyYW0gaW5jcmVtZW50IGluZGljYXRlcyB3aGV0aGVyIHRoZSBuZXh0IG9yIHByZXZpb3VzIGlzIGZvY3Vzc2VkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbW92ZUZvY3VzKGV2ZW50OiBVSUV2ZW50LCBpbmNyZW1lbnQ6IG51bWJlcik6IHZvaWQ7XHJcbn1cclxuIl19