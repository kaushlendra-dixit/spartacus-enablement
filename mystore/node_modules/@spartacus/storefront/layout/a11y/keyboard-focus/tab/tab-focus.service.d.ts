import { AutoFocusService } from '../autofocus/auto-focus.service';
import { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';
import * as ɵngcc0 from '@angular/core';
export declare class TabFocusService extends AutoFocusService {
    /**
     * Moves to the next (or previous) tab.
     */
    moveTab(host: HTMLElement, config: TabFocusConfig, increment: MOVE_FOCUS, event: KeyboardEvent): void;
    /**
     * builds out virtual slides out of the full scrollable area, to allow
     * for maximum flexibility for the underlying layout without using hardcoded
     * slide sizes.
     */
    protected findNextScrollable(host: HTMLElement, config: TabFocusConfig, increment: MOVE_FOCUS): HTMLElement;
    protected findNext(host: HTMLElement, config: TabFocusConfig, increment: MOVE_FOCUS): HTMLElement;
    /**
     * Returns the active focusable child element. If there's no active
     * focusable child element, the first focusable child is returned.
     */
    protected getActiveChild(host: HTMLElement, config: TabFocusConfig): HTMLElement;
    protected getChildren(host: HTMLElement, config: TabFocusConfig): HTMLElement[];
    /**
     * Returns all focusable child elements of the host element.
     *
     * @param host The host element is used to query child focusable elements.
     * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.
     * @param invisible Indicates if invisible child elements should be returned, defaults to false.
     */
    findFocusable(host: HTMLElement, locked?: boolean, invisible?: boolean): HTMLElement[];
    protected isActive(el: HTMLElement): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabFocusService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWZvY3VzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidGFiLWZvY3VzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF1dG9Gb2N1c1NlcnZpY2UgfSBmcm9tICcuLi9hdXRvZm9jdXMvYXV0by1mb2N1cy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTU9WRV9GT0NVUywgVGFiRm9jdXNDb25maWcgfSBmcm9tICcuLi9rZXlib2FyZC1mb2N1cy5tb2RlbCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYkZvY3VzU2VydmljZSBleHRlbmRzIEF1dG9Gb2N1c1NlcnZpY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3ZlcyB0byB0aGUgbmV4dCAob3IgcHJldmlvdXMpIHRhYi5cclxuICAgICAqL1xyXG4gICAgbW92ZVRhYihob3N0OiBIVE1MRWxlbWVudCwgY29uZmlnOiBUYWJGb2N1c0NvbmZpZywgaW5jcmVtZW50OiBNT1ZFX0ZPQ1VTLCBldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIGJ1aWxkcyBvdXQgdmlydHVhbCBzbGlkZXMgb3V0IG9mIHRoZSBmdWxsIHNjcm9sbGFibGUgYXJlYSwgdG8gYWxsb3dcclxuICAgICAqIGZvciBtYXhpbXVtIGZsZXhpYmlsaXR5IGZvciB0aGUgdW5kZXJseWluZyBsYXlvdXQgd2l0aG91dCB1c2luZyBoYXJkY29kZWRcclxuICAgICAqIHNsaWRlIHNpemVzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZmluZE5leHRTY3JvbGxhYmxlKGhvc3Q6IEhUTUxFbGVtZW50LCBjb25maWc6IFRhYkZvY3VzQ29uZmlnLCBpbmNyZW1lbnQ6IE1PVkVfRk9DVVMpOiBIVE1MRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBmaW5kTmV4dChob3N0OiBIVE1MRWxlbWVudCwgY29uZmlnOiBUYWJGb2N1c0NvbmZpZywgaW5jcmVtZW50OiBNT1ZFX0ZPQ1VTKTogSFRNTEVsZW1lbnQ7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGFjdGl2ZSBmb2N1c2FibGUgY2hpbGQgZWxlbWVudC4gSWYgdGhlcmUncyBubyBhY3RpdmVcclxuICAgICAqIGZvY3VzYWJsZSBjaGlsZCBlbGVtZW50LCB0aGUgZmlyc3QgZm9jdXNhYmxlIGNoaWxkIGlzIHJldHVybmVkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0QWN0aXZlQ2hpbGQoaG9zdDogSFRNTEVsZW1lbnQsIGNvbmZpZzogVGFiRm9jdXNDb25maWcpOiBIVE1MRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBnZXRDaGlsZHJlbihob3N0OiBIVE1MRWxlbWVudCwgY29uZmlnOiBUYWJGb2N1c0NvbmZpZyk6IEhUTUxFbGVtZW50W107XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYWxsIGZvY3VzYWJsZSBjaGlsZCBlbGVtZW50cyBvZiB0aGUgaG9zdCBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBob3N0IFRoZSBob3N0IGVsZW1lbnQgaXMgdXNlZCB0byBxdWVyeSBjaGlsZCBmb2N1c2FibGUgZWxlbWVudHMuXHJcbiAgICAgKiBAcGFyYW0gbG9ja2VkIEluZGljYXRlcyBpZiBsb2NrZWQgZWxlbWVudHMgKHRhYmluZGV4PS0xKSBzaG91bGQgYmUgcmV0dXJuZWQsIGRlZmF1bHRzIHRvIGZhbHNlLlxyXG4gICAgICogQHBhcmFtIGludmlzaWJsZSBJbmRpY2F0ZXMgaWYgaW52aXNpYmxlIGNoaWxkIGVsZW1lbnRzIHNob3VsZCBiZSByZXR1cm5lZCwgZGVmYXVsdHMgdG8gZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIGZpbmRGb2N1c2FibGUoaG9zdDogSFRNTEVsZW1lbnQsIGxvY2tlZD86IGJvb2xlYW4sIGludmlzaWJsZT86IGJvb2xlYW4pOiBIVE1MRWxlbWVudFtdO1xyXG4gICAgcHJvdGVjdGVkIGlzQWN0aXZlKGVsOiBIVE1MRWxlbWVudCk6IGJvb2xlYW47XHJcbn1cclxuIl19