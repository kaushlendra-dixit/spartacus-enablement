import { DeferLoadingStrategy } from '@spartacus/core';
import { Observable } from 'rxjs';
import { LayoutConfig } from '../config/layout-config';
import { IntersectionOptions } from './intersection.model';
import { IntersectionService } from './intersection.service';
/**
 * The defer loading serivce is used to defer loading of DOM elements
 * until the elements are required for the user experience.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DeferLoaderService {
    private platformId;
    protected config: LayoutConfig;
    protected intersectionService: IntersectionService;
    globalLoadStrategy: DeferLoadingStrategy;
    constructor(platformId: Object, config: LayoutConfig, intersectionService: IntersectionService);
    /**
     * Defer loading till the element intersects the viewport.
     *
     * We evaluate whether we instantly load the element for different reasons:
     * - we run in SSR mode
     * - there's no global strategy given
     * - the global loading strategy is set to INSTANT loading,
     *   and the loading strategy in the given is not set to DEFER
     * - the loading strategy in the given options is set to INSTANT
     */
    load(element: HTMLElement, options?: IntersectionOptions): Observable<boolean>;
    private shouldLoadInstantly;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DeferLoaderService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmZXItbG9hZGVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGVmZXItbG9hZGVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVmZXJMb2FkaW5nU3RyYXRlZ3kgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IExheW91dENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9sYXlvdXQtY29uZmlnJztcclxuaW1wb3J0IHsgSW50ZXJzZWN0aW9uT3B0aW9ucyB9IGZyb20gJy4vaW50ZXJzZWN0aW9uLm1vZGVsJztcclxuaW1wb3J0IHsgSW50ZXJzZWN0aW9uU2VydmljZSB9IGZyb20gJy4vaW50ZXJzZWN0aW9uLnNlcnZpY2UnO1xyXG4vKipcclxuICogVGhlIGRlZmVyIGxvYWRpbmcgc2VyaXZjZSBpcyB1c2VkIHRvIGRlZmVyIGxvYWRpbmcgb2YgRE9NIGVsZW1lbnRzXHJcbiAqIHVudGlsIHRoZSBlbGVtZW50cyBhcmUgcmVxdWlyZWQgZm9yIHRoZSB1c2VyIGV4cGVyaWVuY2UuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEZWZlckxvYWRlclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xyXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogTGF5b3V0Q29uZmlnO1xyXG4gICAgcHJvdGVjdGVkIGludGVyc2VjdGlvblNlcnZpY2U6IEludGVyc2VjdGlvblNlcnZpY2U7XHJcbiAgICBnbG9iYWxMb2FkU3RyYXRlZ3k6IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xyXG4gICAgY29uc3RydWN0b3IocGxhdGZvcm1JZDogT2JqZWN0LCBjb25maWc6IExheW91dENvbmZpZywgaW50ZXJzZWN0aW9uU2VydmljZTogSW50ZXJzZWN0aW9uU2VydmljZSk7XHJcbiAgICAvKipcclxuICAgICAqIERlZmVyIGxvYWRpbmcgdGlsbCB0aGUgZWxlbWVudCBpbnRlcnNlY3RzIHRoZSB2aWV3cG9ydC5cclxuICAgICAqXHJcbiAgICAgKiBXZSBldmFsdWF0ZSB3aGV0aGVyIHdlIGluc3RhbnRseSBsb2FkIHRoZSBlbGVtZW50IGZvciBkaWZmZXJlbnQgcmVhc29uczpcclxuICAgICAqIC0gd2UgcnVuIGluIFNTUiBtb2RlXHJcbiAgICAgKiAtIHRoZXJlJ3Mgbm8gZ2xvYmFsIHN0cmF0ZWd5IGdpdmVuXHJcbiAgICAgKiAtIHRoZSBnbG9iYWwgbG9hZGluZyBzdHJhdGVneSBpcyBzZXQgdG8gSU5TVEFOVCBsb2FkaW5nLFxyXG4gICAgICogICBhbmQgdGhlIGxvYWRpbmcgc3RyYXRlZ3kgaW4gdGhlIGdpdmVuIGlzIG5vdCBzZXQgdG8gREVGRVJcclxuICAgICAqIC0gdGhlIGxvYWRpbmcgc3RyYXRlZ3kgaW4gdGhlIGdpdmVuIG9wdGlvbnMgaXMgc2V0IHRvIElOU1RBTlRcclxuICAgICAqL1xyXG4gICAgbG9hZChlbGVtZW50OiBIVE1MRWxlbWVudCwgb3B0aW9ucz86IEludGVyc2VjdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgcHJpdmF0ZSBzaG91bGRMb2FkSW5zdGFudGx5O1xyXG59XHJcbiJdfQ==