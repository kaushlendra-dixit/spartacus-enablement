import { DeferLoadingStrategy } from '@spartacus/core';
import { LaunchConfig } from '../launch-dialog/index';
import * as ɵngcc0 from '@angular/core';
export declare enum BREAKPOINT {
    xs = "xs",
    sm = "sm",
    md = "md",
    lg = "lg",
    xl = "xl"
}
export declare type LayoutSections = 'header' | 'footer' | 'LandingPage2Template' | string;
export declare type SlotConfig = {
    /** The cms page slots are mapped by the `slot.position`. */
    slots?: string[];
    /**
     * The page fold identifies the last expected page slot above-the-fold.
     * It's perfectly fine to specify this by indication, but keep in mind that
     * a more precise indication will gain a more positive impact on performance.
     */
    pageFold?: string;
};
export declare type SlotGroup = {
    /** The page slot configuration for large screens */
    [BREAKPOINT.lg]?: SlotConfig;
    /** The page slot configuration for medium screens */
    [BREAKPOINT.md]?: SlotConfig;
    /** The page slot configuration for small screens */
    [BREAKPOINT.sm]?: SlotConfig;
    /** The page slot configuration for extra small screens */
    [BREAKPOINT.xs]?: SlotConfig;
};
export declare type LayoutSlotConfig = {
    [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;
};
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
export declare abstract class LayoutConfig {
    /**
     * The breakpoint configuration is used when the DOM is (re)rendered in specific view.
     * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints.
     */
    breakpoints?: {
        [BREAKPOINT.xs]?: number;
        [BREAKPOINT.sm]?: number;
        [BREAKPOINT.md]?: number;
        [BREAKPOINT.lg]?: number;
    };
    layoutSlots?: LayoutSlotConfig;
    /**
     * Deferred loading is a technique to hold of with the loading / creation
     * of DOM elements which are not not in the initial view port.
     * This technique wil increase performance.
     */
    deferredLoading?: {
        /**
         * The global strategy will be used as a fallback strategy for all DOM creation,
         * but can be overridden by local configuration, i.e. for cms components.
         */
        strategy?: DeferLoadingStrategy;
        /**
         * The intersection margin contains the offset used by the Intersection Observer
         * to observe elements outside the view port.
         *
         * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin
         */
        intersectionMargin?: string;
    };
    launch?: LaunchConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LayoutConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5kLnRzIiwic291cmNlcyI6WyJsYXlvdXQtY29uZmlnLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZlckxvYWRpbmdTdHJhdGVneSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IExhdW5jaENvbmZpZyB9IGZyb20gJy4uL2xhdW5jaC1kaWFsb2cvaW5kZXgnO1xyXG5leHBvcnQgZGVjbGFyZSBlbnVtIEJSRUFLUE9JTlQge1xyXG4gICAgeHMgPSBcInhzXCIsXHJcbiAgICBzbSA9IFwic21cIixcclxuICAgIG1kID0gXCJtZFwiLFxyXG4gICAgbGcgPSBcImxnXCIsXHJcbiAgICB4bCA9IFwieGxcIlxyXG59XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTGF5b3V0U2VjdGlvbnMgPSAnaGVhZGVyJyB8ICdmb290ZXInIHwgJ0xhbmRpbmdQYWdlMlRlbXBsYXRlJyB8IHN0cmluZztcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBTbG90Q29uZmlnID0ge1xyXG4gICAgLyoqIFRoZSBjbXMgcGFnZSBzbG90cyBhcmUgbWFwcGVkIGJ5IHRoZSBgc2xvdC5wb3NpdGlvbmAuICovXHJcbiAgICBzbG90cz86IHN0cmluZ1tdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcGFnZSBmb2xkIGlkZW50aWZpZXMgdGhlIGxhc3QgZXhwZWN0ZWQgcGFnZSBzbG90IGFib3ZlLXRoZS1mb2xkLlxyXG4gICAgICogSXQncyBwZXJmZWN0bHkgZmluZSB0byBzcGVjaWZ5IHRoaXMgYnkgaW5kaWNhdGlvbiwgYnV0IGtlZXAgaW4gbWluZCB0aGF0XHJcbiAgICAgKiBhIG1vcmUgcHJlY2lzZSBpbmRpY2F0aW9uIHdpbGwgZ2FpbiBhIG1vcmUgcG9zaXRpdmUgaW1wYWN0IG9uIHBlcmZvcm1hbmNlLlxyXG4gICAgICovXHJcbiAgICBwYWdlRm9sZD86IHN0cmluZztcclxufTtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBTbG90R3JvdXAgPSB7XHJcbiAgICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBsYXJnZSBzY3JlZW5zICovXHJcbiAgICBbQlJFQUtQT0lOVC5sZ10/OiBTbG90Q29uZmlnO1xyXG4gICAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgbWVkaXVtIHNjcmVlbnMgKi9cclxuICAgIFtCUkVBS1BPSU5ULm1kXT86IFNsb3RDb25maWc7XHJcbiAgICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBzbWFsbCBzY3JlZW5zICovXHJcbiAgICBbQlJFQUtQT0lOVC5zbV0/OiBTbG90Q29uZmlnO1xyXG4gICAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgZXh0cmEgc21hbGwgc2NyZWVucyAqL1xyXG4gICAgW0JSRUFLUE9JTlQueHNdPzogU2xvdENvbmZpZztcclxufTtcclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBMYXlvdXRTbG90Q29uZmlnID0ge1xyXG4gICAgW3NlY3Rpb24gaW4gTGF5b3V0U2VjdGlvbnNdOiBTbG90Q29uZmlnIHwgU2xvdEdyb3VwIHwgTGF5b3V0U2xvdENvbmZpZztcclxufTtcclxuLyoqXHJcbiAqIFRoZSBMYXlvdXRDb25maWcgc3VwcG9ydHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgcGFnZSBzbG90cyBieSBwYWdlIHRlbXBsYXRlc1xyXG4gKiBvciBwYWdlIHNlY3Rpb25zLCBzdWNoIGFzIGhlYWRlcnMgYW5kIGZvb3RlcnMuIFRoZSBjb25maWd1cmF0aW9uIGFsc28gc3VwcG9ydHNcclxuICogYWRhcHRpdmUgZGVzaWduIHBlciBicmVha3BvaW50IChub3QgcGVyIGRldmljZSB0eXBlKSwgc28gdGhhdCB0aGUgRE9NIGlzIChyZSlyZW5kZXJlZFxyXG4gKiBwb3IgYSBnaXZlbiBicmVha3BvaW50LlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgTGF5b3V0Q29uZmlnIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGJyZWFrcG9pbnQgY29uZmlndXJhdGlvbiBpcyB1c2VkIHdoZW4gdGhlIERPTSBpcyAocmUpcmVuZGVyZWQgaW4gc3BlY2lmaWMgdmlldy5cclxuICAgICAqIFRoaXMgYWxsb3dzIGZvciBhZGFwdGl2ZSByZW5kZXJpbmcsIHNvIHRoYXQgdGhlIERPTSBpcyByZW5kZXJlZCBmb3Igc3BlY2lmaWMgYnJlYWtwb2ludHMuXHJcbiAgICAgKi9cclxuICAgIGJyZWFrcG9pbnRzPzoge1xyXG4gICAgICAgIFtCUkVBS1BPSU5ULnhzXT86IG51bWJlcjtcclxuICAgICAgICBbQlJFQUtQT0lOVC5zbV0/OiBudW1iZXI7XHJcbiAgICAgICAgW0JSRUFLUE9JTlQubWRdPzogbnVtYmVyO1xyXG4gICAgICAgIFtCUkVBS1BPSU5ULmxnXT86IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBsYXlvdXRTbG90cz86IExheW91dFNsb3RDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIERlZmVycmVkIGxvYWRpbmcgaXMgYSB0ZWNobmlxdWUgdG8gaG9sZCBvZiB3aXRoIHRoZSBsb2FkaW5nIC8gY3JlYXRpb25cclxuICAgICAqIG9mIERPTSBlbGVtZW50cyB3aGljaCBhcmUgbm90IG5vdCBpbiB0aGUgaW5pdGlhbCB2aWV3IHBvcnQuXHJcbiAgICAgKiBUaGlzIHRlY2huaXF1ZSB3aWwgaW5jcmVhc2UgcGVyZm9ybWFuY2UuXHJcbiAgICAgKi9cclxuICAgIGRlZmVycmVkTG9hZGluZz86IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZ2xvYmFsIHN0cmF0ZWd5IHdpbGwgYmUgdXNlZCBhcyBhIGZhbGxiYWNrIHN0cmF0ZWd5IGZvciBhbGwgRE9NIGNyZWF0aW9uLFxyXG4gICAgICAgICAqIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSBsb2NhbCBjb25maWd1cmF0aW9uLCBpLmUuIGZvciBjbXMgY29tcG9uZW50cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdHJhdGVneT86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBpbnRlcnNlY3Rpb24gbWFyZ2luIGNvbnRhaW5zIHRoZSBvZmZzZXQgdXNlZCBieSB0aGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyXHJcbiAgICAgICAgICogdG8gb2JzZXJ2ZSBlbGVtZW50cyBvdXRzaWRlIHRoZSB2aWV3IHBvcnQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ludGVyc2VjdGlvbk9ic2VydmVyL3Jvb3RNYXJnaW5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnRlcnNlY3Rpb25NYXJnaW4/OiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgbGF1bmNoPzogTGF1bmNoQ29uZmlnO1xyXG59XHJcbiJdfQ==