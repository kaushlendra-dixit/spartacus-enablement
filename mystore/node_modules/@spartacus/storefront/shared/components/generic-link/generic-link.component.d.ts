import { OnChanges, SimpleChanges } from '@angular/core';
import { Params, Router } from '@angular/router';
/**
 * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.
 */
import * as ɵngcc0 from '@angular/core';
export declare class GenericLinkComponent implements OnChanges {
    protected router: Router;
    constructor(router: Router);
    /**
     * Pattern matching string starting with `http://` or `https://`.
     */
    private readonly PROTOCOL_REGEX;
    /**
     * Used to split url into 2 parts:
     * 1. the path
     * 2. query params + hash fragment
     */
    private readonly URL_SPLIT;
    /**
     * Parsed parts of the @Input `url`, when it's a local URL.
     * It should not be used when the `url` is external.
     * @see `url`
     */
    private routeParts;
    url: string | any[];
    target: string;
    class: string;
    id: string;
    style: string;
    title: string;
    /**
     * Returns true when the @Input `url` is a string starting with `http://` or `https://`.
     */
    isExternalUrl(): boolean;
    get rel(): string;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * The part with the path of the local url.
     */
    get routerUrl(): any[];
    /**
     * The part with the query params of the local url.
     */
    get queryParams(): Params;
    /**
     * The part with the hash fragment of the local url.
     */
    get fragment(): string;
    /**
     * Parses the given url and sets the property `urlParts` accordingly.
     */
    private setUrlParts;
    /**
     * Parses the given string into 3 parts:
     * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)
     * - query params (as an object)
     * - hash fragment (string)
     */
    private splitUrl;
    /**
     * Prepends a leading slash to the given URL string, in case it doesn't have it.
     */
    private getAbsoluteUrl;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GenericLinkComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GenericLinkComponent, "cx-generic-link", never, { "url": "url"; "target": "target"; "class": "class"; "id": "id"; "style": "style"; "title": "title"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpYy1saW5rLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJnZW5lcmljLWxpbmsuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGFyYW1zLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG4vKipcclxuICogVGhpcyBjb21wb25lbnQgbmF2aWdhdGVzIHVzaW5nIFtyb3V0ZXJMaW5rXSBhdHRyaWJ1dGUgd2hlbiBpbnB1dCAndXJsJyBpcyBhIHJlbGF0aXZlIHVybC4gT3RoZXJ3aXNlICh3aGVuIGl0J3MgYWJzb2x1dGUpLCBbaHJlZl0gaXMgdXNlZC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdlbmVyaWNMaW5rQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcjtcclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyKTtcclxuICAgIC8qKlxyXG4gICAgICogUGF0dGVybiBtYXRjaGluZyBzdHJpbmcgc3RhcnRpbmcgd2l0aCBgaHR0cDovL2Agb3IgYGh0dHBzOi8vYC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBQUk9UT0NPTF9SRUdFWDtcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBzcGxpdCB1cmwgaW50byAyIHBhcnRzOlxyXG4gICAgICogMS4gdGhlIHBhdGhcclxuICAgICAqIDIuIHF1ZXJ5IHBhcmFtcyArIGhhc2ggZnJhZ21lbnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBVUkxfU1BMSVQ7XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlZCBwYXJ0cyBvZiB0aGUgQElucHV0IGB1cmxgLCB3aGVuIGl0J3MgYSBsb2NhbCBVUkwuXHJcbiAgICAgKiBJdCBzaG91bGQgbm90IGJlIHVzZWQgd2hlbiB0aGUgYHVybGAgaXMgZXh0ZXJuYWwuXHJcbiAgICAgKiBAc2VlIGB1cmxgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcm91dGVQYXJ0cztcclxuICAgIHVybDogc3RyaW5nIHwgYW55W107XHJcbiAgICB0YXJnZXQ6IHN0cmluZztcclxuICAgIGNsYXNzOiBzdHJpbmc7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgc3R5bGU6IHN0cmluZztcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSBASW5wdXQgYHVybGAgaXMgYSBzdHJpbmcgc3RhcnRpbmcgd2l0aCBgaHR0cDovL2Agb3IgYGh0dHBzOi8vYC5cclxuICAgICAqL1xyXG4gICAgaXNFeHRlcm5hbFVybCgpOiBib29sZWFuO1xyXG4gICAgZ2V0IHJlbCgpOiBzdHJpbmc7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHBhcnQgd2l0aCB0aGUgcGF0aCBvZiB0aGUgbG9jYWwgdXJsLlxyXG4gICAgICovXHJcbiAgICBnZXQgcm91dGVyVXJsKCk6IGFueVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcGFydCB3aXRoIHRoZSBxdWVyeSBwYXJhbXMgb2YgdGhlIGxvY2FsIHVybC5cclxuICAgICAqL1xyXG4gICAgZ2V0IHF1ZXJ5UGFyYW1zKCk6IFBhcmFtcztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHBhcnQgd2l0aCB0aGUgaGFzaCBmcmFnbWVudCBvZiB0aGUgbG9jYWwgdXJsLlxyXG4gICAgICovXHJcbiAgICBnZXQgZnJhZ21lbnQoKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgdGhlIGdpdmVuIHVybCBhbmQgc2V0cyB0aGUgcHJvcGVydHkgYHVybFBhcnRzYCBhY2NvcmRpbmdseS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZXRVcmxQYXJ0cztcclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHRoZSBnaXZlbiBzdHJpbmcgaW50byAzIHBhcnRzOlxyXG4gICAgICogLSBzdHJpbmcgcGF0aCAod3JhcHBlZCBpbiBhbiBhcnJheSB0byBiZSBjb21wYXRpYmxlIHdpdGggQW5ndWxhciBzeW50YXggZm9yIHRoZSBgcm91dGVyTGlua2ApXHJcbiAgICAgKiAtIHF1ZXJ5IHBhcmFtcyAoYXMgYW4gb2JqZWN0KVxyXG4gICAgICogLSBoYXNoIGZyYWdtZW50IChzdHJpbmcpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3BsaXRVcmw7XHJcbiAgICAvKipcclxuICAgICAqIFByZXBlbmRzIGEgbGVhZGluZyBzbGFzaCB0byB0aGUgZ2l2ZW4gVVJMIHN0cmluZywgaW4gY2FzZSBpdCBkb2Vzbid0IGhhdmUgaXQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QWJzb2x1dGVVcmw7XHJcbn1cclxuIl19