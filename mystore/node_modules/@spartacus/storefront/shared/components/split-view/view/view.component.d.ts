import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Subscription } from 'rxjs';
import { SplitViewService } from '../split-view.service';
/**
 * The view component is part of the `SplitViewComponent`. The view
 * contains the navigable content that should be split up. It maintains
 * a view position and allows to show or hide the view.
 *
 * The ViewComponent interacts with the `SplitViewService` for handing over the
 * view state, so that the overarching `SplitViewComponent` can manage the
 * overall experience.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ViewComponent implements OnInit, OnDestroy {
    protected splitService: SplitViewService;
    protected elementRef: ElementRef;
    protected _hidden: any;
    position: string;
    /**
     * The disappeared flag is added to the
     */
    disappeared: boolean;
    /**
     * The hidden input is used to set the initial visible state of the view.
     * The hidden state defaults to false.
     *
     * The hidden input supports 2-way binding, see `hiddenChange` property.
     */
    set hidden(hidden: boolean);
    /**
     * An update of the view visibility is emitted to the hiddenChange output.
     */
    hiddenChange: EventEmitter<any>;
    protected subscription: Subscription;
    constructor(splitService: SplitViewService, elementRef: ElementRef);
    ngOnInit(): void;
    /**
     * Toggles the visibility of the view.
     *
     * An optional force flag can be used to explicitly show or hide view component.
     */
    toggle(force?: boolean): void;
    /**
     * Returns the position for the view.
     *
     * The position is either taken from the input `position` or generated by the `SplitService`.
     */
    protected get viewPosition(): number;
    /**
     * Returns the duration in milliseconds. The duration is based on the CSS custom property
     * `--cx-transition-duration`. Defaults to 300 milliseconds.
     */
    protected get duration(): number;
    /**
     * Returns the maximum number of views per split-view. The number is based on the CSS custom property
     * `--cx-max-views`. Defaults to `2`
     */
    protected get splitViewCount(): number;
    /**
     * The view is removed from the `SplitService` so that the view no longer
     * plays a role in the overall split view.
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ViewComponent, "cx-view", never, { "hidden": "hidden"; "position": "position"; }, { "hiddenChange": "hiddenChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTcGxpdFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vc3BsaXQtdmlldy5zZXJ2aWNlJztcclxuLyoqXHJcbiAqIFRoZSB2aWV3IGNvbXBvbmVudCBpcyBwYXJ0IG9mIHRoZSBgU3BsaXRWaWV3Q29tcG9uZW50YC4gVGhlIHZpZXdcclxuICogY29udGFpbnMgdGhlIG5hdmlnYWJsZSBjb250ZW50IHRoYXQgc2hvdWxkIGJlIHNwbGl0IHVwLiBJdCBtYWludGFpbnNcclxuICogYSB2aWV3IHBvc2l0aW9uIGFuZCBhbGxvd3MgdG8gc2hvdyBvciBoaWRlIHRoZSB2aWV3LlxyXG4gKlxyXG4gKiBUaGUgVmlld0NvbXBvbmVudCBpbnRlcmFjdHMgd2l0aCB0aGUgYFNwbGl0Vmlld1NlcnZpY2VgIGZvciBoYW5kaW5nIG92ZXIgdGhlXHJcbiAqIHZpZXcgc3RhdGUsIHNvIHRoYXQgdGhlIG92ZXJhcmNoaW5nIGBTcGxpdFZpZXdDb21wb25lbnRgIGNhbiBtYW5hZ2UgdGhlXHJcbiAqIG92ZXJhbGwgZXhwZXJpZW5jZS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBwcm90ZWN0ZWQgc3BsaXRTZXJ2aWNlOiBTcGxpdFZpZXdTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XHJcbiAgICBwcm90ZWN0ZWQgX2hpZGRlbjogYW55O1xyXG4gICAgcG9zaXRpb246IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRpc2FwcGVhcmVkIGZsYWcgaXMgYWRkZWQgdG8gdGhlXHJcbiAgICAgKi9cclxuICAgIGRpc2FwcGVhcmVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaGlkZGVuIGlucHV0IGlzIHVzZWQgdG8gc2V0IHRoZSBpbml0aWFsIHZpc2libGUgc3RhdGUgb2YgdGhlIHZpZXcuXHJcbiAgICAgKiBUaGUgaGlkZGVuIHN0YXRlIGRlZmF1bHRzIHRvIGZhbHNlLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBoaWRkZW4gaW5wdXQgc3VwcG9ydHMgMi13YXkgYmluZGluZywgc2VlIGBoaWRkZW5DaGFuZ2VgIHByb3BlcnR5LlxyXG4gICAgICovXHJcbiAgICBzZXQgaGlkZGVuKGhpZGRlbjogYm9vbGVhbik7XHJcbiAgICAvKipcclxuICAgICAqIEFuIHVwZGF0ZSBvZiB0aGUgdmlldyB2aXNpYmlsaXR5IGlzIGVtaXR0ZWQgdG8gdGhlIGhpZGRlbkNoYW5nZSBvdXRwdXQuXHJcbiAgICAgKi9cclxuICAgIGhpZGRlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihzcGxpdFNlcnZpY2U6IFNwbGl0Vmlld1NlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgdmlldy5cclxuICAgICAqXHJcbiAgICAgKiBBbiBvcHRpb25hbCBmb3JjZSBmbGFnIGNhbiBiZSB1c2VkIHRvIGV4cGxpY2l0bHkgc2hvdyBvciBoaWRlIHZpZXcgY29tcG9uZW50LlxyXG4gICAgICovXHJcbiAgICB0b2dnbGUoZm9yY2U/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcG9zaXRpb24gZm9yIHRoZSB2aWV3LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBwb3NpdGlvbiBpcyBlaXRoZXIgdGFrZW4gZnJvbSB0aGUgaW5wdXQgYHBvc2l0aW9uYCBvciBnZW5lcmF0ZWQgYnkgdGhlIGBTcGxpdFNlcnZpY2VgLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IHZpZXdQb3NpdGlvbigpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy4gVGhlIGR1cmF0aW9uIGlzIGJhc2VkIG9uIHRoZSBDU1MgY3VzdG9tIHByb3BlcnR5XHJcbiAgICAgKiBgLS1jeC10cmFuc2l0aW9uLWR1cmF0aW9uYC4gRGVmYXVsdHMgdG8gMzAwIG1pbGxpc2Vjb25kcy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldCBkdXJhdGlvbigpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHZpZXdzIHBlciBzcGxpdC12aWV3LiBUaGUgbnVtYmVyIGlzIGJhc2VkIG9uIHRoZSBDU1MgY3VzdG9tIHByb3BlcnR5XHJcbiAgICAgKiBgLS1jeC1tYXgtdmlld3NgLiBEZWZhdWx0cyB0byBgMmBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldCBzcGxpdFZpZXdDb3VudCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB2aWV3IGlzIHJlbW92ZWQgZnJvbSB0aGUgYFNwbGl0U2VydmljZWAgc28gdGhhdCB0aGUgdmlldyBubyBsb25nZXJcclxuICAgICAqIHBsYXlzIGEgcm9sZSBpbiB0aGUgb3ZlcmFsbCBzcGxpdCB2aWV3LlxyXG4gICAgICovXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==