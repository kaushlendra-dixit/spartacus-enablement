import { BehaviorSubject, Observable } from 'rxjs';
import { SplitViewState } from './split/split-view.model';
/**
 * Supposed to be injected in the split view component, so that the split view state
 * is maintained for a single split view.
 */
import * as ɵngcc0 from '@angular/core';
export declare class SplitViewService {
    /**
     * Newly added views are hidden by default, unless it is the first view of the split view.
     * The default hide mode can be overridden.
     */
    defaultHideMode: boolean;
    protected _splitViewCount: number;
    protected _views$: BehaviorSubject<any[]>;
    /**
     * Adds a view to the list of views. The view is initialized with the `SplitViewState`
     * state. If no state is provided, the state is created with the hidden property. The hidden
     * property is provided by the `defaultHideMode`, unless it's the first view (position: 0).
     */
    add(position: number, initialState?: SplitViewState): void;
    /**
     * Returns an observable with the active view number. The active view number
     * represents the last visible view.
     */
    getActiveView(): Observable<number>;
    /**
     * Returns an observable with the SplitViewState for the given view position.
     */
    getViewState(position: number): Observable<SplitViewState>;
    /**
     * Removes a view from the list of views.
     *
     * Removing a view is different from hiding a view. Removing a view is typically done
     * when a component is destroyed.
     *
     * When the view is removed, the SplitViewState is updated to reflect that new organization
     * of views.
     */
    remove(position: number): void;
    /**
     * Returns the next view position. This is useful for views that do not want to be bothered
     * with controlling view numbers.
     */
    get nextPosition(): number;
    /**
     * Toggles the visibility of the views based on the given view position. If the view
     * is already visible, we close the view and active the former view. Unless the hide flag
     * is used, to force the view.
     *
     * The view state of other views in the split view are updated as well.
     *
     * @param position The zero-based position number of the view.
     * @param forceHide The (optional) hide state for the view position.
     */
    toggle(position: number, forceHide?: boolean): void;
    protected updateState(position: number, hide?: boolean): void;
    /**
     * Returns the active view count for the list of views.
     */
    protected getActive(views: SplitViewState[]): number;
    /**
     * Sets the view count for the split view.
     *
     * Defaults to 2.
     */
    set splitViewCount(count: number);
    /**
     * Utility method that resolves all views from the subject.
     */
    protected get views(): SplitViewState[];
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SplitViewService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SplitViewService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXQtdmlldy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInNwbGl0LXZpZXcuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgU3BsaXRWaWV3U3RhdGUgfSBmcm9tICcuL3NwbGl0L3NwbGl0LXZpZXcubW9kZWwnO1xyXG4vKipcclxuICogU3VwcG9zZWQgdG8gYmUgaW5qZWN0ZWQgaW4gdGhlIHNwbGl0IHZpZXcgY29tcG9uZW50LCBzbyB0aGF0IHRoZSBzcGxpdCB2aWV3IHN0YXRlXHJcbiAqIGlzIG1haW50YWluZWQgZm9yIGEgc2luZ2xlIHNwbGl0IHZpZXcuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTcGxpdFZpZXdTZXJ2aWNlIHtcclxuICAgIC8qKlxyXG4gICAgICogTmV3bHkgYWRkZWQgdmlld3MgYXJlIGhpZGRlbiBieSBkZWZhdWx0LCB1bmxlc3MgaXQgaXMgdGhlIGZpcnN0IHZpZXcgb2YgdGhlIHNwbGl0IHZpZXcuXHJcbiAgICAgKiBUaGUgZGVmYXVsdCBoaWRlIG1vZGUgY2FuIGJlIG92ZXJyaWRkZW4uXHJcbiAgICAgKi9cclxuICAgIGRlZmF1bHRIaWRlTW9kZTogYm9vbGVhbjtcclxuICAgIHByb3RlY3RlZCBfc3BsaXRWaWV3Q291bnQ6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBfdmlld3MkOiBCZWhhdmlvclN1YmplY3Q8YW55W10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgdmlldyB0byB0aGUgbGlzdCBvZiB2aWV3cy4gVGhlIHZpZXcgaXMgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgYFNwbGl0Vmlld1N0YXRlYFxyXG4gICAgICogc3RhdGUuIElmIG5vIHN0YXRlIGlzIHByb3ZpZGVkLCB0aGUgc3RhdGUgaXMgY3JlYXRlZCB3aXRoIHRoZSBoaWRkZW4gcHJvcGVydHkuIFRoZSBoaWRkZW5cclxuICAgICAqIHByb3BlcnR5IGlzIHByb3ZpZGVkIGJ5IHRoZSBgZGVmYXVsdEhpZGVNb2RlYCwgdW5sZXNzIGl0J3MgdGhlIGZpcnN0IHZpZXcgKHBvc2l0aW9uOiAwKS5cclxuICAgICAqL1xyXG4gICAgYWRkKHBvc2l0aW9uOiBudW1iZXIsIGluaXRpYWxTdGF0ZT86IFNwbGl0Vmlld1N0YXRlKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHdpdGggdGhlIGFjdGl2ZSB2aWV3IG51bWJlci4gVGhlIGFjdGl2ZSB2aWV3IG51bWJlclxyXG4gICAgICogcmVwcmVzZW50cyB0aGUgbGFzdCB2aXNpYmxlIHZpZXcuXHJcbiAgICAgKi9cclxuICAgIGdldEFjdGl2ZVZpZXcoKTogT2JzZXJ2YWJsZTxudW1iZXI+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgd2l0aCB0aGUgU3BsaXRWaWV3U3RhdGUgZm9yIHRoZSBnaXZlbiB2aWV3IHBvc2l0aW9uLlxyXG4gICAgICovXHJcbiAgICBnZXRWaWV3U3RhdGUocG9zaXRpb246IG51bWJlcik6IE9ic2VydmFibGU8U3BsaXRWaWV3U3RhdGU+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgdmlldyBmcm9tIHRoZSBsaXN0IG9mIHZpZXdzLlxyXG4gICAgICpcclxuICAgICAqIFJlbW92aW5nIGEgdmlldyBpcyBkaWZmZXJlbnQgZnJvbSBoaWRpbmcgYSB2aWV3LiBSZW1vdmluZyBhIHZpZXcgaXMgdHlwaWNhbGx5IGRvbmVcclxuICAgICAqIHdoZW4gYSBjb21wb25lbnQgaXMgZGVzdHJveWVkLlxyXG4gICAgICpcclxuICAgICAqIFdoZW4gdGhlIHZpZXcgaXMgcmVtb3ZlZCwgdGhlIFNwbGl0Vmlld1N0YXRlIGlzIHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGF0IG5ldyBvcmdhbml6YXRpb25cclxuICAgICAqIG9mIHZpZXdzLlxyXG4gICAgICovXHJcbiAgICByZW1vdmUocG9zaXRpb246IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG5leHQgdmlldyBwb3NpdGlvbi4gVGhpcyBpcyB1c2VmdWwgZm9yIHZpZXdzIHRoYXQgZG8gbm90IHdhbnQgdG8gYmUgYm90aGVyZWRcclxuICAgICAqIHdpdGggY29udHJvbGxpbmcgdmlldyBudW1iZXJzLlxyXG4gICAgICovXHJcbiAgICBnZXQgbmV4dFBvc2l0aW9uKCk6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgdmlld3MgYmFzZWQgb24gdGhlIGdpdmVuIHZpZXcgcG9zaXRpb24uIElmIHRoZSB2aWV3XHJcbiAgICAgKiBpcyBhbHJlYWR5IHZpc2libGUsIHdlIGNsb3NlIHRoZSB2aWV3IGFuZCBhY3RpdmUgdGhlIGZvcm1lciB2aWV3LiBVbmxlc3MgdGhlIGhpZGUgZmxhZ1xyXG4gICAgICogaXMgdXNlZCwgdG8gZm9yY2UgdGhlIHZpZXcuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHZpZXcgc3RhdGUgb2Ygb3RoZXIgdmlld3MgaW4gdGhlIHNwbGl0IHZpZXcgYXJlIHVwZGF0ZWQgYXMgd2VsbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHplcm8tYmFzZWQgcG9zaXRpb24gbnVtYmVyIG9mIHRoZSB2aWV3LlxyXG4gICAgICogQHBhcmFtIGZvcmNlSGlkZSBUaGUgKG9wdGlvbmFsKSBoaWRlIHN0YXRlIGZvciB0aGUgdmlldyBwb3NpdGlvbi5cclxuICAgICAqL1xyXG4gICAgdG9nZ2xlKHBvc2l0aW9uOiBudW1iZXIsIGZvcmNlSGlkZT86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZVN0YXRlKHBvc2l0aW9uOiBudW1iZXIsIGhpZGU/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYWN0aXZlIHZpZXcgY291bnQgZm9yIHRoZSBsaXN0IG9mIHZpZXdzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0QWN0aXZlKHZpZXdzOiBTcGxpdFZpZXdTdGF0ZVtdKTogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB2aWV3IGNvdW50IGZvciB0aGUgc3BsaXQgdmlldy5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0cyB0byAyLlxyXG4gICAgICovXHJcbiAgICBzZXQgc3BsaXRWaWV3Q291bnQoY291bnQ6IG51bWJlcik7XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgbWV0aG9kIHRoYXQgcmVzb2x2ZXMgYWxsIHZpZXdzIGZyb20gdGhlIHN1YmplY3QuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXQgdmlld3MoKTogU3BsaXRWaWV3U3RhdGVbXTtcclxufVxyXG4iXX0=