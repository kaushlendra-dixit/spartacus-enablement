import { Image } from '@spartacus/core';
import { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';
import { StorefrontConfig } from '../../../storefront-config';
import { Media, MediaContainer, MediaFormatSize } from './media.model';
/**
 * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so
 * that URLs and sizes are generated for the same media. This helps to improve performance
 * across difference devices and layouts.
 *
 * Media formats are optional, but highly recommended. The format will help the browser to
 * identify the right media for the right experience.
 *
 * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.
 * The baseUrl is read from the `occConfig.backend.media.baseUrl` or
 * `occConfig.backend.occ.baseUrl`.
 */
import * as ɵngcc0 from '@angular/core';
export declare class MediaService {
    protected config: StorefrontConfig;
    /**
     * The BreakpointService is no longer used in version 2.0 as the different size formats are
     * driven by configuration only. There's however a change that this service will play a role
     * in the near future, which is why we keep the constructor as-is.
     */
    protected breakpointService: BreakpointService;
    /**
     * The media formats sorted by size. The media format representing the smallest
     * size is sorted on top.
     */
    private _sortedFormats;
    private _reversedFormats;
    constructor(config: StorefrontConfig, 
    /**
     * The BreakpointService is no longer used in version 2.0 as the different size formats are
     * driven by configuration only. There's however a change that this service will play a role
     * in the near future, which is why we keep the constructor as-is.
     */
    breakpointService: BreakpointService);
    /**
     * Returns a `Media` object with the main media (`src`) and various media (`src`)
     * for specific formats.
     */
    getMedia(mediaContainer: MediaContainer | Image, format?: string, alt?: string): Media;
    /**
     * Creates the media formats in a logical sorted order. The map contains the
     * format key and the format size information. We do this only once for performance
     * benefits.
     */
    protected get sortedFormats(): {
        code: string;
        size: MediaFormatSize;
    }[];
    /**
     * Creates the media formats in a reversed sorted order.
     */
    protected get reversedFormats(): {
        code: string;
        size: MediaFormatSize;
    }[];
    /**
     * Resolves the right media for the given format. The fo
     */
    protected resolveMedia(media: MediaContainer, format?: string): Image;
    /**
     * Validates the format against the given mediaContainer. If there is no format available,
     * or if the mediaContainer doesn't contain a media for the given media, the most optimal
     * format is resolved. If even that is not possible, the first format is returned.
     */
    protected resolveFormat(mediaContainer: MediaContainer, format?: string): string;
    /**
     * Returns the media format code with the best size.
     */
    protected resolveBestFormat(media: MediaContainer | Image): string;
    /**
     * Returns a set of media for the available media formats. Additionally, the congiured media
     * format width is added to the srcset, so that browsers can select the appropriate media.
     */
    protected resolveSrcSet(media: MediaContainer | Image): string;
    /**
     * Resolves the absolute URL for the given url. In most cases, this URL represents
     * the relative URL on the backend. In that case, we prefix the url with the baseUrl.
     */
    protected resolveAbsoluteUrl(url: string): string;
    /**
     * The base URL is either driven by a specific `backend.media.baseUrl`, or by the
     * `backend.occ.baseUrl`.
     *
     * The `backend.media.baseUrl` can be used to load media from a different location.
     *
     * In Commerce Cloud, a differnt location could mean a different "aspect".
     */
    protected getBaseUrl(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MediaService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtZWRpYS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBCcmVha3BvaW50U2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2xheW91dC9icmVha3BvaW50L2JyZWFrcG9pbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JlZnJvbnRDb25maWcgfSBmcm9tICcuLi8uLi8uLi9zdG9yZWZyb250LWNvbmZpZyc7XHJcbmltcG9ydCB7IE1lZGlhLCBNZWRpYUNvbnRhaW5lciwgTWVkaWFGb3JtYXRTaXplIH0gZnJvbSAnLi9tZWRpYS5tb2RlbCc7XHJcbi8qKlxyXG4gKiBTZXJ2aWNlIHdoaWNoIGdlbmVyYXRlcyBtZWRpYSBVUkxzLiBJdCBsZXZlcmFnZSB0aGUgTWVkaWFDb250YWluZXIgYW5kIE1lZGlhRm9ybWF0cyBzb1xyXG4gKiB0aGF0IFVSTHMgYW5kIHNpemVzIGFyZSBnZW5lcmF0ZWQgZm9yIHRoZSBzYW1lIG1lZGlhLiBUaGlzIGhlbHBzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2VcclxuICogYWNyb3NzIGRpZmZlcmVuY2UgZGV2aWNlcyBhbmQgbGF5b3V0cy5cclxuICpcclxuICogTWVkaWEgZm9ybWF0cyBhcmUgb3B0aW9uYWwsIGJ1dCBoaWdobHkgcmVjb21tZW5kZWQuIFRoZSBmb3JtYXQgd2lsbCBoZWxwIHRoZSBicm93c2VyIHRvXHJcbiAqIGlkZW50aWZ5IHRoZSByaWdodCBtZWRpYSBmb3IgdGhlIHJpZ2h0IGV4cGVyaWVuY2UuXHJcbiAqXHJcbiAqIFRoZSBNZWRpYVNlcnZpY2Ugd2lsbCBnZW5lcmF0ZSBhYnNvbHV0ZSBVUkxzIGluIGNhc2UgcmVsYXRpdmUgVVJMcyBhcmUgcHJvdmlkZWQgZm9yIHRoZSBNZWRpYS5cclxuICogVGhlIGJhc2VVcmwgaXMgcmVhZCBmcm9tIHRoZSBgb2NjQ29uZmlnLmJhY2tlbmQubWVkaWEuYmFzZVVybGAgb3JcclxuICogYG9jY0NvbmZpZy5iYWNrZW5kLm9jYy5iYXNlVXJsYC5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1lZGlhU2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBTdG9yZWZyb250Q29uZmlnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgQnJlYWtwb2ludFNlcnZpY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4gdmVyc2lvbiAyLjAgYXMgdGhlIGRpZmZlcmVudCBzaXplIGZvcm1hdHMgYXJlXHJcbiAgICAgKiBkcml2ZW4gYnkgY29uZmlndXJhdGlvbiBvbmx5LiBUaGVyZSdzIGhvd2V2ZXIgYSBjaGFuZ2UgdGhhdCB0aGlzIHNlcnZpY2Ugd2lsbCBwbGF5IGEgcm9sZVxyXG4gICAgICogaW4gdGhlIG5lYXIgZnV0dXJlLCB3aGljaCBpcyB3aHkgd2Uga2VlcCB0aGUgY29uc3RydWN0b3IgYXMtaXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBicmVha3BvaW50U2VydmljZTogQnJlYWtwb2ludFNlcnZpY2U7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZWRpYSBmb3JtYXRzIHNvcnRlZCBieSBzaXplLiBUaGUgbWVkaWEgZm9ybWF0IHJlcHJlc2VudGluZyB0aGUgc21hbGxlc3RcclxuICAgICAqIHNpemUgaXMgc29ydGVkIG9uIHRvcC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfc29ydGVkRm9ybWF0cztcclxuICAgIHByaXZhdGUgX3JldmVyc2VkRm9ybWF0cztcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogU3RvcmVmcm9udENvbmZpZywgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBCcmVha3BvaW50U2VydmljZSBpcyBubyBsb25nZXIgdXNlZCBpbiB2ZXJzaW9uIDIuMCBhcyB0aGUgZGlmZmVyZW50IHNpemUgZm9ybWF0cyBhcmVcclxuICAgICAqIGRyaXZlbiBieSBjb25maWd1cmF0aW9uIG9ubHkuIFRoZXJlJ3MgaG93ZXZlciBhIGNoYW5nZSB0aGF0IHRoaXMgc2VydmljZSB3aWxsIHBsYXkgYSByb2xlXHJcbiAgICAgKiBpbiB0aGUgbmVhciBmdXR1cmUsIHdoaWNoIGlzIHdoeSB3ZSBrZWVwIHRoZSBjb25zdHJ1Y3RvciBhcy1pcy5cclxuICAgICAqL1xyXG4gICAgYnJlYWtwb2ludFNlcnZpY2U6IEJyZWFrcG9pbnRTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGBNZWRpYWAgb2JqZWN0IHdpdGggdGhlIG1haW4gbWVkaWEgKGBzcmNgKSBhbmQgdmFyaW91cyBtZWRpYSAoYHNyY2ApXHJcbiAgICAgKiBmb3Igc3BlY2lmaWMgZm9ybWF0cy5cclxuICAgICAqL1xyXG4gICAgZ2V0TWVkaWEobWVkaWFDb250YWluZXI6IE1lZGlhQ29udGFpbmVyIHwgSW1hZ2UsIGZvcm1hdD86IHN0cmluZywgYWx0Pzogc3RyaW5nKTogTWVkaWE7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIG1lZGlhIGZvcm1hdHMgaW4gYSBsb2dpY2FsIHNvcnRlZCBvcmRlci4gVGhlIG1hcCBjb250YWlucyB0aGVcclxuICAgICAqIGZvcm1hdCBrZXkgYW5kIHRoZSBmb3JtYXQgc2l6ZSBpbmZvcm1hdGlvbi4gV2UgZG8gdGhpcyBvbmx5IG9uY2UgZm9yIHBlcmZvcm1hbmNlXHJcbiAgICAgKiBiZW5lZml0cy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldCBzb3J0ZWRGb3JtYXRzKCk6IHtcclxuICAgICAgICBjb2RlOiBzdHJpbmc7XHJcbiAgICAgICAgc2l6ZTogTWVkaWFGb3JtYXRTaXplO1xyXG4gICAgfVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRoZSBtZWRpYSBmb3JtYXRzIGluIGEgcmV2ZXJzZWQgc29ydGVkIG9yZGVyLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IHJldmVyc2VkRm9ybWF0cygpOiB7XHJcbiAgICAgICAgY29kZTogc3RyaW5nO1xyXG4gICAgICAgIHNpemU6IE1lZGlhRm9ybWF0U2l6ZTtcclxuICAgIH1bXTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZXMgdGhlIHJpZ2h0IG1lZGlhIGZvciB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgZm9cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlc29sdmVNZWRpYShtZWRpYTogTWVkaWFDb250YWluZXIsIGZvcm1hdD86IHN0cmluZyk6IEltYWdlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIGZvcm1hdCBhZ2FpbnN0IHRoZSBnaXZlbiBtZWRpYUNvbnRhaW5lci4gSWYgdGhlcmUgaXMgbm8gZm9ybWF0IGF2YWlsYWJsZSxcclxuICAgICAqIG9yIGlmIHRoZSBtZWRpYUNvbnRhaW5lciBkb2Vzbid0IGNvbnRhaW4gYSBtZWRpYSBmb3IgdGhlIGdpdmVuIG1lZGlhLCB0aGUgbW9zdCBvcHRpbWFsXHJcbiAgICAgKiBmb3JtYXQgaXMgcmVzb2x2ZWQuIElmIGV2ZW4gdGhhdCBpcyBub3QgcG9zc2libGUsIHRoZSBmaXJzdCBmb3JtYXQgaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZXNvbHZlRm9ybWF0KG1lZGlhQ29udGFpbmVyOiBNZWRpYUNvbnRhaW5lciwgZm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBtZWRpYSBmb3JtYXQgY29kZSB3aXRoIHRoZSBiZXN0IHNpemUuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZXNvbHZlQmVzdEZvcm1hdChtZWRpYTogTWVkaWFDb250YWluZXIgfCBJbWFnZSk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHNldCBvZiBtZWRpYSBmb3IgdGhlIGF2YWlsYWJsZSBtZWRpYSBmb3JtYXRzLiBBZGRpdGlvbmFsbHksIHRoZSBjb25naXVyZWQgbWVkaWFcclxuICAgICAqIGZvcm1hdCB3aWR0aCBpcyBhZGRlZCB0byB0aGUgc3Jjc2V0LCBzbyB0aGF0IGJyb3dzZXJzIGNhbiBzZWxlY3QgdGhlIGFwcHJvcHJpYXRlIG1lZGlhLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZVNyY1NldChtZWRpYTogTWVkaWFDb250YWluZXIgfCBJbWFnZSk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZXMgdGhlIGFic29sdXRlIFVSTCBmb3IgdGhlIGdpdmVuIHVybC4gSW4gbW9zdCBjYXNlcywgdGhpcyBVUkwgcmVwcmVzZW50c1xyXG4gICAgICogdGhlIHJlbGF0aXZlIFVSTCBvbiB0aGUgYmFja2VuZC4gSW4gdGhhdCBjYXNlLCB3ZSBwcmVmaXggdGhlIHVybCB3aXRoIHRoZSBiYXNlVXJsLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZUFic29sdXRlVXJsKHVybDogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYmFzZSBVUkwgaXMgZWl0aGVyIGRyaXZlbiBieSBhIHNwZWNpZmljIGBiYWNrZW5kLm1lZGlhLmJhc2VVcmxgLCBvciBieSB0aGVcclxuICAgICAqIGBiYWNrZW5kLm9jYy5iYXNlVXJsYC5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgYGJhY2tlbmQubWVkaWEuYmFzZVVybGAgY2FuIGJlIHVzZWQgdG8gbG9hZCBtZWRpYSBmcm9tIGEgZGlmZmVyZW50IGxvY2F0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEluIENvbW1lcmNlIENsb3VkLCBhIGRpZmZlcm50IGxvY2F0aW9uIGNvdWxkIG1lYW4gYSBkaWZmZXJlbnQgXCJhc3BlY3RcIi5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldEJhc2VVcmwoKTogc3RyaW5nO1xyXG59XHJcbiJdfQ==