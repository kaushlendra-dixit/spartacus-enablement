import { EventEmitter, OnChanges } from '@angular/core';
import { Media, MediaContainer } from './media.model';
import { MediaService } from './media.service';
import * as ɵngcc0 from '@angular/core';
export declare class MediaComponent implements OnChanges {
    protected mediaService: MediaService;
    /**
     * The media container can hold multiple media items, so that
     * a specific media (by format) can be used or multiple media
     * can be provided in a `srcset` so the browser will figure out
     * the best media for the device.
     */
    container: MediaContainer;
    /**
     * if a media format is given, a media for the given format will be rendered
     */
    format: string;
    /**
     * A specific alt text for an image, which overrules the alt text
     * from the container data.
     */
    alt: string;
    /**
     * Once the media is loaded, we emit an event.
     */
    loaded: EventEmitter<Boolean>;
    /**
     * The media contains the info for the UI to create the image. This media
     * object might contain more info once other media types (i.e. video) is supported.
     */
    media: Media;
    /**
     * The `cx-media` component has an `is-initialized` class as long as the
     * media is being initialized.
     */
    isInitialized: boolean;
    /**
     * The `cx-media` component has a `is-loading` class as long as the
     * media is loaded. Wehn the media is loaded, the `is-initialized` class
     * is added.
     */
    isLoading: boolean;
    /**
     * When there's no media provided for the content, or in case an error
     * happened during loading, we add the `is-missing` class. Visual effects
     * can be controlled by CSS.
     */
    isMissing: boolean;
    constructor(mediaService: MediaService);
    ngOnChanges(): void;
    /**
     * Creates the `Media` object
     */
    protected create(): void;
    /**
     * This handler is called from the UI when the image is loaded.
     */
    loadHandler(): void;
    /**
     * Whenever an error happens during load, we mark the component
     * with css classes to have a missing media.
     */
    errorHandler(): void;
    protected handleMissing(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MediaComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MediaComponent, "cx-media", never, { "container": "container"; "format": "format"; "alt": "alt"; }, { "loaded": "loaded"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1lZGlhLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWVkaWEsIE1lZGlhQ29udGFpbmVyIH0gZnJvbSAnLi9tZWRpYS5tb2RlbCc7XHJcbmltcG9ydCB7IE1lZGlhU2VydmljZSB9IGZyb20gJy4vbWVkaWEuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1lZGlhQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICAgIHByb3RlY3RlZCBtZWRpYVNlcnZpY2U6IE1lZGlhU2VydmljZTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lZGlhIGNvbnRhaW5lciBjYW4gaG9sZCBtdWx0aXBsZSBtZWRpYSBpdGVtcywgc28gdGhhdFxyXG4gICAgICogYSBzcGVjaWZpYyBtZWRpYSAoYnkgZm9ybWF0KSBjYW4gYmUgdXNlZCBvciBtdWx0aXBsZSBtZWRpYVxyXG4gICAgICogY2FuIGJlIHByb3ZpZGVkIGluIGEgYHNyY3NldGAgc28gdGhlIGJyb3dzZXIgd2lsbCBmaWd1cmUgb3V0XHJcbiAgICAgKiB0aGUgYmVzdCBtZWRpYSBmb3IgdGhlIGRldmljZS5cclxuICAgICAqL1xyXG4gICAgY29udGFpbmVyOiBNZWRpYUNvbnRhaW5lcjtcclxuICAgIC8qKlxyXG4gICAgICogaWYgYSBtZWRpYSBmb3JtYXQgaXMgZ2l2ZW4sIGEgbWVkaWEgZm9yIHRoZSBnaXZlbiBmb3JtYXQgd2lsbCBiZSByZW5kZXJlZFxyXG4gICAgICovXHJcbiAgICBmb3JtYXQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQSBzcGVjaWZpYyBhbHQgdGV4dCBmb3IgYW4gaW1hZ2UsIHdoaWNoIG92ZXJydWxlcyB0aGUgYWx0IHRleHRcclxuICAgICAqIGZyb20gdGhlIGNvbnRhaW5lciBkYXRhLlxyXG4gICAgICovXHJcbiAgICBhbHQ6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogT25jZSB0aGUgbWVkaWEgaXMgbG9hZGVkLCB3ZSBlbWl0IGFuIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICBsb2FkZWQ6IEV2ZW50RW1pdHRlcjxCb29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lZGlhIGNvbnRhaW5zIHRoZSBpbmZvIGZvciB0aGUgVUkgdG8gY3JlYXRlIHRoZSBpbWFnZS4gVGhpcyBtZWRpYVxyXG4gICAgICogb2JqZWN0IG1pZ2h0IGNvbnRhaW4gbW9yZSBpbmZvIG9uY2Ugb3RoZXIgbWVkaWEgdHlwZXMgKGkuZS4gdmlkZW8pIGlzIHN1cHBvcnRlZC5cclxuICAgICAqL1xyXG4gICAgbWVkaWE6IE1lZGlhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYGN4LW1lZGlhYCBjb21wb25lbnQgaGFzIGFuIGBpcy1pbml0aWFsaXplZGAgY2xhc3MgYXMgbG9uZyBhcyB0aGVcclxuICAgICAqIG1lZGlhIGlzIGJlaW5nIGluaXRpYWxpemVkLlxyXG4gICAgICovXHJcbiAgICBpc0luaXRpYWxpemVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYGN4LW1lZGlhYCBjb21wb25lbnQgaGFzIGEgYGlzLWxvYWRpbmdgIGNsYXNzIGFzIGxvbmcgYXMgdGhlXHJcbiAgICAgKiBtZWRpYSBpcyBsb2FkZWQuIFdlaG4gdGhlIG1lZGlhIGlzIGxvYWRlZCwgdGhlIGBpcy1pbml0aWFsaXplZGAgY2xhc3NcclxuICAgICAqIGlzIGFkZGVkLlxyXG4gICAgICovXHJcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlcmUncyBubyBtZWRpYSBwcm92aWRlZCBmb3IgdGhlIGNvbnRlbnQsIG9yIGluIGNhc2UgYW4gZXJyb3JcclxuICAgICAqIGhhcHBlbmVkIGR1cmluZyBsb2FkaW5nLCB3ZSBhZGQgdGhlIGBpcy1taXNzaW5nYCBjbGFzcy4gVmlzdWFsIGVmZmVjdHNcclxuICAgICAqIGNhbiBiZSBjb250cm9sbGVkIGJ5IENTUy5cclxuICAgICAqL1xyXG4gICAgaXNNaXNzaW5nOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3IobWVkaWFTZXJ2aWNlOiBNZWRpYVNlcnZpY2UpO1xyXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgYE1lZGlhYCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGNyZWF0ZSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGhhbmRsZXIgaXMgY2FsbGVkIGZyb20gdGhlIFVJIHdoZW4gdGhlIGltYWdlIGlzIGxvYWRlZC5cclxuICAgICAqL1xyXG4gICAgbG9hZEhhbmRsZXIoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogV2hlbmV2ZXIgYW4gZXJyb3IgaGFwcGVucyBkdXJpbmcgbG9hZCwgd2UgbWFyayB0aGUgY29tcG9uZW50XHJcbiAgICAgKiB3aXRoIGNzcyBjbGFzc2VzIHRvIGhhdmUgYSBtaXNzaW5nIG1lZGlhLlxyXG4gICAgICovXHJcbiAgICBlcnJvckhhbmRsZXIoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBoYW5kbGVNaXNzaW5nKCk6IHZvaWQ7XHJcbn1cclxuIl19