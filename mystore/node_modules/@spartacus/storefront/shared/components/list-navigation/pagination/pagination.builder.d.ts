import { PaginationConfig } from './config/pagination.config';
import { PaginationItem } from './pagination.model';
/**
 * Builds a pagination structures based on a pageCount and current page number.
 * There are various {@link PaginationConfig} options which can be used to configure
 * the behaviour of the build. Alternatively, CSS can be used to further customise
 * the pagination.
 *
 * Examples:
 * The full blown pagination items contain the follow elements:
 *
 * `« ‹ 1 ... 4 (5) 6 ... 9 › »`
 *
 * This includes pagination items to the following pages:
 * - start page
 * - previous page
 * - first page
 * - page range
 * - last page
 * - next page
 * - end page
 *
 * All of those links are configurable, including the size of the page range.
 * The current page will always be centered in the page range to provide direct access
 * to the previous and next page.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PaginationBuilder {
    protected paginationConfig: PaginationConfig;
    constructor(paginationConfig: PaginationConfig);
    /**
     * Builds a list of `PaginationItem`. The give pageCount and current are used
     * to build out the full pagination. There are various {@link PaginationConfig} options
     * which can be used to configure the behaviour of the build. Alternatively, CSS
     * can be used to further specialize visibility of the pagination.
     *
     * @param pageCount The total number of pages
     * @param current The current page number, 0-index based
     * @returns An array of `PaginationItem`
     */
    paginate(pageCount: number, current: number): PaginationItem[];
    /**
     * Returns the current page with surrounding pages (based on the `config.rangeCount`).
     * The current page is always centered to provide direct access to the previous and next page.
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     * @param current The current page number, 0-index based
     */
    protected addPages(pages: PaginationItem[], pageCount: number, current: number): void;
    /**
     * Adds dots before and after the given pages, if configured (defaults to true).
     * If the dots only represent a single page, the page number is added instead of
     * the dots, unless the configuration requires dots always.
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     */
    protected addDots(pages: PaginationItem[], pageCount: number): void;
    /**
     * Add links to the first and last page, if configured to do so.
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     *
     */
    protected addFirstLast(pages: PaginationItem[], pageCount: number): void;
    /**
     * Add links to the start, previous, next and last page, if configured to do so.
     * The order of the links can be configured by using the {@link PaginationConfig},
     * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).
     * The `PaginationNavigationPosition` allows for 3 flavours:
     *
     * - by default the pagination starts with start and previous and ends with the next and end links
     * - BEFORE – all navigation links are added in the front of the pagination list
     * - AFTER – all navigation links are pushed to the end of the pagination list
     *
     * @param pages The list of page items that is used to amend
     * @param pageCount The total number of pages
     * @param current The current page number, 0-index based
     *
     */
    protected addNavigation(pages: PaginationItem[], pageCount: number, current: number): void;
    /**
     * Returns the start and previous links, if applicable.
     */
    private getBeforeLinks;
    /**
     * Returns the next and end links, if applicable.
     */
    private getAfter;
    /**
     * Resolves the first page of the range we need to build.
     * This is the page that is leading up to the range of the
     * current page.
     *
     * @param pageCount The total number of pages.
     * @param current The current page number, 0-index based.
     */
    private getStartOfRange;
    private get config();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaginationBuilder, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5idWlsZGVyLmQudHMiLCJzb3VyY2VzIjpbInBhZ2luYXRpb24uYnVpbGRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2luYXRpb25Db25maWcgfSBmcm9tICcuL2NvbmZpZy9wYWdpbmF0aW9uLmNvbmZpZyc7XHJcbmltcG9ydCB7IFBhZ2luYXRpb25JdGVtIH0gZnJvbSAnLi9wYWdpbmF0aW9uLm1vZGVsJztcclxuLyoqXHJcbiAqIEJ1aWxkcyBhIHBhZ2luYXRpb24gc3RydWN0dXJlcyBiYXNlZCBvbiBhIHBhZ2VDb3VudCBhbmQgY3VycmVudCBwYWdlIG51bWJlci5cclxuICogVGhlcmUgYXJlIHZhcmlvdXMge0BsaW5rIFBhZ2luYXRpb25Db25maWd9IG9wdGlvbnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlXHJcbiAqIHRoZSBiZWhhdmlvdXIgb2YgdGhlIGJ1aWxkLiBBbHRlcm5hdGl2ZWx5LCBDU1MgY2FuIGJlIHVzZWQgdG8gZnVydGhlciBjdXN0b21pc2VcclxuICogdGhlIHBhZ2luYXRpb24uXHJcbiAqXHJcbiAqIEV4YW1wbGVzOlxyXG4gKiBUaGUgZnVsbCBibG93biBwYWdpbmF0aW9uIGl0ZW1zIGNvbnRhaW4gdGhlIGZvbGxvdyBlbGVtZW50czpcclxuICpcclxuICogYMKrIOKAuSAxIC4uLiA0ICg1KSA2IC4uLiA5IOKAuiDCu2BcclxuICpcclxuICogVGhpcyBpbmNsdWRlcyBwYWdpbmF0aW9uIGl0ZW1zIHRvIHRoZSBmb2xsb3dpbmcgcGFnZXM6XHJcbiAqIC0gc3RhcnQgcGFnZVxyXG4gKiAtIHByZXZpb3VzIHBhZ2VcclxuICogLSBmaXJzdCBwYWdlXHJcbiAqIC0gcGFnZSByYW5nZVxyXG4gKiAtIGxhc3QgcGFnZVxyXG4gKiAtIG5leHQgcGFnZVxyXG4gKiAtIGVuZCBwYWdlXHJcbiAqXHJcbiAqIEFsbCBvZiB0aG9zZSBsaW5rcyBhcmUgY29uZmlndXJhYmxlLCBpbmNsdWRpbmcgdGhlIHNpemUgb2YgdGhlIHBhZ2UgcmFuZ2UuXHJcbiAqIFRoZSBjdXJyZW50IHBhZ2Ugd2lsbCBhbHdheXMgYmUgY2VudGVyZWQgaW4gdGhlIHBhZ2UgcmFuZ2UgdG8gcHJvdmlkZSBkaXJlY3QgYWNjZXNzXHJcbiAqIHRvIHRoZSBwcmV2aW91cyBhbmQgbmV4dCBwYWdlLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGFnaW5hdGlvbkJ1aWxkZXIge1xyXG4gICAgcHJvdGVjdGVkIHBhZ2luYXRpb25Db25maWc6IFBhZ2luYXRpb25Db25maWc7XHJcbiAgICBjb25zdHJ1Y3RvcihwYWdpbmF0aW9uQ29uZmlnOiBQYWdpbmF0aW9uQ29uZmlnKTtcclxuICAgIC8qKlxyXG4gICAgICogQnVpbGRzIGEgbGlzdCBvZiBgUGFnaW5hdGlvbkl0ZW1gLiBUaGUgZ2l2ZSBwYWdlQ291bnQgYW5kIGN1cnJlbnQgYXJlIHVzZWRcclxuICAgICAqIHRvIGJ1aWxkIG91dCB0aGUgZnVsbCBwYWdpbmF0aW9uLiBUaGVyZSBhcmUgdmFyaW91cyB7QGxpbmsgUGFnaW5hdGlvbkNvbmZpZ30gb3B0aW9uc1xyXG4gICAgICogd2hpY2ggY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBiZWhhdmlvdXIgb2YgdGhlIGJ1aWxkLiBBbHRlcm5hdGl2ZWx5LCBDU1NcclxuICAgICAqIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgc3BlY2lhbGl6ZSB2aXNpYmlsaXR5IG9mIHRoZSBwYWdpbmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYWdlQ291bnQgVGhlIHRvdGFsIG51bWJlciBvZiBwYWdlc1xyXG4gICAgICogQHBhcmFtIGN1cnJlbnQgVGhlIGN1cnJlbnQgcGFnZSBudW1iZXIsIDAtaW5kZXggYmFzZWRcclxuICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGBQYWdpbmF0aW9uSXRlbWBcclxuICAgICAqL1xyXG4gICAgcGFnaW5hdGUocGFnZUNvdW50OiBudW1iZXIsIGN1cnJlbnQ6IG51bWJlcik6IFBhZ2luYXRpb25JdGVtW107XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgcGFnZSB3aXRoIHN1cnJvdW5kaW5nIHBhZ2VzIChiYXNlZCBvbiB0aGUgYGNvbmZpZy5yYW5nZUNvdW50YCkuXHJcbiAgICAgKiBUaGUgY3VycmVudCBwYWdlIGlzIGFsd2F5cyBjZW50ZXJlZCB0byBwcm92aWRlIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIHByZXZpb3VzIGFuZCBuZXh0IHBhZ2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhZ2VzIFRoZSBsaXN0IG9mIHBhZ2UgaXRlbXMgdGhhdCBpcyB1c2VkIHRvIGFtZW5kXHJcbiAgICAgKiBAcGFyYW0gcGFnZUNvdW50IFRoZSB0b3RhbCBudW1iZXIgb2YgcGFnZXNcclxuICAgICAqIEBwYXJhbSBjdXJyZW50IFRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyLCAwLWluZGV4IGJhc2VkXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhZGRQYWdlcyhwYWdlczogUGFnaW5hdGlvbkl0ZW1bXSwgcGFnZUNvdW50OiBudW1iZXIsIGN1cnJlbnQ6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgZG90cyBiZWZvcmUgYW5kIGFmdGVyIHRoZSBnaXZlbiBwYWdlcywgaWYgY29uZmlndXJlZCAoZGVmYXVsdHMgdG8gdHJ1ZSkuXHJcbiAgICAgKiBJZiB0aGUgZG90cyBvbmx5IHJlcHJlc2VudCBhIHNpbmdsZSBwYWdlLCB0aGUgcGFnZSBudW1iZXIgaXMgYWRkZWQgaW5zdGVhZCBvZlxyXG4gICAgICogdGhlIGRvdHMsIHVubGVzcyB0aGUgY29uZmlndXJhdGlvbiByZXF1aXJlcyBkb3RzIGFsd2F5cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFnZXMgVGhlIGxpc3Qgb2YgcGFnZSBpdGVtcyB0aGF0IGlzIHVzZWQgdG8gYW1lbmRcclxuICAgICAqIEBwYXJhbSBwYWdlQ291bnQgVGhlIHRvdGFsIG51bWJlciBvZiBwYWdlc1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYWRkRG90cyhwYWdlczogUGFnaW5hdGlvbkl0ZW1bXSwgcGFnZUNvdW50OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgbGlua3MgdG8gdGhlIGZpcnN0IGFuZCBsYXN0IHBhZ2UsIGlmIGNvbmZpZ3VyZWQgdG8gZG8gc28uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhZ2VzIFRoZSBsaXN0IG9mIHBhZ2UgaXRlbXMgdGhhdCBpcyB1c2VkIHRvIGFtZW5kXHJcbiAgICAgKiBAcGFyYW0gcGFnZUNvdW50IFRoZSB0b3RhbCBudW1iZXIgb2YgcGFnZXNcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhZGRGaXJzdExhc3QocGFnZXM6IFBhZ2luYXRpb25JdGVtW10sIHBhZ2VDb3VudDogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGxpbmtzIHRvIHRoZSBzdGFydCwgcHJldmlvdXMsIG5leHQgYW5kIGxhc3QgcGFnZSwgaWYgY29uZmlndXJlZCB0byBkbyBzby5cclxuICAgICAqIFRoZSBvcmRlciBvZiB0aGUgbGlua3MgY2FuIGJlIGNvbmZpZ3VyZWQgYnkgdXNpbmcgdGhlIHtAbGluayBQYWdpbmF0aW9uQ29uZmlnfSxcclxuICAgICAqIHVzaW5nIHRoZSBgUGFnaW5hdGlvbk5hdmlnYXRpb25Qb3NpdGlvbmAgKGBCRUZPUkVgIG9yIGBBRlRFUmApLlxyXG4gICAgICogVGhlIGBQYWdpbmF0aW9uTmF2aWdhdGlvblBvc2l0aW9uYCBhbGxvd3MgZm9yIDMgZmxhdm91cnM6XHJcbiAgICAgKlxyXG4gICAgICogLSBieSBkZWZhdWx0IHRoZSBwYWdpbmF0aW9uIHN0YXJ0cyB3aXRoIHN0YXJ0IGFuZCBwcmV2aW91cyBhbmQgZW5kcyB3aXRoIHRoZSBuZXh0IGFuZCBlbmQgbGlua3NcclxuICAgICAqIC0gQkVGT1JFIOKAk8KgYWxsIG5hdmlnYXRpb24gbGlua3MgYXJlIGFkZGVkIGluIHRoZSBmcm9udCBvZiB0aGUgcGFnaW5hdGlvbiBsaXN0XHJcbiAgICAgKiAtIEFGVEVSIOKAk8KgYWxsIG5hdmlnYXRpb24gbGlua3MgYXJlIHB1c2hlZCB0byB0aGUgZW5kIG9mIHRoZSBwYWdpbmF0aW9uIGxpc3RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFnZXMgVGhlIGxpc3Qgb2YgcGFnZSBpdGVtcyB0aGF0IGlzIHVzZWQgdG8gYW1lbmRcclxuICAgICAqIEBwYXJhbSBwYWdlQ291bnQgVGhlIHRvdGFsIG51bWJlciBvZiBwYWdlc1xyXG4gICAgICogQHBhcmFtIGN1cnJlbnQgVGhlIGN1cnJlbnQgcGFnZSBudW1iZXIsIDAtaW5kZXggYmFzZWRcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhZGROYXZpZ2F0aW9uKHBhZ2VzOiBQYWdpbmF0aW9uSXRlbVtdLCBwYWdlQ291bnQ6IG51bWJlciwgY3VycmVudDogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgc3RhcnQgYW5kIHByZXZpb3VzIGxpbmtzLCBpZiBhcHBsaWNhYmxlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEJlZm9yZUxpbmtzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IGFuZCBlbmQgbGlua3MsIGlmIGFwcGxpY2FibGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QWZ0ZXI7XHJcbiAgICAvKipcclxuICAgICAqIFJlc29sdmVzIHRoZSBmaXJzdCBwYWdlIG9mIHRoZSByYW5nZSB3ZSBuZWVkIHRvIGJ1aWxkLlxyXG4gICAgICogVGhpcyBpcyB0aGUgcGFnZSB0aGF0IGlzIGxlYWRpbmcgdXAgdG8gdGhlIHJhbmdlIG9mIHRoZVxyXG4gICAgICogY3VycmVudCBwYWdlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYWdlQ291bnQgVGhlIHRvdGFsIG51bWJlciBvZiBwYWdlcy5cclxuICAgICAqIEBwYXJhbSBjdXJyZW50IFRoZSBjdXJyZW50IHBhZ2UgbnVtYmVyLCAwLWluZGV4IGJhc2VkLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFN0YXJ0T2ZSYW5nZTtcclxuICAgIHByaXZhdGUgZ2V0IGNvbmZpZygpO1xyXG59XHJcbiJdfQ==