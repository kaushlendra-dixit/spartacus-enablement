import { ElementRef, OnInit, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
import { CarouselService } from './carousel.service';
/**
 * Generic carousel component that can be used to render any carousel items,
 * such as products, images, banners, or any component. Carousel items are
 * rendered in so-called carousel slides, and the previous/next buttons as well as
 * the indicator-buttons can used to navigate the slides.
 *
 * The component uses an array of Observables (`items$`) as an input, to allow
 * for lazy loading of items.
 *
 * The number of items per slide is calculated with the `itemWidth`, which can given
 * in pixels or percentage.
 *
 * To allow for flexible rendering of items, the rendering is delegated to the
 * given `template`. This allows for maximum flexibility.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CarouselComponent implements OnInit {
    protected el: ElementRef;
    protected service: CarouselService;
    /**
     * The title is rendered as the carousel heading.
     */
    title: string;
    /**
     * The items$ represent the carousel items. The items$ are
     * observables so that the items can be loaded on demand.
     */
    items: Observable<any>[];
    set setItems(inputItems: Observable<any>[]);
    /**
     * The template is rendered for each item, so that the actual
     * view can be given by the compoent that uses the `CarouselComponent`.
     */
    template: TemplateRef<any>;
    /**
     * Specifies the minimum size of the carousel item, either in px or %.
     * This value is used for the calculation of numbers per carousel, so that
     * the number of carousel items is dynamic. The calculation uses the `itemWidth`
     * and the host element `clientWidth`, so that the carousel is reusable in
     * different layouts (for example in a 50% grid).
     */
    itemWidth: string;
    /**
     * Indicates whether the visual indicators are used.
     */
    hideIndicators: boolean;
    indicatorIcon: ICON_TYPE;
    previousIcon: ICON_TYPE;
    nextIcon: ICON_TYPE;
    activeSlide: number;
    size$: Observable<number>;
    constructor(el: ElementRef, service: CarouselService);
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CarouselComponent, "cx-carousel", never, { "itemWidth": "itemWidth"; "hideIndicators": "hideIndicators"; "indicatorIcon": "indicatorIcon"; "previousIcon": "previousIcon"; "nextIcon": "nextIcon"; "setItems": "items"; "title": "title"; "template": "template"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhcm91c2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XHJcbmltcG9ydCB7IENhcm91c2VsU2VydmljZSB9IGZyb20gJy4vY2Fyb3VzZWwuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBHZW5lcmljIGNhcm91c2VsIGNvbXBvbmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlbmRlciBhbnkgY2Fyb3VzZWwgaXRlbXMsXHJcbiAqIHN1Y2ggYXMgcHJvZHVjdHMsIGltYWdlcywgYmFubmVycywgb3IgYW55IGNvbXBvbmVudC4gQ2Fyb3VzZWwgaXRlbXMgYXJlXHJcbiAqIHJlbmRlcmVkIGluIHNvLWNhbGxlZCBjYXJvdXNlbCBzbGlkZXMsIGFuZCB0aGUgcHJldmlvdXMvbmV4dCBidXR0b25zIGFzIHdlbGwgYXNcclxuICogdGhlIGluZGljYXRvci1idXR0b25zIGNhbiB1c2VkIHRvIG5hdmlnYXRlIHRoZSBzbGlkZXMuXHJcbiAqXHJcbiAqIFRoZSBjb21wb25lbnQgdXNlcyBhbiBhcnJheSBvZiBPYnNlcnZhYmxlcyAoYGl0ZW1zJGApIGFzIGFuIGlucHV0LCB0byBhbGxvd1xyXG4gKiBmb3IgbGF6eSBsb2FkaW5nIG9mIGl0ZW1zLlxyXG4gKlxyXG4gKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIHBlciBzbGlkZSBpcyBjYWxjdWxhdGVkIHdpdGggdGhlIGBpdGVtV2lkdGhgLCB3aGljaCBjYW4gZ2l2ZW5cclxuICogaW4gcGl4ZWxzIG9yIHBlcmNlbnRhZ2UuXHJcbiAqXHJcbiAqIFRvIGFsbG93IGZvciBmbGV4aWJsZSByZW5kZXJpbmcgb2YgaXRlbXMsIHRoZSByZW5kZXJpbmcgaXMgZGVsZWdhdGVkIHRvIHRoZVxyXG4gKiBnaXZlbiBgdGVtcGxhdGVgLiBUaGlzIGFsbG93cyBmb3IgbWF4aW11bSBmbGV4aWJpbGl0eS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcm91c2VsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHByb3RlY3RlZCBlbDogRWxlbWVudFJlZjtcclxuICAgIHByb3RlY3RlZCBzZXJ2aWNlOiBDYXJvdXNlbFNlcnZpY2U7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0aXRsZSBpcyByZW5kZXJlZCBhcyB0aGUgY2Fyb3VzZWwgaGVhZGluZy5cclxuICAgICAqL1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGl0ZW1zJCByZXByZXNlbnQgdGhlIGNhcm91c2VsIGl0ZW1zLiBUaGUgaXRlbXMkIGFyZVxyXG4gICAgICogb2JzZXJ2YWJsZXMgc28gdGhhdCB0aGUgaXRlbXMgY2FuIGJlIGxvYWRlZCBvbiBkZW1hbmQuXHJcbiAgICAgKi9cclxuICAgIGl0ZW1zOiBPYnNlcnZhYmxlPGFueT5bXTtcclxuICAgIHNldCBzZXRJdGVtcyhpbnB1dEl0ZW1zOiBPYnNlcnZhYmxlPGFueT5bXSk7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0ZW1wbGF0ZSBpcyByZW5kZXJlZCBmb3IgZWFjaCBpdGVtLCBzbyB0aGF0IHRoZSBhY3R1YWxcclxuICAgICAqIHZpZXcgY2FuIGJlIGdpdmVuIGJ5IHRoZSBjb21wb2VudCB0aGF0IHVzZXMgdGhlIGBDYXJvdXNlbENvbXBvbmVudGAuXHJcbiAgICAgKi9cclxuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG1pbmltdW0gc2l6ZSBvZiB0aGUgY2Fyb3VzZWwgaXRlbSwgZWl0aGVyIGluIHB4IG9yICUuXHJcbiAgICAgKiBUaGlzIHZhbHVlIGlzIHVzZWQgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiBudW1iZXJzIHBlciBjYXJvdXNlbCwgc28gdGhhdFxyXG4gICAgICogdGhlIG51bWJlciBvZiBjYXJvdXNlbCBpdGVtcyBpcyBkeW5hbWljLiBUaGUgY2FsY3VsYXRpb24gdXNlcyB0aGUgYGl0ZW1XaWR0aGBcclxuICAgICAqIGFuZCB0aGUgaG9zdCBlbGVtZW50IGBjbGllbnRXaWR0aGAsIHNvIHRoYXQgdGhlIGNhcm91c2VsIGlzIHJldXNhYmxlIGluXHJcbiAgICAgKiBkaWZmZXJlbnQgbGF5b3V0cyAoZm9yIGV4YW1wbGUgaW4gYSA1MCUgZ3JpZCkuXHJcbiAgICAgKi9cclxuICAgIGl0ZW1XaWR0aDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdmlzdWFsIGluZGljYXRvcnMgYXJlIHVzZWQuXHJcbiAgICAgKi9cclxuICAgIGhpZGVJbmRpY2F0b3JzOiBib29sZWFuO1xyXG4gICAgaW5kaWNhdG9ySWNvbjogSUNPTl9UWVBFO1xyXG4gICAgcHJldmlvdXNJY29uOiBJQ09OX1RZUEU7XHJcbiAgICBuZXh0SWNvbjogSUNPTl9UWVBFO1xyXG4gICAgYWN0aXZlU2xpZGU6IG51bWJlcjtcclxuICAgIHNpemUkOiBPYnNlcnZhYmxlPG51bWJlcj47XHJcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgc2VydmljZTogQ2Fyb3VzZWxTZXJ2aWNlKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbn1cclxuIl19