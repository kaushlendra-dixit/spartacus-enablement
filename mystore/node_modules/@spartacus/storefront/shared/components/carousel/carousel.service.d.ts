import { WindowRef } from '@spartacus/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class CarouselService {
    private winRef;
    constructor(winRef: WindowRef);
    /**
     * The number of items per slide is calculated by the help of
     * the item width and the available width of the host element.
     * This appoach makes it possible to place the carousel in different
     * layouts. Instead of using the page breakpoints, the host size is
     * taken into account.
     *
     * Since there's no element resize API available, we use the
     * window `resize` event, so that we can adjust the number of items
     * whenever the window got resized.
     */
    getItemsPerSlide(nativeElement: HTMLElement, itemWidth: string): Observable<number>;
    /**
     * Calculates the number of items per given hostSize.  calculated based on the given
     * intended size in pixels or percentages. The
     *
     * @param availableWidth The available width in pixels for the carousel items.
     * @param itemWidth The width per carousel item, in px or percentage.
     */
    private calculateItems;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJjYXJvdXNlbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYXJvdXNlbFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSB3aW5SZWY7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aW5SZWY6IFdpbmRvd1JlZik7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgaXRlbXMgcGVyIHNsaWRlIGlzIGNhbGN1bGF0ZWQgYnkgdGhlIGhlbHAgb2ZcclxuICAgICAqIHRoZSBpdGVtIHdpZHRoIGFuZCB0aGUgYXZhaWxhYmxlIHdpZHRoIG9mIHRoZSBob3N0IGVsZW1lbnQuXHJcbiAgICAgKiBUaGlzIGFwcG9hY2ggbWFrZXMgaXQgcG9zc2libGUgdG8gcGxhY2UgdGhlIGNhcm91c2VsIGluIGRpZmZlcmVudFxyXG4gICAgICogbGF5b3V0cy4gSW5zdGVhZCBvZiB1c2luZyB0aGUgcGFnZSBicmVha3BvaW50cywgdGhlIGhvc3Qgc2l6ZSBpc1xyXG4gICAgICogdGFrZW4gaW50byBhY2NvdW50LlxyXG4gICAgICpcclxuICAgICAqIFNpbmNlIHRoZXJlJ3Mgbm8gZWxlbWVudCByZXNpemUgQVBJIGF2YWlsYWJsZSwgd2UgdXNlIHRoZVxyXG4gICAgICogd2luZG93IGByZXNpemVgIGV2ZW50LCBzbyB0aGF0IHdlIGNhbiBhZGp1c3QgdGhlIG51bWJlciBvZiBpdGVtc1xyXG4gICAgICogd2hlbmV2ZXIgdGhlIHdpbmRvdyBnb3QgcmVzaXplZC5cclxuICAgICAqL1xyXG4gICAgZ2V0SXRlbXNQZXJTbGlkZShuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudCwgaXRlbVdpZHRoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPG51bWJlcj47XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIG51bWJlciBvZiBpdGVtcyBwZXIgZ2l2ZW4gaG9zdFNpemUuICBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBnaXZlblxyXG4gICAgICogaW50ZW5kZWQgc2l6ZSBpbiBwaXhlbHMgb3IgcGVyY2VudGFnZXMuIFRoZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhdmFpbGFibGVXaWR0aCBUaGUgYXZhaWxhYmxlIHdpZHRoIGluIHBpeGVscyBmb3IgdGhlIGNhcm91c2VsIGl0ZW1zLlxyXG4gICAgICogQHBhcmFtIGl0ZW1XaWR0aCBUaGUgd2lkdGggcGVyIGNhcm91c2VsIGl0ZW0sIGluIHB4IG9yIHBlcmNlbnRhZ2UuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlSXRlbXM7XHJcbn1cclxuIl19