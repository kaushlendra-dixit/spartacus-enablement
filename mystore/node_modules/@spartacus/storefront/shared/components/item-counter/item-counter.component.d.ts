import { OnDestroy, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
/**
 * Provides a UI to manage the count of the quantity, typically by using
 * increase and decrease functionality. The item counter expects an input `FormControl`
 * so that the state of the control can be managed outside of this component.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ItemCounterComponent implements OnInit, OnDestroy {
    /**
     * Holds the value of the counter, the state of the `FormControl`
     * can be managed outside of the item counter.
     */
    control: FormControl;
    /**
     * This can be used in case an item has a minmum order quantity.
     * @default 1
     */
    min: number;
    /**
     * This can be used in case an item has a maximum order quantity.
     */
    max: number;
    /**
     * The step is used to increment the count. It is supposed to be a
     * positive integer or float.
     * @default 1
     */
    step: number;
    /**
     * Indicates that the input can be manually set to zero,
     * despite the fact that the input controls will be limited to
     * the minimum. The zero value can be used to remove an item.
     */
    allowZero: boolean;
    /**
     * In readonly mode the item counter will only be shown as a label,
     * the form controls are not rendered.
     * Please not that readonly is different from the `disabled` form state.
     * @default false
     */
    readonly: boolean;
    private input;
    /**
     * Subscription responsible for auto-correcting control's value when it's invalid.
     */
    private sub;
    handleClick(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    increment(): void;
    decrement(): void;
    /**
     * Validate that the given value is in between
     * the `min` and `max` value. If the value is out
     * of  the min/max range, it will be altered.
     * If `allowZero` is set to true, the 0 value is ignored.
     *
     */
    private getValidCount;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ItemCounterComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ItemCounterComponent, "cx-item-counter", never, { "min": "min"; "step": "step"; "allowZero": "allowZero"; "readonly": "readonly"; "control": "control"; "max": "max"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1jb3VudGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJpdGVtLWNvdW50ZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBhIFVJIHRvIG1hbmFnZSB0aGUgY291bnQgb2YgdGhlIHF1YW50aXR5LCB0eXBpY2FsbHkgYnkgdXNpbmdcclxuICogaW5jcmVhc2UgYW5kIGRlY3JlYXNlIGZ1bmN0aW9uYWxpdHkuIFRoZSBpdGVtIGNvdW50ZXIgZXhwZWN0cyBhbiBpbnB1dCBgRm9ybUNvbnRyb2xgXHJcbiAqIHNvIHRoYXQgdGhlIHN0YXRlIG9mIHRoZSBjb250cm9sIGNhbiBiZSBtYW5hZ2VkIG91dHNpZGUgb2YgdGhpcyBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJdGVtQ291bnRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgdGhlIHZhbHVlIG9mIHRoZSBjb3VudGVyLCB0aGUgc3RhdGUgb2YgdGhlIGBGb3JtQ29udHJvbGBcclxuICAgICAqIGNhbiBiZSBtYW5hZ2VkIG91dHNpZGUgb2YgdGhlIGl0ZW0gY291bnRlci5cclxuICAgICAqL1xyXG4gICAgY29udHJvbDogRm9ybUNvbnRyb2w7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgaW4gY2FzZSBhbiBpdGVtIGhhcyBhIG1pbm11bSBvcmRlciBxdWFudGl0eS5cclxuICAgICAqIEBkZWZhdWx0IDFcclxuICAgICAqL1xyXG4gICAgbWluOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgaW4gY2FzZSBhbiBpdGVtIGhhcyBhIG1heGltdW0gb3JkZXIgcXVhbnRpdHkuXHJcbiAgICAgKi9cclxuICAgIG1heDogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RlcCBpcyB1c2VkIHRvIGluY3JlbWVudCB0aGUgY291bnQuIEl0IGlzIHN1cHBvc2VkIHRvIGJlIGFcclxuICAgICAqIHBvc2l0aXZlIGludGVnZXIgb3IgZmxvYXQuXHJcbiAgICAgKiBAZGVmYXVsdCAxXHJcbiAgICAgKi9cclxuICAgIHN0ZXA6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGlucHV0IGNhbiBiZSBtYW51YWxseSBzZXQgdG8gemVybyxcclxuICAgICAqIGRlc3BpdGUgdGhlIGZhY3QgdGhhdCB0aGUgaW5wdXQgY29udHJvbHMgd2lsbCBiZSBsaW1pdGVkIHRvXHJcbiAgICAgKiB0aGUgbWluaW11bS4gVGhlIHplcm8gdmFsdWUgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGFuIGl0ZW0uXHJcbiAgICAgKi9cclxuICAgIGFsbG93WmVybzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogSW4gcmVhZG9ubHkgbW9kZSB0aGUgaXRlbSBjb3VudGVyIHdpbGwgb25seSBiZSBzaG93biBhcyBhIGxhYmVsLFxyXG4gICAgICogdGhlIGZvcm0gY29udHJvbHMgYXJlIG5vdCByZW5kZXJlZC5cclxuICAgICAqIFBsZWFzZSBub3QgdGhhdCByZWFkb25seSBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYGRpc2FibGVkYCBmb3JtIHN0YXRlLlxyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIGlucHV0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpcHRpb24gcmVzcG9uc2libGUgZm9yIGF1dG8tY29ycmVjdGluZyBjb250cm9sJ3MgdmFsdWUgd2hlbiBpdCdzIGludmFsaWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3ViO1xyXG4gICAgaGFuZGxlQ2xpY2soKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgaW5jcmVtZW50KCk6IHZvaWQ7XHJcbiAgICBkZWNyZW1lbnQoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGUgdGhhdCB0aGUgZ2l2ZW4gdmFsdWUgaXMgaW4gYmV0d2VlblxyXG4gICAgICogdGhlIGBtaW5gIGFuZCBgbWF4YCB2YWx1ZS4gSWYgdGhlIHZhbHVlIGlzIG91dFxyXG4gICAgICogb2YgIHRoZSBtaW4vbWF4IHJhbmdlLCBpdCB3aWxsIGJlIGFsdGVyZWQuXHJcbiAgICAgKiBJZiBgYWxsb3daZXJvYCBpcyBzZXQgdG8gdHJ1ZSwgdGhlIDAgdmFsdWUgaXMgaWdub3JlZC5cclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0VmFsaWRDb3VudDtcclxufVxyXG4iXX0=