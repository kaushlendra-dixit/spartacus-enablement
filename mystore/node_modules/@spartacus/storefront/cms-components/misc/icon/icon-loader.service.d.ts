import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { WindowRef } from '@spartacus/core';
import { DirectionMode } from '../../../layout/direction/config/direction.model';
import { IconConfig, ICON_TYPE } from './icon.model';
import * as ɵngcc0 from '@angular/core';
export declare class IconLoaderService {
    protected winRef: WindowRef;
    protected iconConfig: IconConfig;
    protected sanitizer: DomSanitizer;
    private loadedResources;
    constructor(winRef: WindowRef, iconConfig: IconConfig, sanitizer: DomSanitizer);
    /**
     * Returns an html fragment which can be added to the DOM in a safe way.
     */
    getHtml(type: ICON_TYPE | string): SafeHtml;
    /**
     * Return the direction for which the icon should mirror (ltr vs rtl). The icon direction
     * is configurable, but optional, as only a few icons should be flipped for rtl direction.
     */
    getFlipDirection(type: ICON_TYPE | string): DirectionMode;
    /**
     *
     * Returns the symbol class(es) for the icon type.
     */
    getStyleClasses(iconType: ICON_TYPE | string): string;
    /**
     * Indicates whether the given `ICON_TYPE` is configured for
     * the given `IconResourceType`.
     */
    private isResourceType;
    /**
     * Returns the path to the svg link. The link supports path names
     * as well, if the config a[[s been setup to support a svg file path.
     * Additionally, the icon prefix will be taken into account to prefix the
     * icon IDs in the SVG.
     */
    private getSvgPath;
    /**
     * Loads the resource url (if any) for the given icon.
     * The icon will only be loaded once.
     *
     * NOTE: this is not working when the shadow is used as there's
     * no head element available and the link must be loaded for every
     * web component.
     */
    addLinkResource(iconType: ICON_TYPE | string): void;
    private findResource;
    getSymbol(iconType: ICON_TYPE | string): string;
    private get config();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IconLoaderService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1sb2FkZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJpY29uLWxvYWRlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgRGlyZWN0aW9uTW9kZSB9IGZyb20gJy4uLy4uLy4uL2xheW91dC9kaXJlY3Rpb24vY29uZmlnL2RpcmVjdGlvbi5tb2RlbCc7XHJcbmltcG9ydCB7IEljb25Db25maWcsIElDT05fVFlQRSB9IGZyb20gJy4vaWNvbi5tb2RlbCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEljb25Mb2FkZXJTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCB3aW5SZWY6IFdpbmRvd1JlZjtcclxuICAgIHByb3RlY3RlZCBpY29uQ29uZmlnOiBJY29uQ29uZmlnO1xyXG4gICAgcHJvdGVjdGVkIHNhbml0aXplcjogRG9tU2FuaXRpemVyO1xyXG4gICAgcHJpdmF0ZSBsb2FkZWRSZXNvdXJjZXM7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aW5SZWY6IFdpbmRvd1JlZiwgaWNvbkNvbmZpZzogSWNvbkNvbmZpZywgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGFuIGh0bWwgZnJhZ21lbnQgd2hpY2ggY2FuIGJlIGFkZGVkIHRvIHRoZSBET00gaW4gYSBzYWZlIHdheS5cclxuICAgICAqL1xyXG4gICAgZ2V0SHRtbCh0eXBlOiBJQ09OX1RZUEUgfCBzdHJpbmcpOiBTYWZlSHRtbDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBkaXJlY3Rpb24gZm9yIHdoaWNoIHRoZSBpY29uIHNob3VsZCBtaXJyb3IgKGx0ciB2cyBydGwpLiBUaGUgaWNvbiBkaXJlY3Rpb25cclxuICAgICAqIGlzIGNvbmZpZ3VyYWJsZSwgYnV0IG9wdGlvbmFsLCBhcyBvbmx5IGEgZmV3IGljb25zIHNob3VsZCBiZSBmbGlwcGVkIGZvciBydGwgZGlyZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBnZXRGbGlwRGlyZWN0aW9uKHR5cGU6IElDT05fVFlQRSB8IHN0cmluZyk6IERpcmVjdGlvbk1vZGU7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzeW1ib2wgY2xhc3MoZXMpIGZvciB0aGUgaWNvbiB0eXBlLlxyXG4gICAgICovXHJcbiAgICBnZXRTdHlsZUNsYXNzZXMoaWNvblR5cGU6IElDT05fVFlQRSB8IHN0cmluZyk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdpdmVuIGBJQ09OX1RZUEVgIGlzIGNvbmZpZ3VyZWQgZm9yXHJcbiAgICAgKiB0aGUgZ2l2ZW4gYEljb25SZXNvdXJjZVR5cGVgLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGlzUmVzb3VyY2VUeXBlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBwYXRoIHRvIHRoZSBzdmcgbGluay4gVGhlIGxpbmsgc3VwcG9ydHMgcGF0aCBuYW1lc1xyXG4gICAgICogYXMgd2VsbCwgaWYgdGhlIGNvbmZpZyBhW1tzIGJlZW4gc2V0dXAgdG8gc3VwcG9ydCBhIHN2ZyBmaWxlIHBhdGguXHJcbiAgICAgKiBBZGRpdGlvbmFsbHksIHRoZSBpY29uIHByZWZpeCB3aWxsIGJlIHRha2VuIGludG8gYWNjb3VudCB0byBwcmVmaXggdGhlXHJcbiAgICAgKiBpY29uIElEcyBpbiB0aGUgU1ZHLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFN2Z1BhdGg7XHJcbiAgICAvKipcclxuICAgICAqIExvYWRzIHRoZSByZXNvdXJjZSB1cmwgKGlmIGFueSkgZm9yIHRoZSBnaXZlbiBpY29uLlxyXG4gICAgICogVGhlIGljb24gd2lsbCBvbmx5IGJlIGxvYWRlZCBvbmNlLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IHRoaXMgaXMgbm90IHdvcmtpbmcgd2hlbiB0aGUgc2hhZG93IGlzIHVzZWQgYXMgdGhlcmUnc1xyXG4gICAgICogbm8gaGVhZCBlbGVtZW50IGF2YWlsYWJsZSBhbmQgdGhlIGxpbmsgbXVzdCBiZSBsb2FkZWQgZm9yIGV2ZXJ5XHJcbiAgICAgKiB3ZWIgY29tcG9uZW50LlxyXG4gICAgICovXHJcbiAgICBhZGRMaW5rUmVzb3VyY2UoaWNvblR5cGU6IElDT05fVFlQRSB8IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGZpbmRSZXNvdXJjZTtcclxuICAgIGdldFN5bWJvbChpY29uVHlwZTogSUNPTl9UWVBFIHwgc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBnZXQgY29uZmlnKCk7XHJcbn1cclxuIl19