import { DirectionMode } from '../../../layout/direction/config/direction.model';
import * as ɵngcc0 from '@angular/core';
export declare enum ICON_TYPE {
    STAR = "STAR",
    SEARCH = "SEARCH",
    CART = "CART",
    INFO = "INFO",
    GRID = "GRID",
    LIST = "LIST",
    CARET_DOWN = "CARET_DOWN",
    CARET_LEFT = "CARET_LEFT",
    CARET_RIGHT = "CARET_RIGHT",
    CLOSE = "CLOSE",
    ERROR = "ERROR",
    WARNING = "WARNING",
    SUCCESS = "SUCCESS",
    VISA = "VISA",
    MASTER_CARD = "MASTER_CARD",
    AMEX = "AMEX",
    DINERS_CLUB = "DINERS_CLUB",
    CREDIT_CARD = "CREDIT_CARD",
    EXPAND = "EXPAND",
    COLLAPSE = "COLLAPSE",
    RESET = "RESET",
    CIRCLE = "CIRCLE",
    HEART = "HEART",
    EMPTY_HEART = "EMPTY_HEART",
    FILTER = "FILTER"
}
export declare abstract class IconConfig {
    icon?: IconOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IconConfig, never>;
}
export interface IconOptions {
    /**
     * Each icon type can be configured with a so-called symbol. The symbol will
     * be used to map the icon to an SVG `symbol` (id) or to the style classes of
     * a font based icon. The following configuration would map to a fontawesome
     * icon:
     *
     * icon: {
     *   symbols: {
     *     CART: 'fas fa-shopping-cart'
     *   }
     * }
     */
    symbols?: {
        [ICON_TYPE: string]: string;
    };
    /**
     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.
     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL
     * is used for the SVG xlink reference.
     */
    resources?: IconConfigResource[];
    /**
     * Lists icons that should be flipped for a specific direction.
     */
    flipDirection?: {
        [ICON_TYPE: string]: DirectionMode;
    };
}
export interface IconConfigResource {
    type: IconResourceType | string;
    url?: string;
    types?: (ICON_TYPE | string)[];
}
/**
 * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.
 * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.
 */
export declare enum IconResourceType {
    /**
     * An svg based icon requires an SVG resource that must be loaded,
     * this is typically a sprite svg file.
     */
    SVG = "svg",
    /**
     * A font based ICON might require an additional CSS file to be loaded.
     */
    LINK = "link",
    /**
     * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image
     * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)
     */
    TEXT = "text"
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5tb2RlbC5kLnRzIiwic291cmNlcyI6WyJpY29uLm1vZGVsLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGlvbk1vZGUgfSBmcm9tICcuLi8uLi8uLi9sYXlvdXQvZGlyZWN0aW9uL2NvbmZpZy9kaXJlY3Rpb24ubW9kZWwnO1xyXG5leHBvcnQgZGVjbGFyZSBlbnVtIElDT05fVFlQRSB7XHJcbiAgICBTVEFSID0gXCJTVEFSXCIsXHJcbiAgICBTRUFSQ0ggPSBcIlNFQVJDSFwiLFxyXG4gICAgQ0FSVCA9IFwiQ0FSVFwiLFxyXG4gICAgSU5GTyA9IFwiSU5GT1wiLFxyXG4gICAgR1JJRCA9IFwiR1JJRFwiLFxyXG4gICAgTElTVCA9IFwiTElTVFwiLFxyXG4gICAgQ0FSRVRfRE9XTiA9IFwiQ0FSRVRfRE9XTlwiLFxyXG4gICAgQ0FSRVRfTEVGVCA9IFwiQ0FSRVRfTEVGVFwiLFxyXG4gICAgQ0FSRVRfUklHSFQgPSBcIkNBUkVUX1JJR0hUXCIsXHJcbiAgICBDTE9TRSA9IFwiQ0xPU0VcIixcclxuICAgIEVSUk9SID0gXCJFUlJPUlwiLFxyXG4gICAgV0FSTklORyA9IFwiV0FSTklOR1wiLFxyXG4gICAgU1VDQ0VTUyA9IFwiU1VDQ0VTU1wiLFxyXG4gICAgVklTQSA9IFwiVklTQVwiLFxyXG4gICAgTUFTVEVSX0NBUkQgPSBcIk1BU1RFUl9DQVJEXCIsXHJcbiAgICBBTUVYID0gXCJBTUVYXCIsXHJcbiAgICBESU5FUlNfQ0xVQiA9IFwiRElORVJTX0NMVUJcIixcclxuICAgIENSRURJVF9DQVJEID0gXCJDUkVESVRfQ0FSRFwiLFxyXG4gICAgRVhQQU5EID0gXCJFWFBBTkRcIixcclxuICAgIENPTExBUFNFID0gXCJDT0xMQVBTRVwiLFxyXG4gICAgUkVTRVQgPSBcIlJFU0VUXCIsXHJcbiAgICBDSVJDTEUgPSBcIkNJUkNMRVwiLFxyXG4gICAgSEVBUlQgPSBcIkhFQVJUXCIsXHJcbiAgICBFTVBUWV9IRUFSVCA9IFwiRU1QVFlfSEVBUlRcIixcclxuICAgIEZJTFRFUiA9IFwiRklMVEVSXCJcclxufVxyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBJY29uQ29uZmlnIHtcclxuICAgIGljb24/OiBJY29uT3B0aW9ucztcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEljb25PcHRpb25zIHtcclxuICAgIC8qKlxyXG4gICAgICogRWFjaCBpY29uIHR5cGUgY2FuIGJlIGNvbmZpZ3VyZWQgd2l0aCBhIHNvLWNhbGxlZCBzeW1ib2wuIFRoZSBzeW1ib2wgd2lsbFxyXG4gICAgICogYmUgdXNlZCB0byBtYXAgdGhlIGljb24gdG8gYW4gU1ZHIGBzeW1ib2xgIChpZCkgb3IgdG8gdGhlIHN0eWxlIGNsYXNzZXMgb2ZcclxuICAgICAqIGEgZm9udCBiYXNlZCBpY29uLiBUaGUgZm9sbG93aW5nIGNvbmZpZ3VyYXRpb24gd291bGQgbWFwIHRvIGEgZm9udGF3ZXNvbWVcclxuICAgICAqIGljb246XHJcbiAgICAgKlxyXG4gICAgICogaWNvbjoge1xyXG4gICAgICogICBzeW1ib2xzOiB7XHJcbiAgICAgKiAgICAgQ0FSVDogJ2ZhcyBmYS1zaG9wcGluZy1jYXJ0J1xyXG4gICAgICogICB9XHJcbiAgICAgKiB9XHJcbiAgICAgKi9cclxuICAgIHN5bWJvbHM/OiB7XHJcbiAgICAgICAgW0lDT05fVFlQRTogc3RyaW5nXTogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzb3VyY2VzIGFyZSB1c2VkIHRvIG1hcCBpY29uIHR5cGVzIHRvIGNlcnRhaW4gYXNzZXQsIHN1Y2ggYXMgYW4gU1ZHIChzcHJpdGUpIGltYWdlLlxyXG4gICAgICogVGhlIHJlc291cmNlIHR5cGUgKGBJY29uUmVzb3VyY2VUeXBlYCkgZGljdGF0ZXMgd2hldGhlciBhbiBTVkcgaW1hZ2UgaXMgdXNlZC4gVGhlIFVSTFxyXG4gICAgICogaXMgdXNlZCBmb3IgdGhlIFNWRyB4bGluayByZWZlcmVuY2UuXHJcbiAgICAgKi9cclxuICAgIHJlc291cmNlcz86IEljb25Db25maWdSZXNvdXJjZVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMaXN0cyBpY29ucyB0aGF0IHNob3VsZCBiZSBmbGlwcGVkIGZvciBhIHNwZWNpZmljIGRpcmVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgZmxpcERpcmVjdGlvbj86IHtcclxuICAgICAgICBbSUNPTl9UWVBFOiBzdHJpbmddOiBEaXJlY3Rpb25Nb2RlO1xyXG4gICAgfTtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEljb25Db25maWdSZXNvdXJjZSB7XHJcbiAgICB0eXBlOiBJY29uUmVzb3VyY2VUeXBlIHwgc3RyaW5nO1xyXG4gICAgdXJsPzogc3RyaW5nO1xyXG4gICAgdHlwZXM/OiAoSUNPTl9UWVBFIHwgc3RyaW5nKVtdO1xyXG59XHJcbi8qKlxyXG4gKiBFYWNoIElDT04gdHlwZSBjYW4gaGF2ZSBhbiBjb21wYW5pZWQgcmVzb3VyY2UgdHlwZSwgc3VjaCBhcyBTVkcsIExJTksgKGZvbnQpIG9yIGp1c3QgVEVYVC5cclxuICogVGhlIHJlc291cmNlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgbG9hZGVkIGluIGNhc2UgdGhleSdyZSByZXF1aXJlZCBmb3IgdGhlIGBJQ09OX1RZUEVgLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgZW51bSBJY29uUmVzb3VyY2VUeXBlIHtcclxuICAgIC8qKlxyXG4gICAgICogQW4gc3ZnIGJhc2VkIGljb24gcmVxdWlyZXMgYW4gU1ZHIHJlc291cmNlIHRoYXQgbXVzdCBiZSBsb2FkZWQsXHJcbiAgICAgKiB0aGlzIGlzIHR5cGljYWxseSBhIHNwcml0ZSBzdmcgZmlsZS5cclxuICAgICAqL1xyXG4gICAgU1ZHID0gXCJzdmdcIixcclxuICAgIC8qKlxyXG4gICAgICogQSBmb250IGJhc2VkIElDT04gbWlnaHQgcmVxdWlyZSBhbiBhZGRpdGlvbmFsIENTUyBmaWxlIHRvIGJlIGxvYWRlZC5cclxuICAgICAqL1xyXG4gICAgTElOSyA9IFwibGlua1wiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXh0IGJhc2VkIGljb25zIHdpbGwgc2ltcGx5IGFkZCB0aGUgSUNPTiBzdHJpbmcgdG8gdGhlIERPTS4gVGV4dCBpY29ucyBkbyBub3QgbmVlZCBhbiBpbWFnZVxyXG4gICAgICogb3IgQ1NTIHBzZXVkbyBjbGFzcyAoaS5lLiA6YmVmb3JlKSwgYXMgdGhlIHRleHQgaXRzZWxmIGlzIHRoZSBpY29uIChpLmUuICspXHJcbiAgICAgKi9cclxuICAgIFRFWFQgPSBcInRleHRcIlxyXG59XHJcbiJdfQ==