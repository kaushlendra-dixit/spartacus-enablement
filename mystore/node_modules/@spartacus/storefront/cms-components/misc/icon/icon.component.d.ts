import { ElementRef, Renderer2 } from '@angular/core';
import { SafeHtml } from '@angular/platform-browser';
import { IconLoaderService } from './icon-loader.service';
import { ICON_TYPE } from './icon.model';
/**
 *
 * The icon component can be added in different ways:
 *
 * With the component selector:
 * `<cx-icon type="SEARCH"></cx-icon>`
 *
 * With the attribute selector:
 * `<span cxIcon="STAR"></span>`
 *
 * Additionally, content can be projected to the icon:
 *
 * `<button cxIcon="HAPPY">happy label</button>`
 *
 * The above button would become (based on a TEXT resource type):
 * `<button>ðŸ˜Šhappy label</button>`
 *
 * While the content is projected, the icon itself doesn't require an
 * additional DOM node which is an advantage over the component selector.
 */
import * as Éµngcc0 from '@angular/core';
export declare class IconComponent {
    protected iconLoader: IconLoaderService;
    protected elementRef: ElementRef<HTMLElement>;
    protected renderer: Renderer2;
    /**
     * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to
     * accomplish a configurable button in the UI.
     */
    set cxIcon(type: ICON_TYPE);
    /**
     * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to
     * accomplish a configurable button in the UI.
     */
    set type(type: ICON_TYPE);
    /**
     * the icon provides an html fragment that is used to add SVG or text based icons.
     */
    icon: SafeHtml;
    /**
     * The `flip-at-rtl` class is added to the DOM for the style layer to flip the icon in RTL direction.
     */
    flipAtRtl: boolean;
    /**
     * The `flip-at-ltr` class is added to the DOM for the style layer to flip the icon in LTR direction.
     */
    flipAtLtr: boolean;
    /**
     * Maintains the applied style classes so we can remove them when the
     * icon type changes at run time.
     */
    protected styleClasses: string[];
    constructor(iconLoader: IconLoaderService, elementRef: ElementRef<HTMLElement>, renderer: Renderer2);
    protected setIcon(type: ICON_TYPE): void;
    /**
     * The icons supports flipping for some icons to support rtl and ltr directions.
     */
    protected flipIcon(type: ICON_TYPE): void;
    /**
     * Adds the style classes and the link resource (if available).
     */
    protected addStyleClasses(type: ICON_TYPE): void;
    protected get host(): HTMLElement;
    static Éµfac: Éµngcc0.ÉµÉµFactoryDef<IconComponent, never>;
    static Éµcmp: Éµngcc0.ÉµÉµComponentDefWithMeta<IconComponent, "cx-icon,[cxIcon]", never, { "cxIcon": "cxIcon"; "type": "type"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBJY29uTG9hZGVyU2VydmljZSB9IGZyb20gJy4vaWNvbi1sb2FkZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4vaWNvbi5tb2RlbCc7XHJcbi8qKlxyXG4gKlxyXG4gKiBUaGUgaWNvbiBjb21wb25lbnQgY2FuIGJlIGFkZGVkIGluIGRpZmZlcmVudCB3YXlzOlxyXG4gKlxyXG4gKiBXaXRoIHRoZSBjb21wb25lbnQgc2VsZWN0b3I6XHJcbiAqIGA8Y3gtaWNvbiB0eXBlPVwiU0VBUkNIXCI+PC9jeC1pY29uPmBcclxuICpcclxuICogV2l0aCB0aGUgYXR0cmlidXRlIHNlbGVjdG9yOlxyXG4gKiBgPHNwYW4gY3hJY29uPVwiU1RBUlwiPjwvc3Bhbj5gXHJcbiAqXHJcbiAqIEFkZGl0aW9uYWxseSwgY29udGVudCBjYW4gYmUgcHJvamVjdGVkIHRvIHRoZSBpY29uOlxyXG4gKlxyXG4gKiBgPGJ1dHRvbiBjeEljb249XCJIQVBQWVwiPmhhcHB5IGxhYmVsPC9idXR0b24+YFxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgYnV0dG9uIHdvdWxkIGJlY29tZSAoYmFzZWQgb24gYSBURVhUIHJlc291cmNlIHR5cGUpOlxyXG4gKiBgPGJ1dHRvbj7wn5iKaGFwcHkgbGFiZWw8L2J1dHRvbj5gXHJcbiAqXHJcbiAqIFdoaWxlIHRoZSBjb250ZW50IGlzIHByb2plY3RlZCwgdGhlIGljb24gaXRzZWxmIGRvZXNuJ3QgcmVxdWlyZSBhblxyXG4gKiBhZGRpdGlvbmFsIERPTSBub2RlIHdoaWNoIGlzIGFuIGFkdmFudGFnZSBvdmVyIHRoZSBjb21wb25lbnQgc2VsZWN0b3IuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJY29uQ29tcG9uZW50IHtcclxuICAgIHByb3RlY3RlZCBpY29uTG9hZGVyOiBJY29uTG9hZGVyU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcclxuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY3hJY29uIGRpcmVjdGl2ZSBpcyBib3VuZCB0byB0aGUgaWNvbiB0eXBlLiBZb3UgY2FuIGZlZWQgdGhlIGBJQ09OX1RZUEVgIHRvXHJcbiAgICAgKiBhY2NvbXBsaXNoIGEgY29uZmlndXJhYmxlIGJ1dHRvbiBpbiB0aGUgVUkuXHJcbiAgICAgKi9cclxuICAgIHNldCBjeEljb24odHlwZTogSUNPTl9UWVBFKTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHR5cGUgaW5wdXQgcGFyYW1ldGVyIGlzIGJvdW5kIHRvIHRoZSBpY29uIHR5cGUuIFlvdSBjYW4gZmVlZCB0aGUgYElDT05fVFlQRWAgdG9cclxuICAgICAqIGFjY29tcGxpc2ggYSBjb25maWd1cmFibGUgYnV0dG9uIGluIHRoZSBVSS5cclxuICAgICAqL1xyXG4gICAgc2V0IHR5cGUodHlwZTogSUNPTl9UWVBFKTtcclxuICAgIC8qKlxyXG4gICAgICogdGhlIGljb24gcHJvdmlkZXMgYW4gaHRtbCBmcmFnbWVudCB0aGF0IGlzIHVzZWQgdG8gYWRkIFNWRyBvciB0ZXh0IGJhc2VkIGljb25zLlxyXG4gICAgICovXHJcbiAgICBpY29uOiBTYWZlSHRtbDtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGBmbGlwLWF0LXJ0bGAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBmb3IgdGhlIHN0eWxlIGxheWVyIHRvIGZsaXAgdGhlIGljb24gaW4gUlRMIGRpcmVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgZmxpcEF0UnRsOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYGZsaXAtYXQtbHRyYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgRE9NIGZvciB0aGUgc3R5bGUgbGF5ZXIgdG8gZmxpcCB0aGUgaWNvbiBpbiBMVFIgZGlyZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBmbGlwQXRMdHI6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIE1haW50YWlucyB0aGUgYXBwbGllZCBzdHlsZSBjbGFzc2VzIHNvIHdlIGNhbiByZW1vdmUgdGhlbSB3aGVuIHRoZVxyXG4gICAgICogaWNvbiB0eXBlIGNoYW5nZXMgYXQgcnVuIHRpbWUuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBzdHlsZUNsYXNzZXM6IHN0cmluZ1tdO1xyXG4gICAgY29uc3RydWN0b3IoaWNvbkxvYWRlcjogSWNvbkxvYWRlclNlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCByZW5kZXJlcjogUmVuZGVyZXIyKTtcclxuICAgIHByb3RlY3RlZCBzZXRJY29uKHR5cGU6IElDT05fVFlQRSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpY29ucyBzdXBwb3J0cyBmbGlwcGluZyBmb3Igc29tZSBpY29ucyB0byBzdXBwb3J0IHJ0bCBhbmQgbHRyIGRpcmVjdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBmbGlwSWNvbih0eXBlOiBJQ09OX1RZUEUpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBzdHlsZSBjbGFzc2VzIGFuZCB0aGUgbGluayByZXNvdXJjZSAoaWYgYXZhaWxhYmxlKS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFkZFN0eWxlQ2xhc3Nlcyh0eXBlOiBJQ09OX1RZUEUpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIGdldCBob3N0KCk6IEhUTUxFbGVtZW50O1xyXG59XHJcbiJdfQ==