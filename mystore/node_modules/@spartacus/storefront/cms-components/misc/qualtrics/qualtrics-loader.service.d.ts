import { Renderer2, RendererFactory2 } from '@angular/core';
import { WindowRef } from '@spartacus/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const QUALTRICS_EVENT_NAME = "qsi_js_loaded";
/**
 * Service to integration Qualtrics.
 *
 * The integration observes the Qualtrics API, and when available, it runs the QSI API
 * to let Qualtrics evaluate the application.
 *
 * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application
 * data before pulling the QSI API. This is beneficial in a single page application when additional
 * data is required before the Qualtrics _creatives_ run.
 *
 * This service also supports the creation of the Qualtrics deployment script. This is optional, as
 * the script can be added in alternatives ways.
 */
export declare class QualtricsLoaderService {
    protected winRef: WindowRef;
    protected rendererFactory: RendererFactory2;
    /**
     * Reference to the QSI API.
     */
    protected qsiApi: any;
    /**
     * QSI load event that happens when the QSI JS file is loaded.
     */
    private qsiLoaded$;
    /**
     * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.
     *
     * The API is emitted when the JavaScript resource holding this API is fully loaded.
     * The API is also stored locally in the service, in case it's required later on.
     */
    protected qsi$: Observable<any>;
    constructor(winRef: WindowRef, rendererFactory: RendererFactory2);
    /**
     * Starts observing the Qualtrics integration. The integration is based on a
     * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,
     * we run the API.
     */
    protected initialize(): void;
    /**
     * Evaluates the Qualtrics project code for the application.
     *
     * In order to reload the evaluation in Qualtrics, the API requires to unload the API before
     * running it again. We don't do this by default, but offer a flag to conditionally unload the API.
     */
    protected run(reload?: boolean): void;
    /**
     * Adds the deployment script to the DOM.
     *
     * The script will not be added twice if it was loaded before. In that case, we use
     * the Qualtrics API directly to _unload_ and _run_ the project.
     */
    addScript(scriptSource: string): void;
    /**
     * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.
     * You can observe any data in this method.
     *
     * Defaults to true.
     */
    protected isDataLoaded(): Observable<boolean>;
    /**
     * Indicates if the script is already added to the DOM.
     */
    protected hasScript(source?: string): boolean;
    protected get renderer(): Renderer2;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QualtricsLoaderService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbHRyaWNzLWxvYWRlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInF1YWx0cmljcy1sb2FkZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgUVVBTFRSSUNTX0VWRU5UX05BTUUgPSBcInFzaV9qc19sb2FkZWRcIjtcclxuLyoqXHJcbiAqIFNlcnZpY2UgdG8gaW50ZWdyYXRpb24gUXVhbHRyaWNzLlxyXG4gKlxyXG4gKiBUaGUgaW50ZWdyYXRpb24gb2JzZXJ2ZXMgdGhlIFF1YWx0cmljcyBBUEksIGFuZCB3aGVuIGF2YWlsYWJsZSwgaXQgcnVucyB0aGUgUVNJIEFQSVxyXG4gKiB0byBsZXQgUXVhbHRyaWNzIGV2YWx1YXRlIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogVGhlIHNlcnZpY2Ugc3VwcG9ydHMgYW4gYWRkaXRpb25hbCBfaG9va18gKGBpc0RhdGFMb2FkZWQoKWApIHRoYXQgY2FuIGJlIHVzZWQgdG8gbG9hZCBhcHBsaWNhdGlvblxyXG4gKiBkYXRhIGJlZm9yZSBwdWxsaW5nIHRoZSBRU0kgQVBJLiBUaGlzIGlzIGJlbmVmaWNpYWwgaW4gYSBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbiB3aGVuIGFkZGl0aW9uYWxcclxuICogZGF0YSBpcyByZXF1aXJlZCBiZWZvcmUgdGhlIFF1YWx0cmljcyBfY3JlYXRpdmVzXyBydW4uXHJcbiAqXHJcbiAqIFRoaXMgc2VydmljZSBhbHNvIHN1cHBvcnRzIHRoZSBjcmVhdGlvbiBvZiB0aGUgUXVhbHRyaWNzIGRlcGxveW1lbnQgc2NyaXB0LiBUaGlzIGlzIG9wdGlvbmFsLCBhc1xyXG4gKiB0aGUgc2NyaXB0IGNhbiBiZSBhZGRlZCBpbiBhbHRlcm5hdGl2ZXMgd2F5cy5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFF1YWx0cmljc0xvYWRlclNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHdpblJlZjogV2luZG93UmVmO1xyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MjtcclxuICAgIC8qKlxyXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSBRU0kgQVBJLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcXNpQXBpOiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIFFTSSBsb2FkIGV2ZW50IHRoYXQgaGFwcGVucyB3aGVuIHRoZSBRU0kgSlMgZmlsZSBpcyBsb2FkZWQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcXNpTG9hZGVkJDtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgdGhlIFF1YWx0cmljcyBTaXRlIEludGVyY2VwdCAoUVNJKSBKYXZhU2NyaXB0IEFQSSB3aGVuZXZlciBhdmFpbGFibGUuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIEFQSSBpcyBlbWl0dGVkIHdoZW4gdGhlIEphdmFTY3JpcHQgcmVzb3VyY2UgaG9sZGluZyB0aGlzIEFQSSBpcyBmdWxseSBsb2FkZWQuXHJcbiAgICAgKiBUaGUgQVBJIGlzIGFsc28gc3RvcmVkIGxvY2FsbHkgaW4gdGhlIHNlcnZpY2UsIGluIGNhc2UgaXQncyByZXF1aXJlZCBsYXRlciBvbi5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHFzaSQ6IE9ic2VydmFibGU8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKHdpblJlZjogV2luZG93UmVmLCByZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTIpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgb2JzZXJ2aW5nIHRoZSBRdWFsdHJpY3MgaW50ZWdyYXRpb24uIFRoZSBpbnRlZ3JhdGlvbiBpcyBiYXNlZCBvbiBhXHJcbiAgICAgKiBRdWFsdHJpY3Mgc3BlY2lmaWMgZXZlbnQgKGBxc2lfanNfbG9hZGVkYCkuIEFzIHNvb24gYXMgdGhpcyBldmVudHMgaGFwcGVucyxcclxuICAgICAqIHdlIHJ1biB0aGUgQVBJLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaW5pdGlhbGl6ZSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFdmFsdWF0ZXMgdGhlIFF1YWx0cmljcyBwcm9qZWN0IGNvZGUgZm9yIHRoZSBhcHBsaWNhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBJbiBvcmRlciB0byByZWxvYWQgdGhlIGV2YWx1YXRpb24gaW4gUXVhbHRyaWNzLCB0aGUgQVBJIHJlcXVpcmVzIHRvIHVubG9hZCB0aGUgQVBJIGJlZm9yZVxyXG4gICAgICogcnVubmluZyBpdCBhZ2Fpbi4gV2UgZG9uJ3QgZG8gdGhpcyBieSBkZWZhdWx0LCBidXQgb2ZmZXIgYSBmbGFnIHRvIGNvbmRpdGlvbmFsbHkgdW5sb2FkIHRoZSBBUEkuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBydW4ocmVsb2FkPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIGRlcGxveW1lbnQgc2NyaXB0IHRvIHRoZSBET00uXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHNjcmlwdCB3aWxsIG5vdCBiZSBhZGRlZCB0d2ljZSBpZiBpdCB3YXMgbG9hZGVkIGJlZm9yZS4gSW4gdGhhdCBjYXNlLCB3ZSB1c2VcclxuICAgICAqIHRoZSBRdWFsdHJpY3MgQVBJIGRpcmVjdGx5IHRvIF91bmxvYWRfIGFuZCBfcnVuXyB0aGUgcHJvamVjdC5cclxuICAgICAqL1xyXG4gICAgYWRkU2NyaXB0KHNjcmlwdFNvdXJjZTogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBsb2dpYyBleGlzdCBpbiBvcmRlciB0byBsZXQgdGhlIGNsaWVudChzKSBhZGQgdGhlaXIgb3duIGxvZ2ljIHRvIHdhaXQgZm9yIGFueSBraW5kIG9mIHBhZ2UgZGF0YS5cclxuICAgICAqIFlvdSBjYW4gb2JzZXJ2ZSBhbnkgZGF0YSBpbiB0aGlzIG1ldGhvZC5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0cyB0byB0cnVlLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaXNEYXRhTG9hZGVkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgc2NyaXB0IGlzIGFscmVhZHkgYWRkZWQgdG8gdGhlIERPTS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGhhc1NjcmlwdChzb3VyY2U/OiBzdHJpbmcpOiBib29sZWFuO1xyXG4gICAgcHJvdGVjdGVkIGdldCByZW5kZXJlcigpOiBSZW5kZXJlcjI7XHJcbn1cclxuIl19