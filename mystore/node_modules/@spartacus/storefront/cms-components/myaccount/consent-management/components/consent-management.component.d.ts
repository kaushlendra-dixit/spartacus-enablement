import { OnDestroy, OnInit } from '@angular/core';
import { AnonymousConsentsConfig, AnonymousConsentsService, AuthService, ConsentTemplate, GlobalMessageService, UserConsentService } from '@spartacus/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class ConsentManagementComponent implements OnInit, OnDestroy {
    protected userConsentService: UserConsentService;
    protected globalMessageService: GlobalMessageService;
    protected anonymousConsentsConfig: AnonymousConsentsConfig;
    protected anonymousConsentsService: AnonymousConsentsService;
    protected authService: AuthService;
    private subscriptions;
    private allConsentsLoading;
    templateList$: Observable<ConsentTemplate[]>;
    loading$: Observable<boolean>;
    requiredConsents: string[];
    constructor(userConsentService: UserConsentService, globalMessageService: GlobalMessageService, anonymousConsentsConfig: AnonymousConsentsConfig, anonymousConsentsService: AnonymousConsentsService, authService: AuthService);
    ngOnInit(): void;
    private consentListInit;
    private hideAnonymousConsents;
    private giveConsentInit;
    private withdrawConsentInit;
    private consentsExists;
    onConsentChange({ given, template, }: {
        given: boolean;
        template: ConsentTemplate;
    }): void;
    private onConsentGivenSuccess;
    private onConsentWithdrawnSuccess;
    rejectAll(templates?: ConsentTemplate[]): void;
    private setupWithdrawalStream;
    allowAll(templates?: ConsentTemplate[]): void;
    private setupGiveStream;
    private isRequiredConsent;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ConsentManagementComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ConsentManagementComponent, "cx-consent-management", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1tYW5hZ2VtZW50LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjb25zZW50LW1hbmFnZW1lbnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBbm9ueW1vdXNDb25zZW50c0NvbmZpZywgQW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlLCBBdXRoU2VydmljZSwgQ29uc2VudFRlbXBsYXRlLCBHbG9iYWxNZXNzYWdlU2VydmljZSwgVXNlckNvbnNlbnRTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb25zZW50TWFuYWdlbWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIHByb3RlY3RlZCB1c2VyQ29uc2VudFNlcnZpY2U6IFVzZXJDb25zZW50U2VydmljZTtcclxuICAgIHByb3RlY3RlZCBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgYW5vbnltb3VzQ29uc2VudHNDb25maWc6IEFub255bW91c0NvbnNlbnRzQ29uZmlnO1xyXG4gICAgcHJvdGVjdGVkIGFub255bW91c0NvbnNlbnRzU2VydmljZTogQW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZTtcclxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcclxuICAgIHByaXZhdGUgYWxsQ29uc2VudHNMb2FkaW5nO1xyXG4gICAgdGVtcGxhdGVMaXN0JDogT2JzZXJ2YWJsZTxDb25zZW50VGVtcGxhdGVbXT47XHJcbiAgICBsb2FkaW5nJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIHJlcXVpcmVkQ29uc2VudHM6IHN0cmluZ1tdO1xyXG4gICAgY29uc3RydWN0b3IodXNlckNvbnNlbnRTZXJ2aWNlOiBVc2VyQ29uc2VudFNlcnZpY2UsIGdsb2JhbE1lc3NhZ2VTZXJ2aWNlOiBHbG9iYWxNZXNzYWdlU2VydmljZSwgYW5vbnltb3VzQ29uc2VudHNDb25maWc6IEFub255bW91c0NvbnNlbnRzQ29uZmlnLCBhbm9ueW1vdXNDb25zZW50c1NlcnZpY2U6IEFub255bW91c0NvbnNlbnRzU2VydmljZSwgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNvbnNlbnRMaXN0SW5pdDtcclxuICAgIHByaXZhdGUgaGlkZUFub255bW91c0NvbnNlbnRzO1xyXG4gICAgcHJpdmF0ZSBnaXZlQ29uc2VudEluaXQ7XHJcbiAgICBwcml2YXRlIHdpdGhkcmF3Q29uc2VudEluaXQ7XHJcbiAgICBwcml2YXRlIGNvbnNlbnRzRXhpc3RzO1xyXG4gICAgb25Db25zZW50Q2hhbmdlKHsgZ2l2ZW4sIHRlbXBsYXRlLCB9OiB7XHJcbiAgICAgICAgZ2l2ZW46IGJvb2xlYW47XHJcbiAgICAgICAgdGVtcGxhdGU6IENvbnNlbnRUZW1wbGF0ZTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBvbkNvbnNlbnRHaXZlblN1Y2Nlc3M7XHJcbiAgICBwcml2YXRlIG9uQ29uc2VudFdpdGhkcmF3blN1Y2Nlc3M7XHJcbiAgICByZWplY3RBbGwodGVtcGxhdGVzPzogQ29uc2VudFRlbXBsYXRlW10pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBzZXR1cFdpdGhkcmF3YWxTdHJlYW07XHJcbiAgICBhbGxvd0FsbCh0ZW1wbGF0ZXM/OiBDb25zZW50VGVtcGxhdGVbXSk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHNldHVwR2l2ZVN0cmVhbTtcclxuICAgIHByaXZhdGUgaXNSZXF1aXJlZENvbnNlbnQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==