import { FormControl, FormGroup } from '@angular/forms';
import { Order, OrderEntry, Price } from '@spartacus/core';
import { Observable } from 'rxjs';
import { OrderDetailsService } from '../order-details/order-details.service';
import { AmendOrderType } from './amend-order.model';
import * as ɵngcc0 from '@angular/core';
export declare abstract class OrderAmendService {
    protected orderDetailsService: OrderDetailsService;
    protected amendType: AmendOrderType;
    protected form: FormGroup;
    constructor(orderDetailsService: OrderDetailsService);
    /**
     * Returns entries for the given order.
     */
    abstract getEntries(): Observable<OrderEntry[]>;
    /**
     * Returns entries with an amended quantity.
     */
    getAmendedEntries(): Observable<OrderEntry[]>;
    /**
     * Submits the amended order.
     */
    abstract save(): void;
    getOrder(): Observable<Order>;
    /**
     * returns the form with form data at runtime
     */
    getForm(): Observable<FormGroup>;
    private buildForm;
    protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl;
    /**
     * As discussed, this calculation is moved to SPA side.
     * The calculation and validation should be in backend facade layer.
     */
    getAmendedPrice(entry: OrderEntry): Price;
    getMaxAmendQuantity(entry: OrderEntry): number;
    isCancellation(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OrderAmendService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<OrderAmendService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1lbmQtb3JkZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJhbWVuZC1vcmRlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQ29udHJvbCwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBPcmRlciwgT3JkZXJFbnRyeSwgUHJpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE9yZGVyRGV0YWlsc1NlcnZpY2UgfSBmcm9tICcuLi9vcmRlci1kZXRhaWxzL29yZGVyLWRldGFpbHMuc2VydmljZSc7XHJcbmltcG9ydCB7IEFtZW5kT3JkZXJUeXBlIH0gZnJvbSAnLi9hbWVuZC1vcmRlci5tb2RlbCc7XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIE9yZGVyQW1lbmRTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCBvcmRlckRldGFpbHNTZXJ2aWNlOiBPcmRlckRldGFpbHNTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGFtZW5kVHlwZTogQW1lbmRPcmRlclR5cGU7XHJcbiAgICBwcm90ZWN0ZWQgZm9ybTogRm9ybUdyb3VwO1xyXG4gICAgY29uc3RydWN0b3Iob3JkZXJEZXRhaWxzU2VydmljZTogT3JkZXJEZXRhaWxzU2VydmljZSk7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgZW50cmllcyBmb3IgdGhlIGdpdmVuIG9yZGVyLlxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBnZXRFbnRyaWVzKCk6IE9ic2VydmFibGU8T3JkZXJFbnRyeVtdPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBlbnRyaWVzIHdpdGggYW4gYW1lbmRlZCBxdWFudGl0eS5cclxuICAgICAqL1xyXG4gICAgZ2V0QW1lbmRlZEVudHJpZXMoKTogT2JzZXJ2YWJsZTxPcmRlckVudHJ5W10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJtaXRzIHRoZSBhbWVuZGVkIG9yZGVyLlxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBzYXZlKCk6IHZvaWQ7XHJcbiAgICBnZXRPcmRlcigpOiBPYnNlcnZhYmxlPE9yZGVyPjtcclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgZm9ybSB3aXRoIGZvcm0gZGF0YSBhdCBydW50aW1lXHJcbiAgICAgKi9cclxuICAgIGdldEZvcm0oKTogT2JzZXJ2YWJsZTxGb3JtR3JvdXA+O1xyXG4gICAgcHJpdmF0ZSBidWlsZEZvcm07XHJcbiAgICBwcm90ZWN0ZWQgZ2V0Rm9ybUNvbnRyb2woZm9ybTogRm9ybUdyb3VwLCBlbnRyeTogT3JkZXJFbnRyeSk6IEZvcm1Db250cm9sO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcyBkaXNjdXNzZWQsIHRoaXMgY2FsY3VsYXRpb24gaXMgbW92ZWQgdG8gU1BBIHNpZGUuXHJcbiAgICAgKiBUaGUgY2FsY3VsYXRpb24gYW5kIHZhbGlkYXRpb24gc2hvdWxkIGJlIGluIGJhY2tlbmQgZmFjYWRlIGxheWVyLlxyXG4gICAgICovXHJcbiAgICBnZXRBbWVuZGVkUHJpY2UoZW50cnk6IE9yZGVyRW50cnkpOiBQcmljZTtcclxuICAgIGdldE1heEFtZW5kUXVhbnRpdHkoZW50cnk6IE9yZGVyRW50cnkpOiBudW1iZXI7XHJcbiAgICBpc0NhbmNlbGxhdGlvbigpOiBib29sZWFuO1xyXG59XHJcbiJdfQ==