import { OnInit } from '@angular/core';
import { Address, TranslationService, UserAddressService, CheckoutDeliveryService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { AddressBookComponentService } from './address-book.component.service';
import { Card } from '../../../shared/components/card';
import * as ɵngcc0 from '@angular/core';
export declare class AddressBookComponent implements OnInit {
    service: AddressBookComponentService;
    protected translation: TranslationService;
    protected userAddressService: UserAddressService;
    protected checkoutDeliveryService: CheckoutDeliveryService;
    addresses$: Observable<Address[]>;
    cards$: Observable<Card[]>;
    addressesStateLoading$: Observable<boolean>;
    currentAddress: Address;
    showAddAddressForm: boolean;
    showEditAddressForm: boolean;
    editCard: string;
    constructor(service: AddressBookComponentService, translation: TranslationService, userAddressService: UserAddressService, checkoutDeliveryService: CheckoutDeliveryService);
    ngOnInit(): void;
    addAddressButtonHandle(): void;
    editAddressButtonHandle(address: Address): void;
    addAddressSubmit(address: Address): void;
    addAddressCancel(): void;
    editAddressSubmit(address: Address): void;
    editAddressCancel(): void;
    getCardContent(address: Address): Observable<{
        textBold: string;
        text: string[];
        actions: {
            name: string;
            event: string;
        }[];
        header: string;
        deleteMsg: string;
    }>;
    setAddressAsDefault(addressId: string): void;
    deleteAddress(addressId: string): void;
    setEdit(addressId: string): void;
    cancelCard(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AddressBookComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AddressBookComponent, "cx-address-book", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy1ib29rLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhZGRyZXNzLWJvb2suY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWRkcmVzcywgVHJhbnNsYXRpb25TZXJ2aWNlLCBVc2VyQWRkcmVzc1NlcnZpY2UsIENoZWNrb3V0RGVsaXZlcnlTZXJ2aWNlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBBZGRyZXNzQm9va0NvbXBvbmVudFNlcnZpY2UgfSBmcm9tICcuL2FkZHJlc3MtYm9vay5jb21wb25lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IENhcmQgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29tcG9uZW50cy9jYXJkJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWRkcmVzc0Jvb2tDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgc2VydmljZTogQWRkcmVzc0Jvb2tDb21wb25lbnRTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgdXNlckFkZHJlc3NTZXJ2aWNlOiBVc2VyQWRkcmVzc1NlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgY2hlY2tvdXREZWxpdmVyeVNlcnZpY2U6IENoZWNrb3V0RGVsaXZlcnlTZXJ2aWNlO1xyXG4gICAgYWRkcmVzc2VzJDogT2JzZXJ2YWJsZTxBZGRyZXNzW10+O1xyXG4gICAgY2FyZHMkOiBPYnNlcnZhYmxlPENhcmRbXT47XHJcbiAgICBhZGRyZXNzZXNTdGF0ZUxvYWRpbmckOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgY3VycmVudEFkZHJlc3M6IEFkZHJlc3M7XHJcbiAgICBzaG93QWRkQWRkcmVzc0Zvcm06IGJvb2xlYW47XHJcbiAgICBzaG93RWRpdEFkZHJlc3NGb3JtOiBib29sZWFuO1xyXG4gICAgZWRpdENhcmQ6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IEFkZHJlc3NCb29rQ29tcG9uZW50U2VydmljZSwgdHJhbnNsYXRpb246IFRyYW5zbGF0aW9uU2VydmljZSwgdXNlckFkZHJlc3NTZXJ2aWNlOiBVc2VyQWRkcmVzc1NlcnZpY2UsIGNoZWNrb3V0RGVsaXZlcnlTZXJ2aWNlOiBDaGVja291dERlbGl2ZXJ5U2VydmljZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgYWRkQWRkcmVzc0J1dHRvbkhhbmRsZSgpOiB2b2lkO1xyXG4gICAgZWRpdEFkZHJlc3NCdXR0b25IYW5kbGUoYWRkcmVzczogQWRkcmVzcyk6IHZvaWQ7XHJcbiAgICBhZGRBZGRyZXNzU3VibWl0KGFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkO1xyXG4gICAgYWRkQWRkcmVzc0NhbmNlbCgpOiB2b2lkO1xyXG4gICAgZWRpdEFkZHJlc3NTdWJtaXQoYWRkcmVzczogQWRkcmVzcyk6IHZvaWQ7XHJcbiAgICBlZGl0QWRkcmVzc0NhbmNlbCgpOiB2b2lkO1xyXG4gICAgZ2V0Q2FyZENvbnRlbnQoYWRkcmVzczogQWRkcmVzcyk6IE9ic2VydmFibGU8e1xyXG4gICAgICAgIHRleHRCb2xkOiBzdHJpbmc7XHJcbiAgICAgICAgdGV4dDogc3RyaW5nW107XHJcbiAgICAgICAgYWN0aW9uczoge1xyXG4gICAgICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIGV2ZW50OiBzdHJpbmc7XHJcbiAgICAgICAgfVtdO1xyXG4gICAgICAgIGhlYWRlcjogc3RyaW5nO1xyXG4gICAgICAgIGRlbGV0ZU1zZzogc3RyaW5nO1xyXG4gICAgfT47XHJcbiAgICBzZXRBZGRyZXNzQXNEZWZhdWx0KGFkZHJlc3NJZDogc3RyaW5nKTogdm9pZDtcclxuICAgIGRlbGV0ZUFkZHJlc3MoYWRkcmVzc0lkOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgc2V0RWRpdChhZGRyZXNzSWQ6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBjYW5jZWxDYXJkKCk6IHZvaWQ7XHJcbn1cclxuIl19