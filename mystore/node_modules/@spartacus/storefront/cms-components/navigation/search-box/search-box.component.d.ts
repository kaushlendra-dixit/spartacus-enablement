import { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';
import { Observable } from 'rxjs';
import { ICON_TYPE } from '../../../cms-components/misc/icon/index';
import { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';
import { SearchBoxComponentService } from './search-box-component.service';
import { SearchBoxConfig, SearchResults } from './search-box.model';
import * as ɵngcc0 from '@angular/core';
export declare class SearchBoxComponent {
    protected searchBoxComponentService: SearchBoxComponentService;
    protected componentData: CmsComponentData<CmsSearchBoxComponent>;
    protected winRef: WindowRef;
    config: SearchBoxConfig;
    /**
     * Sets the search box input field
     */
    set queryText(value: string);
    iconTypes: typeof ICON_TYPE;
    /**
     * In some occasions we need to ignore the close event,
     * for example when we click inside the search result section.
     */
    private ignoreCloseEvent;
    /**
     * The component data is optional, so that this component
     * can be reused without CMS integration.
     */
    constructor(searchBoxComponentService: SearchBoxComponentService, componentData: CmsComponentData<CmsSearchBoxComponent>, winRef: WindowRef);
    results$: Observable<SearchResults>;
    /**
     * Returns the backend configuration or default configuration for the searchbox.
     */
    private get config$();
    /**
     * Closes the searchbox and opens the search result page.
     */
    search(query: string): void;
    /**
     * Opens the typeahead searchbox
     */
    open(): void;
    /**
     * Closes the typehead searchbox.
     */
    close(event: UIEvent, force?: boolean): void;
    protected blurSearchBox(event: UIEvent): void;
    private isSearchboxFocused;
    /**
     * Especially in mobile we do not want the search icon
     * to focus the input again when it's already open.
     * */
    avoidReopen(event: UIEvent): void;
    private getResultElements;
    private getFocusedElement;
    private getFocusedIndex;
    focusPreviousChild(event: any): void;
    focusNextChild(event: any): void;
    /**
     * Opens the PLP with the given query.
     *
     * TODO: if there's a single product match, we could open the PDP.
     */
    launchSearchResult(event: UIEvent, query: string): void;
    /**
     * Disables closing the search result list.
     */
    disableClose(): void;
    /**
     * Clears the search box input field
     */
    clear(el: HTMLInputElement): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SearchBoxComponent, [null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SearchBoxComponent, "cx-searchbox", never, { "queryText": "queryText"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJveC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic2VhcmNoLWJveC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENtc1NlYXJjaEJveENvbXBvbmVudCwgV2luZG93UmVmIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaW5kZXgnO1xyXG5pbXBvcnQgeyBDbXNDb21wb25lbnREYXRhIH0gZnJvbSAnLi4vLi4vLi4vY21zLXN0cnVjdHVyZS9wYWdlL21vZGVsL2Ntcy1jb21wb25lbnQtZGF0YSc7XHJcbmltcG9ydCB7IFNlYXJjaEJveENvbXBvbmVudFNlcnZpY2UgfSBmcm9tICcuL3NlYXJjaC1ib3gtY29tcG9uZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTZWFyY2hCb3hDb25maWcsIFNlYXJjaFJlc3VsdHMgfSBmcm9tICcuL3NlYXJjaC1ib3gubW9kZWwnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWFyY2hCb3hDb21wb25lbnQge1xyXG4gICAgcHJvdGVjdGVkIHNlYXJjaEJveENvbXBvbmVudFNlcnZpY2U6IFNlYXJjaEJveENvbXBvbmVudFNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RGF0YTogQ21zQ29tcG9uZW50RGF0YTxDbXNTZWFyY2hCb3hDb21wb25lbnQ+O1xyXG4gICAgcHJvdGVjdGVkIHdpblJlZjogV2luZG93UmVmO1xyXG4gICAgY29uZmlnOiBTZWFyY2hCb3hDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIHNlYXJjaCBib3ggaW5wdXQgZmllbGRcclxuICAgICAqL1xyXG4gICAgc2V0IHF1ZXJ5VGV4dCh2YWx1ZTogc3RyaW5nKTtcclxuICAgIGljb25UeXBlczogdHlwZW9mIElDT05fVFlQRTtcclxuICAgIC8qKlxyXG4gICAgICogSW4gc29tZSBvY2Nhc2lvbnMgd2UgbmVlZCB0byBpZ25vcmUgdGhlIGNsb3NlIGV2ZW50LFxyXG4gICAgICogZm9yIGV4YW1wbGUgd2hlbiB3ZSBjbGljayBpbnNpZGUgdGhlIHNlYXJjaCByZXN1bHQgc2VjdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpZ25vcmVDbG9zZUV2ZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgY29tcG9uZW50IGRhdGEgaXMgb3B0aW9uYWwsIHNvIHRoYXQgdGhpcyBjb21wb25lbnRcclxuICAgICAqIGNhbiBiZSByZXVzZWQgd2l0aG91dCBDTVMgaW50ZWdyYXRpb24uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNlYXJjaEJveENvbXBvbmVudFNlcnZpY2U6IFNlYXJjaEJveENvbXBvbmVudFNlcnZpY2UsIGNvbXBvbmVudERhdGE6IENtc0NvbXBvbmVudERhdGE8Q21zU2VhcmNoQm94Q29tcG9uZW50Piwgd2luUmVmOiBXaW5kb3dSZWYpO1xyXG4gICAgcmVzdWx0cyQ6IE9ic2VydmFibGU8U2VhcmNoUmVzdWx0cz47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGJhY2tlbmQgY29uZmlndXJhdGlvbiBvciBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzZWFyY2hib3guXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0IGNvbmZpZyQoKTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBzZWFyY2hib3ggYW5kIG9wZW5zIHRoZSBzZWFyY2ggcmVzdWx0IHBhZ2UuXHJcbiAgICAgKi9cclxuICAgIHNlYXJjaChxdWVyeTogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogT3BlbnMgdGhlIHR5cGVhaGVhZCBzZWFyY2hib3hcclxuICAgICAqL1xyXG4gICAgb3BlbigpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZXMgdGhlIHR5cGVoZWFkIHNlYXJjaGJveC5cclxuICAgICAqL1xyXG4gICAgY2xvc2UoZXZlbnQ6IFVJRXZlbnQsIGZvcmNlPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgYmx1clNlYXJjaEJveChldmVudDogVUlFdmVudCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGlzU2VhcmNoYm94Rm9jdXNlZDtcclxuICAgIC8qKlxyXG4gICAgICogRXNwZWNpYWxseSBpbiBtb2JpbGUgd2UgZG8gbm90IHdhbnQgdGhlIHNlYXJjaCBpY29uXHJcbiAgICAgKiB0byBmb2N1cyB0aGUgaW5wdXQgYWdhaW4gd2hlbiBpdCdzIGFscmVhZHkgb3Blbi5cclxuICAgICAqICovXHJcbiAgICBhdm9pZFJlb3BlbihldmVudDogVUlFdmVudCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGdldFJlc3VsdEVsZW1lbnRzO1xyXG4gICAgcHJpdmF0ZSBnZXRGb2N1c2VkRWxlbWVudDtcclxuICAgIHByaXZhdGUgZ2V0Rm9jdXNlZEluZGV4O1xyXG4gICAgZm9jdXNQcmV2aW91c0NoaWxkKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgZm9jdXNOZXh0Q2hpbGQoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIE9wZW5zIHRoZSBQTFAgd2l0aCB0aGUgZ2l2ZW4gcXVlcnkuXHJcbiAgICAgKlxyXG4gICAgICogVE9ETzogaWYgdGhlcmUncyBhIHNpbmdsZSBwcm9kdWN0IG1hdGNoLCB3ZSBjb3VsZCBvcGVuIHRoZSBQRFAuXHJcbiAgICAgKi9cclxuICAgIGxhdW5jaFNlYXJjaFJlc3VsdChldmVudDogVUlFdmVudCwgcXVlcnk6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERpc2FibGVzIGNsb3NpbmcgdGhlIHNlYXJjaCByZXN1bHQgbGlzdC5cclxuICAgICAqL1xyXG4gICAgZGlzYWJsZUNsb3NlKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgc2VhcmNoIGJveCBpbnB1dCBmaWVsZFxyXG4gICAgICovXHJcbiAgICBjbGVhcihlbDogSFRNTElucHV0RWxlbWVudCk6IHZvaWQ7XHJcbn1cclxuIl19