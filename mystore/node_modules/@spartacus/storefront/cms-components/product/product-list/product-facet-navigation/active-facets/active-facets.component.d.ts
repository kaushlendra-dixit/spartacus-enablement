import { Breadcrumb } from '@spartacus/core';
import { Observable } from 'rxjs';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FacetList } from '../facet.model';
import { FacetService } from '../services/facet.service';
/**
 * Active facets render the applied facet values as a list of focusable buttons
 * which can be used to remove the applied facet value.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ActiveFacetsComponent {
    protected facetService: FacetService;
    /** Active facets which are applied to the product results. */
    facetList$: Observable<FacetList>;
    /** Configurable icon which is used for the active facet close button */
    closeIcon: ICON_TYPE;
    constructor(facetService: FacetService);
    getLinkParams(facet: Breadcrumb): {
        [key: string]: string;
    };
    /**
     * The focus key is used to persist the focus on the facet when the DOM is being
     * recreated. We only apply the focus key for the given _active_ facet when there
     * the original facets is not available. This happens for non multi-valued facets.
     *
     * With this approach, the we keep the focus, either at the facet list or on the
     * active facets.
     */
    getFocusKey(facetList: FacetList, facet: Breadcrumb): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ActiveFacetsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ActiveFacetsComponent, "cx-active-facets", never, { "closeIcon": "closeIcon"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWZhY2V0cy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYWN0aXZlLWZhY2V0cy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSUNPTl9UWVBFIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY21zLWNvbXBvbmVudHMvbWlzYy9pY29uL2ljb24ubW9kZWwnO1xyXG5pbXBvcnQgeyBGYWNldExpc3QgfSBmcm9tICcuLi9mYWNldC5tb2RlbCc7XHJcbmltcG9ydCB7IEZhY2V0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2ZhY2V0LnNlcnZpY2UnO1xyXG4vKipcclxuICogQWN0aXZlIGZhY2V0cyByZW5kZXIgdGhlIGFwcGxpZWQgZmFjZXQgdmFsdWVzIGFzIGEgbGlzdCBvZiBmb2N1c2FibGUgYnV0dG9uc1xyXG4gKiB3aGljaCBjYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGFwcGxpZWQgZmFjZXQgdmFsdWUuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBY3RpdmVGYWNldHNDb21wb25lbnQge1xyXG4gICAgcHJvdGVjdGVkIGZhY2V0U2VydmljZTogRmFjZXRTZXJ2aWNlO1xyXG4gICAgLyoqIEFjdGl2ZSBmYWNldHMgd2hpY2ggYXJlIGFwcGxpZWQgdG8gdGhlIHByb2R1Y3QgcmVzdWx0cy4gKi9cclxuICAgIGZhY2V0TGlzdCQ6IE9ic2VydmFibGU8RmFjZXRMaXN0PjtcclxuICAgIC8qKiBDb25maWd1cmFibGUgaWNvbiB3aGljaCBpcyB1c2VkIGZvciB0aGUgYWN0aXZlIGZhY2V0IGNsb3NlIGJ1dHRvbiAqL1xyXG4gICAgY2xvc2VJY29uOiBJQ09OX1RZUEU7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWNldFNlcnZpY2U6IEZhY2V0U2VydmljZSk7XHJcbiAgICBnZXRMaW5rUGFyYW1zKGZhY2V0OiBCcmVhZGNydW1iKToge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmb2N1cyBrZXkgaXMgdXNlZCB0byBwZXJzaXN0IHRoZSBmb2N1cyBvbiB0aGUgZmFjZXQgd2hlbiB0aGUgRE9NIGlzIGJlaW5nXHJcbiAgICAgKiByZWNyZWF0ZWQuIFdlIG9ubHkgYXBwbHkgdGhlIGZvY3VzIGtleSBmb3IgdGhlIGdpdmVuIF9hY3RpdmVfIGZhY2V0IHdoZW4gdGhlcmVcclxuICAgICAqIHRoZSBvcmlnaW5hbCBmYWNldHMgaXMgbm90IGF2YWlsYWJsZS4gVGhpcyBoYXBwZW5zIGZvciBub24gbXVsdGktdmFsdWVkIGZhY2V0cy5cclxuICAgICAqXHJcbiAgICAgKiBXaXRoIHRoaXMgYXBwcm9hY2gsIHRoZSB3ZSBrZWVwIHRoZSBmb2N1cywgZWl0aGVyIGF0IHRoZSBmYWNldCBsaXN0IG9yIG9uIHRoZVxyXG4gICAgICogYWN0aXZlIGZhY2V0cy5cclxuICAgICAqL1xyXG4gICAgZ2V0Rm9jdXNLZXkoZmFjZXRMaXN0OiBGYWNldExpc3QsIGZhY2V0OiBCcmVhZGNydW1iKTogc3RyaW5nO1xyXG59XHJcbiJdfQ==