import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { Facet } from '@spartacus/core';
import { Observable } from 'rxjs';
import { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';
import { ICON_TYPE } from '../../../../misc/icon/icon.model';
import { FacetList } from '../facet.model';
import { FacetComponent } from '../facet/facet.component';
import { FacetService } from '../services/facet.service';
import * as ɵngcc0 from '@angular/core';
export declare class FacetListComponent {
    protected facetService: FacetService;
    protected elementRef: ElementRef;
    protected renderer: Renderer2;
    private _isDialog;
    /**
     * Indicates that the facet navigation is rendered in dialog.
     */
    set isDialog(value: boolean);
    get isDialog(): boolean;
    /** Emits when the list must close */
    closeList: EventEmitter<any>;
    /** The list of all facet and values related to the products in the list */
    facetList$: Observable<FacetList>;
    iconTypes: typeof ICON_TYPE;
    dialogFocusConfig: FocusConfig;
    handleClick(): void;
    constructor(facetService: FacetService, elementRef: ElementRef, renderer: Renderer2);
    /**
     * Toggles the facet group in case it is not expanded.
     */
    expandFacetGroup(facet: Facet, ref: FacetComponent): void;
    /**
     * Indicates that the facet group has been expanded.
     */
    isExpanded(facet: Facet): Observable<boolean>;
    /**
     * Indicates that the facet group has been collapsed.
     */
    isCollapsed(facet: Facet): Observable<boolean>;
    close(event?: boolean): void;
    block(event?: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FacetListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FacetListComponent, "cx-facet-list", never, { "isDialog": "isDialog"; }, { "closeList": "closeList"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQtbGlzdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmFjZXQtbGlzdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmFjZXQgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEZvY3VzQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGF5b3V0L2ExMXkva2V5Ym9hcmQtZm9jdXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi9taXNjL2ljb24vaWNvbi5tb2RlbCc7XHJcbmltcG9ydCB7IEZhY2V0TGlzdCB9IGZyb20gJy4uL2ZhY2V0Lm1vZGVsJztcclxuaW1wb3J0IHsgRmFjZXRDb21wb25lbnQgfSBmcm9tICcuLi9mYWNldC9mYWNldC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFjZXRMaXN0Q29tcG9uZW50IHtcclxuICAgIHByb3RlY3RlZCBmYWNldFNlcnZpY2U6IEZhY2V0U2VydmljZTtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xyXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XHJcbiAgICBwcml2YXRlIF9pc0RpYWxvZztcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGZhY2V0IG5hdmlnYXRpb24gaXMgcmVuZGVyZWQgaW4gZGlhbG9nLlxyXG4gICAgICovXHJcbiAgICBzZXQgaXNEaWFsb2codmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGlzRGlhbG9nKCk6IGJvb2xlYW47XHJcbiAgICAvKiogRW1pdHMgd2hlbiB0aGUgbGlzdCBtdXN0IGNsb3NlICovXHJcbiAgICBjbG9zZUxpc3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIFRoZSBsaXN0IG9mIGFsbCBmYWNldCBhbmQgdmFsdWVzIHJlbGF0ZWQgdG8gdGhlIHByb2R1Y3RzIGluIHRoZSBsaXN0ICovXHJcbiAgICBmYWNldExpc3QkOiBPYnNlcnZhYmxlPEZhY2V0TGlzdD47XHJcbiAgICBpY29uVHlwZXM6IHR5cGVvZiBJQ09OX1RZUEU7XHJcbiAgICBkaWFsb2dGb2N1c0NvbmZpZzogRm9jdXNDb25maWc7XHJcbiAgICBoYW5kbGVDbGljaygpOiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IoZmFjZXRTZXJ2aWNlOiBGYWNldFNlcnZpY2UsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGVzIHRoZSBmYWNldCBncm91cCBpbiBjYXNlIGl0IGlzIG5vdCBleHBhbmRlZC5cclxuICAgICAqL1xyXG4gICAgZXhwYW5kRmFjZXRHcm91cChmYWNldDogRmFjZXQsIHJlZjogRmFjZXRDb21wb25lbnQpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgZmFjZXQgZ3JvdXAgaGFzIGJlZW4gZXhwYW5kZWQuXHJcbiAgICAgKi9cclxuICAgIGlzRXhwYW5kZWQoZmFjZXQ6IEZhY2V0KTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIGZhY2V0IGdyb3VwIGhhcyBiZWVuIGNvbGxhcHNlZC5cclxuICAgICAqL1xyXG4gICAgaXNDb2xsYXBzZWQoZmFjZXQ6IEZhY2V0KTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIGNsb3NlKGV2ZW50PzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBibG9jayhldmVudD86IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG59XHJcbiJdfQ==