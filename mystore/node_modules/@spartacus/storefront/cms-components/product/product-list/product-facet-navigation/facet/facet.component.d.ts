import { ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';
import { Facet, FacetValue } from '@spartacus/core';
import { Observable } from 'rxjs';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import { FacetCollapseState } from '../facet.model';
import { FacetService } from '../services/facet.service';
import * as ɵngcc0 from '@angular/core';
export declare class FacetComponent {
    protected facetService: FacetService;
    protected elementRef: ElementRef<HTMLElement>;
    protected cd: ChangeDetectorRef;
    protected _facet: Facet;
    state$: Observable<FacetCollapseState>;
    /** configurable icon that is used to collapse the facet group  */
    expandIcon: ICON_TYPE;
    collapseIcon: ICON_TYPE;
    isMultiSelect: boolean;
    values: QueryList<ElementRef<HTMLElement>>;
    keyboardFocus: FocusDirective;
    set facet(value: Facet);
    get facet(): Facet;
    constructor(facetService: FacetService, elementRef: ElementRef<HTMLElement>, cd: ChangeDetectorRef);
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    toggleGroup(event: UIEvent): void;
    get isExpanded(): boolean;
    openLink(event: KeyboardEvent): void;
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    increaseVisibleValues(): void;
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    decreaseVisibleValues(): void;
    getLinkParams(value: FacetValue): {
        [key: string]: string;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FacetComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FacetComponent, "cx-facet", never, { "expandIcon": "expandIcon"; "collapseIcon": "collapseIcon"; "facet": "facet"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImZhY2V0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZhY2V0LCBGYWNldFZhbHVlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XHJcbmltcG9ydCB7IEZvY3VzRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGF5b3V0L2ExMXkva2V5Ym9hcmQtZm9jdXMvZm9jdXMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmFjZXRDb2xsYXBzZVN0YXRlIH0gZnJvbSAnLi4vZmFjZXQubW9kZWwnO1xyXG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFjZXRDb21wb25lbnQge1xyXG4gICAgcHJvdGVjdGVkIGZhY2V0U2VydmljZTogRmFjZXRTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG4gICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcclxuICAgIHByb3RlY3RlZCBfZmFjZXQ6IEZhY2V0O1xyXG4gICAgc3RhdGUkOiBPYnNlcnZhYmxlPEZhY2V0Q29sbGFwc2VTdGF0ZT47XHJcbiAgICAvKiogY29uZmlndXJhYmxlIGljb24gdGhhdCBpcyB1c2VkIHRvIGNvbGxhcHNlIHRoZSBmYWNldCBncm91cCAgKi9cclxuICAgIGV4cGFuZEljb246IElDT05fVFlQRTtcclxuICAgIGNvbGxhcHNlSWNvbjogSUNPTl9UWVBFO1xyXG4gICAgaXNNdWx0aVNlbGVjdDogYm9vbGVhbjtcclxuICAgIHZhbHVlczogUXVlcnlMaXN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PjtcclxuICAgIGtleWJvYXJkRm9jdXM6IEZvY3VzRGlyZWN0aXZlO1xyXG4gICAgc2V0IGZhY2V0KHZhbHVlOiBGYWNldCk7XHJcbiAgICBnZXQgZmFjZXQoKTogRmFjZXQ7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWNldFNlcnZpY2U6IEZhY2V0U2VydmljZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgY2xpY2tpbmcgdGhlIGhlYWRpbmcgb2YgdGhlIGZhY2V0IGdyb3VwLCB3aGljaCBtZWFucyB0b2dnbGluZ1xyXG4gICAgICogdGhlIHZpc2liaWxpdHkgb2YgdGhlIGdyb3VwIChjb2xsYXBzZSAvIGV4cGFuZCkgYW5kIG9wdGlvbmFsbHkgZm9jdXNpbmdcclxuICAgICAqIHRoZSBncm91cC5cclxuICAgICAqL1xyXG4gICAgdG9nZ2xlR3JvdXAoZXZlbnQ6IFVJRXZlbnQpOiB2b2lkO1xyXG4gICAgZ2V0IGlzRXhwYW5kZWQoKTogYm9vbGVhbjtcclxuICAgIG9wZW5MaW5rKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgdmlzaWJsZSB2YWx1ZXMgZm9yIHRoZSBmYWNldC4gVGhpcyBpcyBkZWxlZ2F0ZWRcclxuICAgICAqIHRvIGBmYWNldFNlcnZpY2UuaW5jcmVhc2VWaXNpYmxlVmFsdWVzYC5cclxuICAgICAqL1xyXG4gICAgaW5jcmVhc2VWaXNpYmxlVmFsdWVzKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERlY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHZpc2libGUgdmFsdWVzIGZvciB0aGUgZmFjZXQuIFRoaXMgaXMgZGVsZWdhdGVkXHJcbiAgICAgKiB0byBgZmFjZXRTZXJ2aWNlLmRlY3JlYXNlVmlzaWJsZVZhbHVlc2AuXHJcbiAgICAgKi9cclxuICAgIGRlY3JlYXNlVmlzaWJsZVZhbHVlcygpOiB2b2lkO1xyXG4gICAgZ2V0TGlua1BhcmFtcyh2YWx1ZTogRmFjZXRWYWx1ZSk6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==