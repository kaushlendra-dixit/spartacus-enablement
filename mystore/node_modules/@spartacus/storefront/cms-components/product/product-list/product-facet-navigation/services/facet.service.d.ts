import { Facet } from '@spartacus/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { FacetCollapseState, FacetList } from '../facet.model';
import { ProductFacetService } from './product-facet.service';
/**
 * Provides access to the facets as well as their UI state. The UI state
 * represents user related changes on the facets, such as expanding or
 * collapsing a facet group or expanding the number of _visible_ facet values.
 */
import * as ɵngcc0 from '@angular/core';
export declare class FacetService {
    protected productFacetService: ProductFacetService;
    /**
     * An internal map where we keep the UI state of the facets.
     */
    protected facetState: Map<string, BehaviorSubject<FacetCollapseState>>;
    constructor(productFacetService: ProductFacetService);
    /**
     * Observes the facets for the given page and configures the initial UI state.
     *
     * Facets are configured on each emission so that we keep the facet UI state.
     * This is mainly done to keep the state during usage of the facet, but also
     * benefitial when the facets are rebuild while using them.
     */
    facetList$: Observable<FacetList>;
    /**
     * Returns the observed UI state for the facet.
     *
     * The state is initialized using the `initialize` method.
     */
    getState(facet: Facet): Observable<FacetCollapseState>;
    /**
     * Returns the UI state for the facet.
     *
     * The state is initialized using the `initialize` method.
     */
    protected getStateSnapshot(facet: Facet): FacetCollapseState;
    /**
     * Toggles the facet expanded state. If the expanded state becomes false,
     * the visible values will decrease to the top values only.
     *
     * If the optional value argument is provided the expanded state will be set
     * to this value, regardless of the current `expanded` state.
     */
    toggle(facet: Facet, isExpanded: boolean): void;
    /**
     * Increases the visible values to the maximum values of the facet.
     */
    increaseVisibleValues(facet: Facet): void;
    /**
     * Decreases the visible values to the topValueCount.
     *
     * The topValueCount defaults to 6, but can be controlled in
     * the backend as well.
     */
    decreaseVisibleValues(facet: Facet): void;
    /**
     * Persists the facet state and initializes the default values for the top
     * and max visible values.
     */
    protected initialize(facet: Facet): void;
    /**
     * Updates the state of the facet in the local facet map.
     */
    protected updateState(facet: Facet, property: FacetCollapseState): void;
    protected hasState(facet: Facet): boolean;
    getLinkParams(query: string): {
        [key: string]: string;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FacetService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJmYWNldC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYWNldCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGYWNldENvbGxhcHNlU3RhdGUsIEZhY2V0TGlzdCB9IGZyb20gJy4uL2ZhY2V0Lm1vZGVsJztcclxuaW1wb3J0IHsgUHJvZHVjdEZhY2V0U2VydmljZSB9IGZyb20gJy4vcHJvZHVjdC1mYWNldC5zZXJ2aWNlJztcclxuLyoqXHJcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZmFjZXRzIGFzIHdlbGwgYXMgdGhlaXIgVUkgc3RhdGUuIFRoZSBVSSBzdGF0ZVxyXG4gKiByZXByZXNlbnRzIHVzZXIgcmVsYXRlZCBjaGFuZ2VzIG9uIHRoZSBmYWNldHMsIHN1Y2ggYXMgZXhwYW5kaW5nIG9yXHJcbiAqIGNvbGxhcHNpbmcgYSBmYWNldCBncm91cCBvciBleHBhbmRpbmcgdGhlIG51bWJlciBvZiBfdmlzaWJsZV8gZmFjZXQgdmFsdWVzLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFjZXRTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCBwcm9kdWN0RmFjZXRTZXJ2aWNlOiBQcm9kdWN0RmFjZXRTZXJ2aWNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBpbnRlcm5hbCBtYXAgd2hlcmUgd2Uga2VlcCB0aGUgVUkgc3RhdGUgb2YgdGhlIGZhY2V0cy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGZhY2V0U3RhdGU6IE1hcDxzdHJpbmcsIEJlaGF2aW9yU3ViamVjdDxGYWNldENvbGxhcHNlU3RhdGU+PjtcclxuICAgIGNvbnN0cnVjdG9yKHByb2R1Y3RGYWNldFNlcnZpY2U6IFByb2R1Y3RGYWNldFNlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBPYnNlcnZlcyB0aGUgZmFjZXRzIGZvciB0aGUgZ2l2ZW4gcGFnZSBhbmQgY29uZmlndXJlcyB0aGUgaW5pdGlhbCBVSSBzdGF0ZS5cclxuICAgICAqXHJcbiAgICAgKiBGYWNldHMgYXJlIGNvbmZpZ3VyZWQgb24gZWFjaCBlbWlzc2lvbiBzbyB0aGF0IHdlIGtlZXAgdGhlIGZhY2V0IFVJIHN0YXRlLlxyXG4gICAgICogVGhpcyBpcyBtYWlubHkgZG9uZSB0byBrZWVwIHRoZSBzdGF0ZSBkdXJpbmcgdXNhZ2Ugb2YgdGhlIGZhY2V0LCBidXQgYWxzb1xyXG4gICAgICogYmVuZWZpdGlhbCB3aGVuIHRoZSBmYWNldHMgYXJlIHJlYnVpbGQgd2hpbGUgdXNpbmcgdGhlbS5cclxuICAgICAqL1xyXG4gICAgZmFjZXRMaXN0JDogT2JzZXJ2YWJsZTxGYWNldExpc3Q+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBvYnNlcnZlZCBVSSBzdGF0ZSBmb3IgdGhlIGZhY2V0LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBzdGF0ZSBpcyBpbml0aWFsaXplZCB1c2luZyB0aGUgYGluaXRpYWxpemVgIG1ldGhvZC5cclxuICAgICAqL1xyXG4gICAgZ2V0U3RhdGUoZmFjZXQ6IEZhY2V0KTogT2JzZXJ2YWJsZTxGYWNldENvbGxhcHNlU3RhdGU+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBVSSBzdGF0ZSBmb3IgdGhlIGZhY2V0LlxyXG4gICAgICpcclxuICAgICAqIFRoZSBzdGF0ZSBpcyBpbml0aWFsaXplZCB1c2luZyB0aGUgYGluaXRpYWxpemVgIG1ldGhvZC5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldFN0YXRlU25hcHNob3QoZmFjZXQ6IEZhY2V0KTogRmFjZXRDb2xsYXBzZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGVzIHRoZSBmYWNldCBleHBhbmRlZCBzdGF0ZS4gSWYgdGhlIGV4cGFuZGVkIHN0YXRlIGJlY29tZXMgZmFsc2UsXHJcbiAgICAgKiB0aGUgdmlzaWJsZSB2YWx1ZXMgd2lsbCBkZWNyZWFzZSB0byB0aGUgdG9wIHZhbHVlcyBvbmx5LlxyXG4gICAgICpcclxuICAgICAqIElmIHRoZSBvcHRpb25hbCB2YWx1ZSBhcmd1bWVudCBpcyBwcm92aWRlZCB0aGUgZXhwYW5kZWQgc3RhdGUgd2lsbCBiZSBzZXRcclxuICAgICAqIHRvIHRoaXMgdmFsdWUsIHJlZ2FyZGxlc3Mgb2YgdGhlIGN1cnJlbnQgYGV4cGFuZGVkYCBzdGF0ZS5cclxuICAgICAqL1xyXG4gICAgdG9nZ2xlKGZhY2V0OiBGYWNldCwgaXNFeHBhbmRlZDogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEluY3JlYXNlcyB0aGUgdmlzaWJsZSB2YWx1ZXMgdG8gdGhlIG1heGltdW0gdmFsdWVzIG9mIHRoZSBmYWNldC5cclxuICAgICAqL1xyXG4gICAgaW5jcmVhc2VWaXNpYmxlVmFsdWVzKGZhY2V0OiBGYWNldCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERlY3JlYXNlcyB0aGUgdmlzaWJsZSB2YWx1ZXMgdG8gdGhlIHRvcFZhbHVlQ291bnQuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHRvcFZhbHVlQ291bnQgZGVmYXVsdHMgdG8gNiwgYnV0IGNhbiBiZSBjb250cm9sbGVkIGluXHJcbiAgICAgKiB0aGUgYmFja2VuZCBhcyB3ZWxsLlxyXG4gICAgICovXHJcbiAgICBkZWNyZWFzZVZpc2libGVWYWx1ZXMoZmFjZXQ6IEZhY2V0KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUGVyc2lzdHMgdGhlIGZhY2V0IHN0YXRlIGFuZCBpbml0aWFsaXplcyB0aGUgZGVmYXVsdCB2YWx1ZXMgZm9yIHRoZSB0b3BcclxuICAgICAqIGFuZCBtYXggdmlzaWJsZSB2YWx1ZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBpbml0aWFsaXplKGZhY2V0OiBGYWNldCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXRlIG9mIHRoZSBmYWNldCBpbiB0aGUgbG9jYWwgZmFjZXQgbWFwLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlU3RhdGUoZmFjZXQ6IEZhY2V0LCBwcm9wZXJ0eTogRmFjZXRDb2xsYXBzZVN0YXRlKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBoYXNTdGF0ZShmYWNldDogRmFjZXQpOiBib29sZWFuO1xyXG4gICAgZ2V0TGlua1BhcmFtcyhxdWVyeTogc3RyaW5nKToge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcclxuICAgIH07XHJcbn1cclxuIl19