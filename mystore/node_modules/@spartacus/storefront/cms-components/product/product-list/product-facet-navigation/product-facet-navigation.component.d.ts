import { ElementRef } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';
import { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';
import * as ɵngcc0 from '@angular/core';
export declare class ProductFacetNavigationComponent {
    protected breakpointService: BreakpointService;
    iconTypes: typeof ICON_TYPE;
    /**
     * We delay the removal of DOM so that animations can finish playing before the
     * DOM is removed. Removing the DOM, as hidding is not enough to stop elements
     * to be focused.
     */
    protected CLOSE_DELAY: number;
    /**
     * Used to open the facet navigation in a dialog. The usage of the dialog depends
     * on the availability of the trigger element, which is driven by CSS.
     *
     * The reference is also used to refocus the trigger after the dialog is closed.
     */
    trigger: ElementRef<HTMLElement>;
    protected open$: BehaviorSubject<boolean>;
    /**
     * Emits the open state that indicates whether the facet list should be rendered.
     * This is either done instantly, or after the user triggers this by using the trigger
     * button. This driven by the visiibility of the trigger, so that the CSS drives
     * the behaviour. This can differ per breakpoint.
     *
     * There's a configurable delay for the closed state, so that the DOM is not removed
     * before some CSS animations are done.
     */
    isOpen$: Observable<boolean>;
    /**
     * Emits the active state that indicates whether the facet list is activated. Activation
     * is related to the css, so that a animation or transition can visualize opening/closing
     * the list (i.e. dialog).
     */
    isActive$: Observable<boolean>;
    constructor(breakpointService: BreakpointService);
    launch(): void;
    close(): void;
    /**
     * Indicates that the facet navigation should be open explicitely by a trigger.
     * This is fully controlled by CSS, where the trigger button can be hidden
     * (display:none) for certain screen sizes.
     */
    get hasTrigger(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProductFacetNavigationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ProductFacetNavigationComponent, "cx-product-facet-navigation", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mYWNldC1uYXZpZ2F0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcclxuaW1wb3J0IHsgQnJlYWtwb2ludFNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9sYXlvdXQvYnJlYWtwb2ludC9icmVha3BvaW50LnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQcm9kdWN0RmFjZXROYXZpZ2F0aW9uQ29tcG9uZW50IHtcclxuICAgIHByb3RlY3RlZCBicmVha3BvaW50U2VydmljZTogQnJlYWtwb2ludFNlcnZpY2U7XHJcbiAgICBpY29uVHlwZXM6IHR5cGVvZiBJQ09OX1RZUEU7XHJcbiAgICAvKipcclxuICAgICAqIFdlIGRlbGF5IHRoZSByZW1vdmFsIG9mIERPTSBzbyB0aGF0IGFuaW1hdGlvbnMgY2FuIGZpbmlzaCBwbGF5aW5nIGJlZm9yZSB0aGVcclxuICAgICAqIERPTSBpcyByZW1vdmVkLiBSZW1vdmluZyB0aGUgRE9NLCBhcyBoaWRkaW5nIGlzIG5vdCBlbm91Z2ggdG8gc3RvcCBlbGVtZW50c1xyXG4gICAgICogdG8gYmUgZm9jdXNlZC5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIENMT1NFX0RFTEFZOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gb3BlbiB0aGUgZmFjZXQgbmF2aWdhdGlvbiBpbiBhIGRpYWxvZy4gVGhlIHVzYWdlIG9mIHRoZSBkaWFsb2cgZGVwZW5kc1xyXG4gICAgICogb24gdGhlIGF2YWlsYWJpbGl0eSBvZiB0aGUgdHJpZ2dlciBlbGVtZW50LCB3aGljaCBpcyBkcml2ZW4gYnkgQ1NTLlxyXG4gICAgICpcclxuICAgICAqIFRoZSByZWZlcmVuY2UgaXMgYWxzbyB1c2VkIHRvIHJlZm9jdXMgdGhlIHRyaWdnZXIgYWZ0ZXIgdGhlIGRpYWxvZyBpcyBjbG9zZWQuXHJcbiAgICAgKi9cclxuICAgIHRyaWdnZXI6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG4gICAgcHJvdGVjdGVkIG9wZW4kOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj47XHJcbiAgICAvKipcclxuICAgICAqIEVtaXRzIHRoZSBvcGVuIHN0YXRlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZhY2V0IGxpc3Qgc2hvdWxkIGJlIHJlbmRlcmVkLlxyXG4gICAgICogVGhpcyBpcyBlaXRoZXIgZG9uZSBpbnN0YW50bHksIG9yIGFmdGVyIHRoZSB1c2VyIHRyaWdnZXJzIHRoaXMgYnkgdXNpbmcgdGhlIHRyaWdnZXJcclxuICAgICAqIGJ1dHRvbi4gVGhpcyBkcml2ZW4gYnkgdGhlIHZpc2lpYmlsaXR5IG9mIHRoZSB0cmlnZ2VyLCBzbyB0aGF0IHRoZSBDU1MgZHJpdmVzXHJcbiAgICAgKiB0aGUgYmVoYXZpb3VyLiBUaGlzIGNhbiBkaWZmZXIgcGVyIGJyZWFrcG9pbnQuXHJcbiAgICAgKlxyXG4gICAgICogVGhlcmUncyBhIGNvbmZpZ3VyYWJsZSBkZWxheSBmb3IgdGhlIGNsb3NlZCBzdGF0ZSwgc28gdGhhdCB0aGUgRE9NIGlzIG5vdCByZW1vdmVkXHJcbiAgICAgKiBiZWZvcmUgc29tZSBDU1MgYW5pbWF0aW9ucyBhcmUgZG9uZS5cclxuICAgICAqL1xyXG4gICAgaXNPcGVuJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgdGhlIGFjdGl2ZSBzdGF0ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBmYWNldCBsaXN0IGlzIGFjdGl2YXRlZC4gQWN0aXZhdGlvblxyXG4gICAgICogaXMgcmVsYXRlZCB0byB0aGUgY3NzLCBzbyB0aGF0IGEgYW5pbWF0aW9uIG9yIHRyYW5zaXRpb24gY2FuIHZpc3VhbGl6ZSBvcGVuaW5nL2Nsb3NpbmdcclxuICAgICAqIHRoZSBsaXN0IChpLmUuIGRpYWxvZykuXHJcbiAgICAgKi9cclxuICAgIGlzQWN0aXZlJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIGNvbnN0cnVjdG9yKGJyZWFrcG9pbnRTZXJ2aWNlOiBCcmVha3BvaW50U2VydmljZSk7XHJcbiAgICBsYXVuY2goKTogdm9pZDtcclxuICAgIGNsb3NlKCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBmYWNldCBuYXZpZ2F0aW9uIHNob3VsZCBiZSBvcGVuIGV4cGxpY2l0ZWx5IGJ5IGEgdHJpZ2dlci5cclxuICAgICAqIFRoaXMgaXMgZnVsbHkgY29udHJvbGxlZCBieSBDU1MsIHdoZXJlIHRoZSB0cmlnZ2VyIGJ1dHRvbiBjYW4gYmUgaGlkZGVuXHJcbiAgICAgKiAoZGlzcGxheTpub25lKSBmb3IgY2VydGFpbiBzY3JlZW4gc2l6ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldCBoYXNUcmlnZ2VyKCk6IGJvb2xlYW47XHJcbn1cclxuIl19