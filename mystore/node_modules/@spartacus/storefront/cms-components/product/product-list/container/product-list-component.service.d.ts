import { ActivatedRoute, Router } from '@angular/router';
import { ActivatedRouterStateSnapshot, CurrencyService, LanguageService, ProductSearchPage, ProductSearchService, RoutingService } from '@spartacus/core';
import { Observable, Subscription } from 'rxjs';
import { ProductListRouteParams, SearchCriteria } from './product-list.model';
/**
 * The `ProductListComponentService` is used to search products. The service is used
 * on the Product Listing Page, for listing products and the facet navigation.
 *
 * The service exposes the product search results based on the category and search
 * route parameters. The route parameters are used to query products by the help of
 * the `ProductSearchService`.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ProductListComponentService {
    protected productSearchService: ProductSearchService;
    protected routing: RoutingService;
    protected activatedRoute: ActivatedRoute;
    protected currencyService: CurrencyService;
    protected languageService: LanguageService;
    protected router: Router;
    /**
     * @deprecated will be removed in version 3.0 as this is the
     *   subscription is longer used
     */
    protected sub: Subscription;
    protected defaultPageSize: number;
    protected readonly RELEVANCE_ALLCATEGORIES = ":relevance:allCategories:";
    constructor(productSearchService: ProductSearchService, routing: RoutingService, activatedRoute: ActivatedRoute, currencyService: CurrencyService, languageService: LanguageService, router: Router);
    /**
     * Emits the search results for the current search query.
     *
     * The `searchResults$` is _not_ concerned with querying, it only observes the
     * `productSearchService.getResults()`
     */
    protected searchResults$: Observable<ProductSearchPage>;
    /**
     * Observes the route and performs a search on each route change.
     *
     * Context changes, such as language and currencies are also taken
     * into account, so that the search is performed again.
     */
    protected searchByRouting$: Observable<ActivatedRouterStateSnapshot>;
    /**
     * This stream is used for the Product Listing and Product Facets.
     *
     * It not only emits search results, but also performs a search on every change
     * of the route (i.e. route params or query params).
     *
     * When a user leaves the PLP route, the PLP component unsubscribes from this stream
     * so no longer the search is performed on route change.
     */
    readonly model$: Observable<ProductSearchPage>;
    /**
     * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.
     *
     * This search route configuration is not yet configurable
     * (see https://github.com/SAP/spartacus/issues/7191).
     */
    protected getCriteriaFromRoute(routeParams: ProductListRouteParams, queryParams: SearchCriteria): SearchCriteria;
    /**
     * Resolves the search query from the given `ProductListRouteParams`.
     */
    protected getQueryFromRouteParams({ query, categoryCode, brandCode, }: ProductListRouteParams): string;
    /**
     * Performs a search based on the given search criteria.
     *
     * The search is delegated to the `ProductSearchService`.
     */
    protected search(criteria: SearchCriteria): void;
    /**
     * Get items from a given page without using navigation
     */
    getPageItems(pageNumber: number): void;
    /**
     * Sort the search results by the given sort code.
     */
    sort(sortCode: string): void;
    /**
     * Routes to the next product listing page, using the given `queryParams`. The
     * `queryParams` support sorting, pagination and querying.
     *
     * The `queryParams` are delegated to the Angular router `NavigationExtras`.
     */
    protected route(queryParams: SearchCriteria): void;
    /**
     * The site context is used to update the search query in case of a
     * changing context. The context will typically influence the search data.
     *
     * We keep this private for now, as we're likely refactoring this in the next
     * major version.
     */
    private get siteContext();
    /**
     * @deprecated will be dropped in version 3.0 as it's no longer in use
     */
    setQuery(query: string): void;
    /**
     * @deprecated will be dropped in version 3.0 as it's no longer in use
     */
    viewPage(pageNumber: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProductListComponentService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1saXN0LWNvbXBvbmVudC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInByb2R1Y3QtbGlzdC1jb21wb25lbnQuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVyU3RhdGVTbmFwc2hvdCwgQ3VycmVuY3lTZXJ2aWNlLCBMYW5ndWFnZVNlcnZpY2UsIFByb2R1Y3RTZWFyY2hQYWdlLCBQcm9kdWN0U2VhcmNoU2VydmljZSwgUm91dGluZ1NlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUHJvZHVjdExpc3RSb3V0ZVBhcmFtcywgU2VhcmNoQ3JpdGVyaWEgfSBmcm9tICcuL3Byb2R1Y3QtbGlzdC5tb2RlbCc7XHJcbi8qKlxyXG4gKiBUaGUgYFByb2R1Y3RMaXN0Q29tcG9uZW50U2VydmljZWAgaXMgdXNlZCB0byBzZWFyY2ggcHJvZHVjdHMuIFRoZSBzZXJ2aWNlIGlzIHVzZWRcclxuICogb24gdGhlIFByb2R1Y3QgTGlzdGluZyBQYWdlLCBmb3IgbGlzdGluZyBwcm9kdWN0cyBhbmQgdGhlIGZhY2V0IG5hdmlnYXRpb24uXHJcbiAqXHJcbiAqIFRoZSBzZXJ2aWNlIGV4cG9zZXMgdGhlIHByb2R1Y3Qgc2VhcmNoIHJlc3VsdHMgYmFzZWQgb24gdGhlIGNhdGVnb3J5IGFuZCBzZWFyY2hcclxuICogcm91dGUgcGFyYW1ldGVycy4gVGhlIHJvdXRlIHBhcmFtZXRlcnMgYXJlIHVzZWQgdG8gcXVlcnkgcHJvZHVjdHMgYnkgdGhlIGhlbHAgb2ZcclxuICogdGhlIGBQcm9kdWN0U2VhcmNoU2VydmljZWAuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQcm9kdWN0TGlzdENvbXBvbmVudFNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHByb2R1Y3RTZWFyY2hTZXJ2aWNlOiBQcm9kdWN0U2VhcmNoU2VydmljZTtcclxuICAgIHByb3RlY3RlZCByb3V0aW5nOiBSb3V0aW5nU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGU7XHJcbiAgICBwcm90ZWN0ZWQgY3VycmVuY3lTZXJ2aWNlOiBDdXJyZW5jeVNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgbGFuZ3VhZ2VTZXJ2aWNlOiBMYW5ndWFnZVNlcnZpY2U7XHJcbiAgICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDMuMCBhcyB0aGlzIGlzIHRoZVxyXG4gICAgICogICBzdWJzY3JpcHRpb24gaXMgbG9uZ2VyIHVzZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHN1YjogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRQYWdlU2l6ZTogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IFJFTEVWQU5DRV9BTExDQVRFR09SSUVTID0gXCI6cmVsZXZhbmNlOmFsbENhdGVnb3JpZXM6XCI7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9kdWN0U2VhcmNoU2VydmljZTogUHJvZHVjdFNlYXJjaFNlcnZpY2UsIHJvdXRpbmc6IFJvdXRpbmdTZXJ2aWNlLCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsIGN1cnJlbmN5U2VydmljZTogQ3VycmVuY3lTZXJ2aWNlLCBsYW5ndWFnZVNlcnZpY2U6IExhbmd1YWdlU2VydmljZSwgcm91dGVyOiBSb3V0ZXIpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0cyB0aGUgc2VhcmNoIHJlc3VsdHMgZm9yIHRoZSBjdXJyZW50IHNlYXJjaCBxdWVyeS5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgYHNlYXJjaFJlc3VsdHMkYCBpcyBfbm90XyBjb25jZXJuZWQgd2l0aCBxdWVyeWluZywgaXQgb25seSBvYnNlcnZlcyB0aGVcclxuICAgICAqIGBwcm9kdWN0U2VhcmNoU2VydmljZS5nZXRSZXN1bHRzKClgXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBzZWFyY2hSZXN1bHRzJDogT2JzZXJ2YWJsZTxQcm9kdWN0U2VhcmNoUGFnZT47XHJcbiAgICAvKipcclxuICAgICAqIE9ic2VydmVzIHRoZSByb3V0ZSBhbmQgcGVyZm9ybXMgYSBzZWFyY2ggb24gZWFjaCByb3V0ZSBjaGFuZ2UuXHJcbiAgICAgKlxyXG4gICAgICogQ29udGV4dCBjaGFuZ2VzLCBzdWNoIGFzIGxhbmd1YWdlIGFuZCBjdXJyZW5jaWVzIGFyZSBhbHNvIHRha2VuXHJcbiAgICAgKiBpbnRvIGFjY291bnQsIHNvIHRoYXQgdGhlIHNlYXJjaCBpcyBwZXJmb3JtZWQgYWdhaW4uXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBzZWFyY2hCeVJvdXRpbmckOiBPYnNlcnZhYmxlPEFjdGl2YXRlZFJvdXRlclN0YXRlU25hcHNob3Q+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHN0cmVhbSBpcyB1c2VkIGZvciB0aGUgUHJvZHVjdCBMaXN0aW5nIGFuZCBQcm9kdWN0IEZhY2V0cy5cclxuICAgICAqXHJcbiAgICAgKiBJdCBub3Qgb25seSBlbWl0cyBzZWFyY2ggcmVzdWx0cywgYnV0IGFsc28gcGVyZm9ybXMgYSBzZWFyY2ggb24gZXZlcnkgY2hhbmdlXHJcbiAgICAgKiBvZiB0aGUgcm91dGUgKGkuZS4gcm91dGUgcGFyYW1zIG9yIHF1ZXJ5IHBhcmFtcykuXHJcbiAgICAgKlxyXG4gICAgICogV2hlbiBhIHVzZXIgbGVhdmVzIHRoZSBQTFAgcm91dGUsIHRoZSBQTFAgY29tcG9uZW50IHVuc3Vic2NyaWJlcyBmcm9tIHRoaXMgc3RyZWFtXHJcbiAgICAgKiBzbyBubyBsb25nZXIgdGhlIHNlYXJjaCBpcyBwZXJmb3JtZWQgb24gcm91dGUgY2hhbmdlLlxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBtb2RlbCQ6IE9ic2VydmFibGU8UHJvZHVjdFNlYXJjaFBhZ2U+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBFeHBvc2UgdGhlIGBTZWFyY2hDcml0ZXJpYWAuIFRoZSBzZWFyY2ggY3JpdGVyaWEgYXJlIGRyaXZlbiBieSB0aGUgcm91dGUgcGFyYW1ldGVycy5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIHNlYXJjaCByb3V0ZSBjb25maWd1cmF0aW9uIGlzIG5vdCB5ZXQgY29uZmlndXJhYmxlXHJcbiAgICAgKiAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TQVAvc3BhcnRhY3VzL2lzc3Vlcy83MTkxKS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldENyaXRlcmlhRnJvbVJvdXRlKHJvdXRlUGFyYW1zOiBQcm9kdWN0TGlzdFJvdXRlUGFyYW1zLCBxdWVyeVBhcmFtczogU2VhcmNoQ3JpdGVyaWEpOiBTZWFyY2hDcml0ZXJpYTtcclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZXMgdGhlIHNlYXJjaCBxdWVyeSBmcm9tIHRoZSBnaXZlbiBgUHJvZHVjdExpc3RSb3V0ZVBhcmFtc2AuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRRdWVyeUZyb21Sb3V0ZVBhcmFtcyh7IHF1ZXJ5LCBjYXRlZ29yeUNvZGUsIGJyYW5kQ29kZSwgfTogUHJvZHVjdExpc3RSb3V0ZVBhcmFtcyk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBzZWFyY2ggYmFzZWQgb24gdGhlIGdpdmVuIHNlYXJjaCBjcml0ZXJpYS5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgc2VhcmNoIGlzIGRlbGVnYXRlZCB0byB0aGUgYFByb2R1Y3RTZWFyY2hTZXJ2aWNlYC5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHNlYXJjaChjcml0ZXJpYTogU2VhcmNoQ3JpdGVyaWEpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgaXRlbXMgZnJvbSBhIGdpdmVuIHBhZ2Ugd2l0aG91dCB1c2luZyBuYXZpZ2F0aW9uXHJcbiAgICAgKi9cclxuICAgIGdldFBhZ2VJdGVtcyhwYWdlTnVtYmVyOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0IHRoZSBzZWFyY2ggcmVzdWx0cyBieSB0aGUgZ2l2ZW4gc29ydCBjb2RlLlxyXG4gICAgICovXHJcbiAgICBzb3J0KHNvcnRDb2RlOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSb3V0ZXMgdG8gdGhlIG5leHQgcHJvZHVjdCBsaXN0aW5nIHBhZ2UsIHVzaW5nIHRoZSBnaXZlbiBgcXVlcnlQYXJhbXNgLiBUaGVcclxuICAgICAqIGBxdWVyeVBhcmFtc2Agc3VwcG9ydCBzb3J0aW5nLCBwYWdpbmF0aW9uIGFuZCBxdWVyeWluZy5cclxuICAgICAqXHJcbiAgICAgKiBUaGUgYHF1ZXJ5UGFyYW1zYCBhcmUgZGVsZWdhdGVkIHRvIHRoZSBBbmd1bGFyIHJvdXRlciBgTmF2aWdhdGlvbkV4dHJhc2AuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByb3V0ZShxdWVyeVBhcmFtczogU2VhcmNoQ3JpdGVyaWEpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2l0ZSBjb250ZXh0IGlzIHVzZWQgdG8gdXBkYXRlIHRoZSBzZWFyY2ggcXVlcnkgaW4gY2FzZSBvZiBhXHJcbiAgICAgKiBjaGFuZ2luZyBjb250ZXh0LiBUaGUgY29udGV4dCB3aWxsIHR5cGljYWxseSBpbmZsdWVuY2UgdGhlIHNlYXJjaCBkYXRhLlxyXG4gICAgICpcclxuICAgICAqIFdlIGtlZXAgdGhpcyBwcml2YXRlIGZvciBub3csIGFzIHdlJ3JlIGxpa2VseSByZWZhY3RvcmluZyB0aGlzIGluIHRoZSBuZXh0XHJcbiAgICAgKiBtYWpvciB2ZXJzaW9uLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldCBzaXRlQ29udGV4dCgpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB3aWxsIGJlIGRyb3BwZWQgaW4gdmVyc2lvbiAzLjAgYXMgaXQncyBubyBsb25nZXIgaW4gdXNlXHJcbiAgICAgKi9cclxuICAgIHNldFF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB3aWxsIGJlIGRyb3BwZWQgaW4gdmVyc2lvbiAzLjAgYXMgaXQncyBubyBsb25nZXIgaW4gdXNlXHJcbiAgICAgKi9cclxuICAgIHZpZXdQYWdlKHBhZ2VOdW1iZXI6IG51bWJlcik6IHZvaWQ7XHJcbn1cclxuIl19