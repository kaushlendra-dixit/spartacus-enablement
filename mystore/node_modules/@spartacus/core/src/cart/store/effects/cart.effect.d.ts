import { Actions } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { CartConnector } from '../../connectors/cart/cart.connector';
import { CartActions } from '../actions/index';
import { StateWithMultiCart } from '../multi-cart-state';
import * as ɵngcc0 from '@angular/core';
export declare class CartEffects {
    private actions$;
    private cartConnector;
    private store;
    private contextChange$;
    loadCart$: Observable<CartActions.LoadCartFail | CartActions.LoadCartSuccess | CartActions.RemoveCart>;
    createCart$: Observable<CartActions.MergeCartSuccess | CartActions.CreateCartSuccess | CartActions.CreateCartFail | CartActions.SetTempCart>;
    mergeCart$: Observable<CartActions.CreateCart>;
    refresh$: Observable<CartActions.LoadCart | CartActions.CartProcessesDecrement>;
    refreshWithoutProcesses$: Observable<CartActions.LoadCart>;
    resetCartDetailsOnSiteContextChange$: Observable<CartActions.ResetCartDetails>;
    addEmail$: Observable<CartActions.AddEmailToCartSuccess | CartActions.AddEmailToCartFail | CartActions.LoadCart>;
    deleteCart$: Observable<CartActions.DeleteCartSuccess | CartActions.DeleteCartFail | CartActions.LoadCart>;
    constructor(actions$: Actions, cartConnector: CartConnector, store: Store<StateWithMultiCart>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartEffects, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CartEffects>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC5lZmZlY3QuZC50cyIsInNvdXJjZXMiOlsiY2FydC5lZmZlY3QuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XHJcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENhcnRDb25uZWN0b3IgfSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL2NhcnQvY2FydC5jb25uZWN0b3InO1xyXG5pbXBvcnQgeyBDYXJ0QWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xyXG5pbXBvcnQgeyBTdGF0ZVdpdGhNdWx0aUNhcnQgfSBmcm9tICcuLi9tdWx0aS1jYXJ0LXN0YXRlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FydEVmZmVjdHMge1xyXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDtcclxuICAgIHByaXZhdGUgY2FydENvbm5lY3RvcjtcclxuICAgIHByaXZhdGUgc3RvcmU7XHJcbiAgICBwcml2YXRlIGNvbnRleHRDaGFuZ2UkO1xyXG4gICAgbG9hZENhcnQkOiBPYnNlcnZhYmxlPENhcnRBY3Rpb25zLkxvYWRDYXJ0RmFpbCB8IENhcnRBY3Rpb25zLkxvYWRDYXJ0U3VjY2VzcyB8IENhcnRBY3Rpb25zLlJlbW92ZUNhcnQ+O1xyXG4gICAgY3JlYXRlQ2FydCQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuTWVyZ2VDYXJ0U3VjY2VzcyB8IENhcnRBY3Rpb25zLkNyZWF0ZUNhcnRTdWNjZXNzIHwgQ2FydEFjdGlvbnMuQ3JlYXRlQ2FydEZhaWwgfCBDYXJ0QWN0aW9ucy5TZXRUZW1wQ2FydD47XHJcbiAgICBtZXJnZUNhcnQkOiBPYnNlcnZhYmxlPENhcnRBY3Rpb25zLkNyZWF0ZUNhcnQ+O1xyXG4gICAgcmVmcmVzaCQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuTG9hZENhcnQgfCBDYXJ0QWN0aW9ucy5DYXJ0UHJvY2Vzc2VzRGVjcmVtZW50PjtcclxuICAgIHJlZnJlc2hXaXRob3V0UHJvY2Vzc2VzJDogT2JzZXJ2YWJsZTxDYXJ0QWN0aW9ucy5Mb2FkQ2FydD47XHJcbiAgICByZXNldENhcnREZXRhaWxzT25TaXRlQ29udGV4dENoYW5nZSQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuUmVzZXRDYXJ0RGV0YWlscz47XHJcbiAgICBhZGRFbWFpbCQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuQWRkRW1haWxUb0NhcnRTdWNjZXNzIHwgQ2FydEFjdGlvbnMuQWRkRW1haWxUb0NhcnRGYWlsIHwgQ2FydEFjdGlvbnMuTG9hZENhcnQ+O1xyXG4gICAgZGVsZXRlQ2FydCQ6IE9ic2VydmFibGU8Q2FydEFjdGlvbnMuRGVsZXRlQ2FydFN1Y2Nlc3MgfCBDYXJ0QWN0aW9ucy5EZWxldGVDYXJ0RmFpbCB8IENhcnRBY3Rpb25zLkxvYWRDYXJ0PjtcclxuICAgIGNvbnN0cnVjdG9yKGFjdGlvbnMkOiBBY3Rpb25zLCBjYXJ0Q29ubmVjdG9yOiBDYXJ0Q29ubmVjdG9yLCBzdG9yZTogU3RvcmU8U3RhdGVXaXRoTXVsdGlDYXJ0Pik7XHJcbn1cclxuIl19