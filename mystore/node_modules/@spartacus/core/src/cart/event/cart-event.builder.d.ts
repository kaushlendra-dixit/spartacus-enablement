import { ActionsSubject } from '@ngrx/store';
import { Observable } from 'rxjs';
import { EventService } from '../../event/event.service';
import { ActionToEventMapping } from '../../state/event/action-to-event-mapping';
import { ActiveCartService } from '../facade/active-cart.service';
/**
 * Registers events for the active cart
 */
import * as ɵngcc0 from '@angular/core';
export declare class CartEventBuilder {
    protected actionsSubject: ActionsSubject;
    protected event: EventService;
    protected activeCartService: ActiveCartService;
    constructor(actionsSubject: ActionsSubject, event: EventService, activeCartService: ActiveCartService);
    /**
     * Registers events for the active cart
     */
    protected register(): void;
    /**
     * Register events for adding entry to the active cart
     */
    protected registerAddEntry(): void;
    /**
     * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.
     *
     * @param mapping mapping declaration - from `action` string type to `event` class type
     *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).
     */
    protected registerMapped<T>(mapping: ActionToEventMapping<T>): () => void;
    /**
     * Returns a stream of actions only of a given type(s)
     *
     * @param actionType type(s) of actions
     */
    protected getAction(actionType: string | string[]): Observable<{
        type: string;
        payload?: any;
    }>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CartEventBuilder, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1ldmVudC5idWlsZGVyLmQudHMiLCJzb3VyY2VzIjpbImNhcnQtZXZlbnQuYnVpbGRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gJy4uLy4uL2V2ZW50L2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBY3Rpb25Ub0V2ZW50TWFwcGluZyB9IGZyb20gJy4uLy4uL3N0YXRlL2V2ZW50L2FjdGlvbi10by1ldmVudC1tYXBwaW5nJztcclxuaW1wb3J0IHsgQWN0aXZlQ2FydFNlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvYWN0aXZlLWNhcnQuc2VydmljZSc7XHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgZXZlbnRzIGZvciB0aGUgYWN0aXZlIGNhcnRcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcnRFdmVudEJ1aWxkZXIge1xyXG4gICAgcHJvdGVjdGVkIGFjdGlvbnNTdWJqZWN0OiBBY3Rpb25zU3ViamVjdDtcclxuICAgIHByb3RlY3RlZCBldmVudDogRXZlbnRTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGFjdGl2ZUNhcnRTZXJ2aWNlOiBBY3RpdmVDYXJ0U2VydmljZTtcclxuICAgIGNvbnN0cnVjdG9yKGFjdGlvbnNTdWJqZWN0OiBBY3Rpb25zU3ViamVjdCwgZXZlbnQ6IEV2ZW50U2VydmljZSwgYWN0aXZlQ2FydFNlcnZpY2U6IEFjdGl2ZUNhcnRTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGV2ZW50cyBmb3IgdGhlIGFjdGl2ZSBjYXJ0XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZWdpc3RlcigpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBldmVudHMgZm9yIGFkZGluZyBlbnRyeSB0byB0aGUgYWN0aXZlIGNhcnRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlZ2lzdGVyQWRkRW50cnkoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJzIGEgc3RyZWFtIG9mIHRhcmdldCBldmVudHMgbWFwcGVkIGZyb20gdGhlIHNvdXJjZSBhY3Rpb25zIHRoYXQgY29udGFpbiB0aGUgY2FydCBpZCBlcXVhbCB0byB0aGUgYWN0aXZlIGNhcnQgaWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG1hcHBpbmcgbWFwcGluZyBkZWNsYXJhdGlvbiAtIGZyb20gYGFjdGlvbmAgc3RyaW5nIHR5cGUgdG8gYGV2ZW50YCBjbGFzcyB0eXBlXHJcbiAgICAgKiAgIChhbiB3aXRoIG9wdGlvbmFsIGBmYWN0b3J5YCBmdW5jdGlvbiAtIGJ5IGRlZmF1bHQgYGFjdGlvbi5wYXlsb2FkYCB3aWxsIGJlIGFzc2lnbmVkIHRvIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBldmVudCBpbnN0YW5jZSkuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZWdpc3Rlck1hcHBlZDxUPihtYXBwaW5nOiBBY3Rpb25Ub0V2ZW50TWFwcGluZzxUPik6ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdHJlYW0gb2YgYWN0aW9ucyBvbmx5IG9mIGEgZ2l2ZW4gdHlwZShzKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhY3Rpb25UeXBlIHR5cGUocykgb2YgYWN0aW9uc1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0QWN0aW9uKGFjdGlvblR5cGU6IHN0cmluZyB8IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTx7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nO1xyXG4gICAgICAgIHBheWxvYWQ/OiBhbnk7XHJcbiAgICB9PjtcclxufVxyXG4iXX0=