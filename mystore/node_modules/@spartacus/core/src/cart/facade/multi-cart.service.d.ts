import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { Cart } from '../../model/cart.model';
import { OrderEntry } from '../../model/order.model';
import { ProcessesLoaderState } from '../../state/utils/processes-loader/processes-loader-state';
import { StateWithMultiCart } from '../store/multi-cart-state';
import * as ɵngcc0 from '@angular/core';
export declare class MultiCartService {
    protected store: Store<StateWithMultiCart>;
    constructor(store: Store<StateWithMultiCart>);
    /**
     * Returns cart from store as an observable
     *
     * @param cartId
     */
    getCart(cartId: string): Observable<Cart>;
    /**
     * Returns cart entity from store (cart with loading, error, success flags) as an observable
     *
     * @param cartId
     */
    getCartEntity(cartId: string): Observable<ProcessesLoaderState<Cart>>;
    /**
     * Returns true when there are no operations on that in progress and it is not currently loading
     *
     * @param cartId
     */
    isStable(cartId: string): Observable<boolean>;
    /**
     * Simple random temp cart id generator
     */
    private generateTempCartId;
    /**
     * Create or merge cart
     *
     * @param params Object with userId, oldCartId, toMergeCartGuid and extraData
     */
    createCart({ userId, oldCartId, toMergeCartGuid, extraData, }: {
        userId: string;
        oldCartId?: string;
        toMergeCartGuid?: string;
        extraData?: {
            active?: boolean;
        };
    }): Observable<ProcessesLoaderState<Cart>>;
    /**
     * Merge provided cart to current user cart
     *
     * @param params Object with userId, cartId and extraData
     */
    mergeToCurrentCart({ userId, cartId, extraData, }: {
        userId: string;
        cartId: string;
        extraData?: {
            active?: boolean;
        };
    }): void;
    /**
     * Load cart
     *
     * @param params Object with userId, cartId and extraData
     */
    loadCart({ cartId, userId, extraData, }: {
        cartId: string;
        userId: string;
        extraData?: any;
    }): void;
    /**
     * Get cart entries as an observable
     * @param cartId
     */
    getEntries(cartId: string): Observable<OrderEntry[]>;
    /**
     * Add entry to cart
     *
     * @param userId
     * @param cartId
     * @param productCode
     * @param quantity
     */
    addEntry(userId: string, cartId: string, productCode: string, quantity: number): void;
    /**
     * Add multiple entries to cart
     *
     * @param userId
     * @param cartId
     * @param products Array with items (productCode and quantity)
     */
    addEntries(userId: string, cartId: string, products: Array<{
        productCode: string;
        quantity: number;
    }>): void;
    /**
     * Remove entry from cart
     *
     * @param userId
     * @param cartId
     * @param entryNumber
     */
    removeEntry(userId: string, cartId: string, entryNumber: number): void;
    /**
     * Update entry in cart. For quantity = 0 it removes entry
     *
     * @param userId
     * @param cartId
     * @param entryNumber
     * @param quantity
     */
    updateEntry(userId: string, cartId: string, entryNumber: number, quantity: number): void;
    /**
     * Get specific entry from cart
     *
     * @param cartId
     * @param productCode
     */
    getEntry(cartId: string, productCode: string): Observable<OrderEntry | null>;
    /**
     * Assign email to the cart
     *
     * @param cartId
     * @param userId
     * @param email
     */
    assignEmail(cartId: string, userId: string, email: string): void;
    /**
     * Delete cart
     *
     * @param cartId
     * @param userId
     */
    deleteCart(cartId: string, userId: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiCartService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm11bHRpLWNhcnQuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgT3JkZXJFbnRyeSB9IGZyb20gJy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcclxuaW1wb3J0IHsgUHJvY2Vzc2VzTG9hZGVyU3RhdGUgfSBmcm9tICcuLi8uLi9zdGF0ZS91dGlscy9wcm9jZXNzZXMtbG9hZGVyL3Byb2Nlc3Nlcy1sb2FkZXItc3RhdGUnO1xyXG5pbXBvcnQgeyBTdGF0ZVdpdGhNdWx0aUNhcnQgfSBmcm9tICcuLi9zdG9yZS9tdWx0aS1jYXJ0LXN0YXRlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTXVsdGlDYXJ0U2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFN0YXRlV2l0aE11bHRpQ2FydD47XHJcbiAgICBjb25zdHJ1Y3RvcihzdG9yZTogU3RvcmU8U3RhdGVXaXRoTXVsdGlDYXJ0Pik7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY2FydCBmcm9tIHN0b3JlIGFzIGFuIG9ic2VydmFibGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FydElkXHJcbiAgICAgKi9cclxuICAgIGdldENhcnQoY2FydElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPENhcnQ+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGNhcnQgZW50aXR5IGZyb20gc3RvcmUgKGNhcnQgd2l0aCBsb2FkaW5nLCBlcnJvciwgc3VjY2VzcyBmbGFncykgYXMgYW4gb2JzZXJ2YWJsZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjYXJ0SWRcclxuICAgICAqL1xyXG4gICAgZ2V0Q2FydEVudGl0eShjYXJ0SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvY2Vzc2VzTG9hZGVyU3RhdGU8Q2FydD4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgd2hlbiB0aGVyZSBhcmUgbm8gb3BlcmF0aW9ucyBvbiB0aGF0IGluIHByb2dyZXNzIGFuZCBpdCBpcyBub3QgY3VycmVudGx5IGxvYWRpbmdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FydElkXHJcbiAgICAgKi9cclxuICAgIGlzU3RhYmxlKGNhcnRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogU2ltcGxlIHJhbmRvbSB0ZW1wIGNhcnQgaWQgZ2VuZXJhdG9yXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVUZW1wQ2FydElkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgb3IgbWVyZ2UgY2FydFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgT2JqZWN0IHdpdGggdXNlcklkLCBvbGRDYXJ0SWQsIHRvTWVyZ2VDYXJ0R3VpZCBhbmQgZXh0cmFEYXRhXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNhcnQoeyB1c2VySWQsIG9sZENhcnRJZCwgdG9NZXJnZUNhcnRHdWlkLCBleHRyYURhdGEsIH06IHtcclxuICAgICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgICBvbGRDYXJ0SWQ/OiBzdHJpbmc7XHJcbiAgICAgICAgdG9NZXJnZUNhcnRHdWlkPzogc3RyaW5nO1xyXG4gICAgICAgIGV4dHJhRGF0YT86IHtcclxuICAgICAgICAgICAgYWN0aXZlPzogYm9vbGVhbjtcclxuICAgICAgICB9O1xyXG4gICAgfSk6IE9ic2VydmFibGU8UHJvY2Vzc2VzTG9hZGVyU3RhdGU8Q2FydD4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBNZXJnZSBwcm92aWRlZCBjYXJ0IHRvIGN1cnJlbnQgdXNlciBjYXJ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhcmFtcyBPYmplY3Qgd2l0aCB1c2VySWQsIGNhcnRJZCBhbmQgZXh0cmFEYXRhXHJcbiAgICAgKi9cclxuICAgIG1lcmdlVG9DdXJyZW50Q2FydCh7IHVzZXJJZCwgY2FydElkLCBleHRyYURhdGEsIH06IHtcclxuICAgICAgICB1c2VySWQ6IHN0cmluZztcclxuICAgICAgICBjYXJ0SWQ6IHN0cmluZztcclxuICAgICAgICBleHRyYURhdGE/OiB7XHJcbiAgICAgICAgICAgIGFjdGl2ZT86IGJvb2xlYW47XHJcbiAgICAgICAgfTtcclxuICAgIH0pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkIGNhcnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIE9iamVjdCB3aXRoIHVzZXJJZCwgY2FydElkIGFuZCBleHRyYURhdGFcclxuICAgICAqL1xyXG4gICAgbG9hZENhcnQoeyBjYXJ0SWQsIHVzZXJJZCwgZXh0cmFEYXRhLCB9OiB7XHJcbiAgICAgICAgY2FydElkOiBzdHJpbmc7XHJcbiAgICAgICAgdXNlcklkOiBzdHJpbmc7XHJcbiAgICAgICAgZXh0cmFEYXRhPzogYW55O1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEdldCBjYXJ0IGVudHJpZXMgYXMgYW4gb2JzZXJ2YWJsZVxyXG4gICAgICogQHBhcmFtIGNhcnRJZFxyXG4gICAgICovXHJcbiAgICBnZXRFbnRyaWVzKGNhcnRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxPcmRlckVudHJ5W10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgZW50cnkgdG8gY2FydFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1c2VySWRcclxuICAgICAqIEBwYXJhbSBjYXJ0SWRcclxuICAgICAqIEBwYXJhbSBwcm9kdWN0Q29kZVxyXG4gICAgICogQHBhcmFtIHF1YW50aXR5XHJcbiAgICAgKi9cclxuICAgIGFkZEVudHJ5KHVzZXJJZDogc3RyaW5nLCBjYXJ0SWQ6IHN0cmluZywgcHJvZHVjdENvZGU6IHN0cmluZywgcXVhbnRpdHk6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBtdWx0aXBsZSBlbnRyaWVzIHRvIGNhcnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXNlcklkXHJcbiAgICAgKiBAcGFyYW0gY2FydElkXHJcbiAgICAgKiBAcGFyYW0gcHJvZHVjdHMgQXJyYXkgd2l0aCBpdGVtcyAocHJvZHVjdENvZGUgYW5kIHF1YW50aXR5KVxyXG4gICAgICovXHJcbiAgICBhZGRFbnRyaWVzKHVzZXJJZDogc3RyaW5nLCBjYXJ0SWQ6IHN0cmluZywgcHJvZHVjdHM6IEFycmF5PHtcclxuICAgICAgICBwcm9kdWN0Q29kZTogc3RyaW5nO1xyXG4gICAgICAgIHF1YW50aXR5OiBudW1iZXI7XHJcbiAgICB9Pik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBlbnRyeSBmcm9tIGNhcnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdXNlcklkXHJcbiAgICAgKiBAcGFyYW0gY2FydElkXHJcbiAgICAgKiBAcGFyYW0gZW50cnlOdW1iZXJcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlRW50cnkodXNlcklkOiBzdHJpbmcsIGNhcnRJZDogc3RyaW5nLCBlbnRyeU51bWJlcjogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIGVudHJ5IGluIGNhcnQuIEZvciBxdWFudGl0eSA9IDAgaXQgcmVtb3ZlcyBlbnRyeVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1c2VySWRcclxuICAgICAqIEBwYXJhbSBjYXJ0SWRcclxuICAgICAqIEBwYXJhbSBlbnRyeU51bWJlclxyXG4gICAgICogQHBhcmFtIHF1YW50aXR5XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUVudHJ5KHVzZXJJZDogc3RyaW5nLCBjYXJ0SWQ6IHN0cmluZywgZW50cnlOdW1iZXI6IG51bWJlciwgcXVhbnRpdHk6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEdldCBzcGVjaWZpYyBlbnRyeSBmcm9tIGNhcnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FydElkXHJcbiAgICAgKiBAcGFyYW0gcHJvZHVjdENvZGVcclxuICAgICAqL1xyXG4gICAgZ2V0RW50cnkoY2FydElkOiBzdHJpbmcsIHByb2R1Y3RDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE9yZGVyRW50cnkgfCBudWxsPjtcclxuICAgIC8qKlxyXG4gICAgICogQXNzaWduIGVtYWlsIHRvIHRoZSBjYXJ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhcnRJZFxyXG4gICAgICogQHBhcmFtIHVzZXJJZFxyXG4gICAgICogQHBhcmFtIGVtYWlsXHJcbiAgICAgKi9cclxuICAgIGFzc2lnbkVtYWlsKGNhcnRJZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZywgZW1haWw6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERlbGV0ZSBjYXJ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhcnRJZFxyXG4gICAgICogQHBhcmFtIHVzZXJJZFxyXG4gICAgICovXHJcbiAgICBkZWxldGVDYXJ0KGNhcnRJZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZyk6IHZvaWQ7XHJcbn1cclxuIl19