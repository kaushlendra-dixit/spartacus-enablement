import { OnDestroy } from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { AuthService } from '../../auth/index';
import { Cart } from '../../model/cart.model';
import { User } from '../../model/misc.model';
import { OrderEntry } from '../../model/order.model';
import { StateWithMultiCart } from '../store/multi-cart-state';
import { MultiCartService } from './multi-cart.service';
import * as ɵngcc0 from '@angular/core';
export declare class ActiveCartService implements OnDestroy {
    protected store: Store<StateWithMultiCart>;
    protected authService: AuthService;
    protected multiCartService: MultiCartService;
    private readonly PREVIOUS_USER_ID_INITIAL_VALUE;
    private previousUserId;
    private activeCart$;
    protected subscription: Subscription;
    private userId;
    private cartId;
    private cartUser;
    private activeCartId$;
    private cartSelector$;
    constructor(store: Store<StateWithMultiCart>, authService: AuthService, multiCartService: MultiCartService);
    ngOnDestroy(): void;
    protected initActiveCart(): void;
    /**
     * Returns active cart
     */
    getActive(): Observable<Cart>;
    /**
     * Returns active cart id
     */
    getActiveCartId(): Observable<string>;
    /**
     * Returns cart entries
     */
    getEntries(): Observable<OrderEntry[]>;
    /**
     * Returns cart loading state
     */
    getLoading(): Observable<boolean>;
    /**
     * Returns true when cart is stable (not loading and not pending processes on cart)
     */
    isStable(): Observable<boolean>;
    private loadOrMerge;
    private load;
    private addEntriesGuestMerge;
    private requireLoadedCartForGuestMerge;
    private isCartCreating;
    private requireLoadedCart;
    /**
     * Add entry to active cart
     *
     * @param productCode
     * @param quantity
     */
    addEntry(productCode: string, quantity: number): void;
    /**
     * Remove entry
     *
     * @param entry
     */
    removeEntry(entry: OrderEntry): void;
    /**
     * Update entry
     *
     * @param entryNumber
     * @param quantity
     */
    updateEntry(entryNumber: number, quantity: number): void;
    /**
     * Returns cart entry
     *
     * @param productCode
     */
    getEntry(productCode: string): Observable<OrderEntry>;
    /**
     * Assign email to cart
     *
     * @param email
     */
    addEmail(email: string): void;
    /**
     * Get assigned user to cart
     */
    getAssignedUser(): Observable<User>;
    /**
     * Returns true for guest cart
     */
    isGuestCart(): boolean;
    /**
     * Add multiple entries to a cart
     *
     * @param cartEntries : list of entries to add (OrderEntry[])
     */
    addEntries(cartEntries: OrderEntry[]): void;
    private isEmail;
    /**
     * Temporary method to merge guest cart with user cart because of backend limitation
     * This is for an edge case
     */
    private guestCartMerge;
    private isEmpty;
    private isJustLoggedIn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ActiveCartService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWNhcnQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJhY3RpdmUtY2FydC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYXV0aC9pbmRleCc7XHJcbmltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL21vZGVsL21pc2MubW9kZWwnO1xyXG5pbXBvcnQgeyBPcmRlckVudHJ5IH0gZnJvbSAnLi4vLi4vbW9kZWwvb3JkZXIubW9kZWwnO1xyXG5pbXBvcnQgeyBTdGF0ZVdpdGhNdWx0aUNhcnQgfSBmcm9tICcuLi9zdG9yZS9tdWx0aS1jYXJ0LXN0YXRlJztcclxuaW1wb3J0IHsgTXVsdGlDYXJ0U2VydmljZSB9IGZyb20gJy4vbXVsdGktY2FydC5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWN0aXZlQ2FydFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJvdGVjdGVkIHN0b3JlOiBTdG9yZTxTdGF0ZVdpdGhNdWx0aUNhcnQ+O1xyXG4gICAgcHJvdGVjdGVkIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBtdWx0aUNhcnRTZXJ2aWNlOiBNdWx0aUNhcnRTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBQUkVWSU9VU19VU0VSX0lEX0lOSVRJQUxfVkFMVUU7XHJcbiAgICBwcml2YXRlIHByZXZpb3VzVXNlcklkO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVDYXJ0JDtcclxuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgdXNlcklkO1xyXG4gICAgcHJpdmF0ZSBjYXJ0SWQ7XHJcbiAgICBwcml2YXRlIGNhcnRVc2VyO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVDYXJ0SWQkO1xyXG4gICAgcHJpdmF0ZSBjYXJ0U2VsZWN0b3IkO1xyXG4gICAgY29uc3RydWN0b3Ioc3RvcmU6IFN0b3JlPFN0YXRlV2l0aE11bHRpQ2FydD4sIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSwgbXVsdGlDYXJ0U2VydmljZTogTXVsdGlDYXJ0U2VydmljZSk7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIGluaXRBY3RpdmVDYXJ0KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYWN0aXZlIGNhcnRcclxuICAgICAqL1xyXG4gICAgZ2V0QWN0aXZlKCk6IE9ic2VydmFibGU8Q2FydD47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYWN0aXZlIGNhcnQgaWRcclxuICAgICAqL1xyXG4gICAgZ2V0QWN0aXZlQ2FydElkKCk6IE9ic2VydmFibGU8c3RyaW5nPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBjYXJ0IGVudHJpZXNcclxuICAgICAqL1xyXG4gICAgZ2V0RW50cmllcygpOiBPYnNlcnZhYmxlPE9yZGVyRW50cnlbXT47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgY2FydCBsb2FkaW5nIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGdldExvYWRpbmcoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIHdoZW4gY2FydCBpcyBzdGFibGUgKG5vdCBsb2FkaW5nIGFuZCBub3QgcGVuZGluZyBwcm9jZXNzZXMgb24gY2FydClcclxuICAgICAqL1xyXG4gICAgaXNTdGFibGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIHByaXZhdGUgbG9hZE9yTWVyZ2U7XHJcbiAgICBwcml2YXRlIGxvYWQ7XHJcbiAgICBwcml2YXRlIGFkZEVudHJpZXNHdWVzdE1lcmdlO1xyXG4gICAgcHJpdmF0ZSByZXF1aXJlTG9hZGVkQ2FydEZvckd1ZXN0TWVyZ2U7XHJcbiAgICBwcml2YXRlIGlzQ2FydENyZWF0aW5nO1xyXG4gICAgcHJpdmF0ZSByZXF1aXJlTG9hZGVkQ2FydDtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGVudHJ5IHRvIGFjdGl2ZSBjYXJ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHByb2R1Y3RDb2RlXHJcbiAgICAgKiBAcGFyYW0gcXVhbnRpdHlcclxuICAgICAqL1xyXG4gICAgYWRkRW50cnkocHJvZHVjdENvZGU6IHN0cmluZywgcXVhbnRpdHk6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBlbnRyeVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbnRyeVxyXG4gICAgICovXHJcbiAgICByZW1vdmVFbnRyeShlbnRyeTogT3JkZXJFbnRyeSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBlbnRyeVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbnRyeU51bWJlclxyXG4gICAgICogQHBhcmFtIHF1YW50aXR5XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUVudHJ5KGVudHJ5TnVtYmVyOiBudW1iZXIsIHF1YW50aXR5OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGNhcnQgZW50cnlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcHJvZHVjdENvZGVcclxuICAgICAqL1xyXG4gICAgZ2V0RW50cnkocHJvZHVjdENvZGU6IHN0cmluZyk6IE9ic2VydmFibGU8T3JkZXJFbnRyeT47XHJcbiAgICAvKipcclxuICAgICAqIEFzc2lnbiBlbWFpbCB0byBjYXJ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVtYWlsXHJcbiAgICAgKi9cclxuICAgIGFkZEVtYWlsKGVtYWlsOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYXNzaWduZWQgdXNlciB0byBjYXJ0XHJcbiAgICAgKi9cclxuICAgIGdldEFzc2lnbmVkVXNlcigpOiBPYnNlcnZhYmxlPFVzZXI+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRydWUgZm9yIGd1ZXN0IGNhcnRcclxuICAgICAqL1xyXG4gICAgaXNHdWVzdENhcnQoKTogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIG11bHRpcGxlIGVudHJpZXMgdG8gYSBjYXJ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhcnRFbnRyaWVzIDogbGlzdCBvZiBlbnRyaWVzIHRvIGFkZCAoT3JkZXJFbnRyeVtdKVxyXG4gICAgICovXHJcbiAgICBhZGRFbnRyaWVzKGNhcnRFbnRyaWVzOiBPcmRlckVudHJ5W10pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBpc0VtYWlsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZW1wb3JhcnkgbWV0aG9kIHRvIG1lcmdlIGd1ZXN0IGNhcnQgd2l0aCB1c2VyIGNhcnQgYmVjYXVzZSBvZiBiYWNrZW5kIGxpbWl0YXRpb25cclxuICAgICAqIFRoaXMgaXMgZm9yIGFuIGVkZ2UgY2FzZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGd1ZXN0Q2FydE1lcmdlO1xyXG4gICAgcHJpdmF0ZSBpc0VtcHR5O1xyXG4gICAgcHJpdmF0ZSBpc0p1c3RMb2dnZWRJbjtcclxufVxyXG4iXX0=