import { InjectionToken, ModuleWithProviders } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare const TEST_CONFIG_COOKIE_NAME: InjectionToken<string>;
export declare function parseConfigJSON(config: string): any;
export declare function configFromCookieFactory(cookieName: string, platform: any, document: Document): any;
export interface TestConfigModuleOptions {
    cookie: string;
}
/**
 * Designed/intended to provide dynamic configuration for testing scenarios ONLY (e.g. e2e tests).
 *
 * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
 */
export declare class TestConfigModule {
    /**
     * Injects JSON config from the cookie of the given name.
     *
     * Be aware of the cookie limitations (4096 bytes).
     *
     * CAUTION: DON'T USE IT IN PRODUCTION! IT HASN'T BEEN REVIEWED FOR SECURITY ISSUES.
     */
    static forRoot(options: TestConfigModuleOptions): ModuleWithProviders<TestConfigModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TestConfigModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TestConfigModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1jb25maWcubW9kdWxlLmQudHMiLCJzb3VyY2VzIjpbInRlc3QtY29uZmlnLm1vZHVsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgVEVTVF9DT05GSUdfQ09PS0lFX05BTUU6IEluamVjdGlvblRva2VuPHN0cmluZz47XHJcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHBhcnNlQ29uZmlnSlNPTihjb25maWc6IHN0cmluZyk6IGFueTtcclxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gY29uZmlnRnJvbUNvb2tpZUZhY3RvcnkoY29va2llTmFtZTogc3RyaW5nLCBwbGF0Zm9ybTogYW55LCBkb2N1bWVudDogRG9jdW1lbnQpOiBhbnk7XHJcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdENvbmZpZ01vZHVsZU9wdGlvbnMge1xyXG4gICAgY29va2llOiBzdHJpbmc7XHJcbn1cclxuLyoqXHJcbiAqIERlc2lnbmVkL2ludGVuZGVkIHRvIHByb3ZpZGUgZHluYW1pYyBjb25maWd1cmF0aW9uIGZvciB0ZXN0aW5nIHNjZW5hcmlvcyBPTkxZIChlLmcuIGUyZSB0ZXN0cykuXHJcbiAqXHJcbiAqIENBVVRJT046IERPTidUIFVTRSBJVCBJTiBQUk9EVUNUSU9OISBJVCBIQVNOJ1QgQkVFTiBSRVZJRVdFRCBGT1IgU0VDVVJJVFkgSVNTVUVTLlxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGVzdENvbmZpZ01vZHVsZSB7XHJcbiAgICAvKipcclxuICAgICAqIEluamVjdHMgSlNPTiBjb25maWcgZnJvbSB0aGUgY29va2llIG9mIHRoZSBnaXZlbiBuYW1lLlxyXG4gICAgICpcclxuICAgICAqIEJlIGF3YXJlIG9mIHRoZSBjb29raWUgbGltaXRhdGlvbnMgKDQwOTYgYnl0ZXMpLlxyXG4gICAgICpcclxuICAgICAqIENBVVRJT046IERPTidUIFVTRSBJVCBJTiBQUk9EVUNUSU9OISBJVCBIQVNOJ1QgQkVFTiBSRVZJRVdFRCBGT1IgU0VDVVJJVFkgSVNTVUVTLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZm9yUm9vdChvcHRpb25zOiBUZXN0Q29uZmlnTW9kdWxlT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8VGVzdENvbmZpZ01vZHVsZT47XHJcbn1cclxuIl19