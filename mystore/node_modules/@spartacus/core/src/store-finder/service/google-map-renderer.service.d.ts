import { ExternalJsFileLoader } from './external-js-file-loader.service';
import { StoreDataService } from '../facade/store-data.service';
import { StoreFinderConfig } from '../config/store-finder-config';
import * as ɵngcc0 from '@angular/core';
export declare class GoogleMapRendererService {
    protected config: StoreFinderConfig;
    protected externalJsFileLoader: ExternalJsFileLoader;
    protected storeDataService: StoreDataService;
    private googleMap;
    private markers;
    constructor(config: StoreFinderConfig, externalJsFileLoader: ExternalJsFileLoader, storeDataService: StoreDataService);
    /**
     * Renders google map on the given element and draws markers on it.
     * If map already exists it will use an existing map otherwise it will create one
     * @param mapElement HTML element inside of which the map will be displayed
     * @param locations array containign geo data to be displayed on the map
     * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
     */
    renderMap(mapElement: HTMLElement, locations: any[], selectMarkerHandler?: Function): void;
    /**
     * Centers the map to the given point
     * @param latitute latitude of the new center
     * @param longitude longitude of the new center
     */
    centerMap(latitute: number, longitude: number): void;
    /**
     * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered
     * @param locations list of locations
     */
    private defineMapCenter;
    /**
     * Creates google map inside if the given HTML element centered to the given point
     * @param mapElement {@link HTMLElement} inside of which the map will be created
     * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered
     */
    private initMap;
    /**
     * Erases the current map's markers and create a new one based on the given locations
     * @param locations array of locations to be displayed on the map
     * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
     */
    private createMarkers;
    /**
     * Initialize and draw the map
     * @param mapElement {@link HTMLElement} inside of which the map will be drawn
     * @param locations array of locations to be displayed on the map
     * @param selectMarkerHandler function to handle whenever a marker on a map is clicked
     */
    private drawMap;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GoogleMapRendererService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLW1hcC1yZW5kZXJlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdvb2dsZS1tYXAtcmVuZGVyZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlcm5hbEpzRmlsZUxvYWRlciB9IGZyb20gJy4vZXh0ZXJuYWwtanMtZmlsZS1sb2FkZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFN0b3JlRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvc3RvcmUtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU3RvcmVGaW5kZXJDb25maWcgfSBmcm9tICcuLi9jb25maWcvc3RvcmUtZmluZGVyLWNvbmZpZyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdvb2dsZU1hcFJlbmRlcmVyU2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBTdG9yZUZpbmRlckNvbmZpZztcclxuICAgIHByb3RlY3RlZCBleHRlcm5hbEpzRmlsZUxvYWRlcjogRXh0ZXJuYWxKc0ZpbGVMb2FkZXI7XHJcbiAgICBwcm90ZWN0ZWQgc3RvcmVEYXRhU2VydmljZTogU3RvcmVEYXRhU2VydmljZTtcclxuICAgIHByaXZhdGUgZ29vZ2xlTWFwO1xyXG4gICAgcHJpdmF0ZSBtYXJrZXJzO1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBTdG9yZUZpbmRlckNvbmZpZywgZXh0ZXJuYWxKc0ZpbGVMb2FkZXI6IEV4dGVybmFsSnNGaWxlTG9hZGVyLCBzdG9yZURhdGFTZXJ2aWNlOiBTdG9yZURhdGFTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVycyBnb29nbGUgbWFwIG9uIHRoZSBnaXZlbiBlbGVtZW50IGFuZCBkcmF3cyBtYXJrZXJzIG9uIGl0LlxyXG4gICAgICogSWYgbWFwIGFscmVhZHkgZXhpc3RzIGl0IHdpbGwgdXNlIGFuIGV4aXN0aW5nIG1hcCBvdGhlcndpc2UgaXQgd2lsbCBjcmVhdGUgb25lXHJcbiAgICAgKiBAcGFyYW0gbWFwRWxlbWVudCBIVE1MIGVsZW1lbnQgaW5zaWRlIG9mIHdoaWNoIHRoZSBtYXAgd2lsbCBiZSBkaXNwbGF5ZWRcclxuICAgICAqIEBwYXJhbSBsb2NhdGlvbnMgYXJyYXkgY29udGFpbmlnbiBnZW8gZGF0YSB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIG1hcFxyXG4gICAgICogQHBhcmFtIHNlbGVjdE1hcmtlckhhbmRsZXIgZnVuY3Rpb24gdG8gaGFuZGxlIHdoZW5ldmVyIGEgbWFya2VyIG9uIGEgbWFwIGlzIGNsaWNrZWRcclxuICAgICAqL1xyXG4gICAgcmVuZGVyTWFwKG1hcEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBsb2NhdGlvbnM6IGFueVtdLCBzZWxlY3RNYXJrZXJIYW5kbGVyPzogRnVuY3Rpb24pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDZW50ZXJzIHRoZSBtYXAgdG8gdGhlIGdpdmVuIHBvaW50XHJcbiAgICAgKiBAcGFyYW0gbGF0aXR1dGUgbGF0aXR1ZGUgb2YgdGhlIG5ldyBjZW50ZXJcclxuICAgICAqIEBwYXJhbSBsb25naXR1ZGUgbG9uZ2l0dWRlIG9mIHRoZSBuZXcgY2VudGVyXHJcbiAgICAgKi9cclxuICAgIGNlbnRlck1hcChsYXRpdHV0ZTogbnVtYmVyLCBsb25naXR1ZGU6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIERlZmluZXMgYW5kIHJldHVybnMge0BsaW5rIGdvb2dsZS5tYXBzLkxhdExuZ30gcmVwcmVzZW50aW5nIGEgcG9pbnQgd2hlcmUgdGhlIG1hcCB3aWxsIGJlIGNlbnRlcmVkXHJcbiAgICAgKiBAcGFyYW0gbG9jYXRpb25zIGxpc3Qgb2YgbG9jYXRpb25zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGVmaW5lTWFwQ2VudGVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGdvb2dsZSBtYXAgaW5zaWRlIGlmIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgY2VudGVyZWQgdG8gdGhlIGdpdmVuIHBvaW50XHJcbiAgICAgKiBAcGFyYW0gbWFwRWxlbWVudCB7QGxpbmsgSFRNTEVsZW1lbnR9IGluc2lkZSBvZiB3aGljaCB0aGUgbWFwIHdpbGwgYmUgY3JlYXRlZFxyXG4gICAgICogQHBhcmFtIG1hcENlbnRlciB7QGxpbmsgZ29vZ2xlLm1hcHMuTGF0TG5nfSB0aGUgcG9pbnQgd2hlcmUgdGhlIG1hcCB3aWxsIGJlIGNlbnRlcmVkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaW5pdE1hcDtcclxuICAgIC8qKlxyXG4gICAgICogRXJhc2VzIHRoZSBjdXJyZW50IG1hcCdzIG1hcmtlcnMgYW5kIGNyZWF0ZSBhIG5ldyBvbmUgYmFzZWQgb24gdGhlIGdpdmVuIGxvY2F0aW9uc1xyXG4gICAgICogQHBhcmFtIGxvY2F0aW9ucyBhcnJheSBvZiBsb2NhdGlvbnMgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBtYXBcclxuICAgICAqIEBwYXJhbSBzZWxlY3RNYXJrZXJIYW5kbGVyIGZ1bmN0aW9uIHRvIGhhbmRsZSB3aGVuZXZlciBhIG1hcmtlciBvbiBhIG1hcCBpcyBjbGlja2VkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlTWFya2VycztcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZSBhbmQgZHJhdyB0aGUgbWFwXHJcbiAgICAgKiBAcGFyYW0gbWFwRWxlbWVudCB7QGxpbmsgSFRNTEVsZW1lbnR9IGluc2lkZSBvZiB3aGljaCB0aGUgbWFwIHdpbGwgYmUgZHJhd25cclxuICAgICAqIEBwYXJhbSBsb2NhdGlvbnMgYXJyYXkgb2YgbG9jYXRpb25zIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbWFwXHJcbiAgICAgKiBAcGFyYW0gc2VsZWN0TWFya2VySGFuZGxlciBmdW5jdGlvbiB0byBoYW5kbGUgd2hlbmV2ZXIgYSBtYXJrZXIgb24gYSBtYXAgaXMgY2xpY2tlZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGRyYXdNYXA7XHJcbn1cclxuIl19