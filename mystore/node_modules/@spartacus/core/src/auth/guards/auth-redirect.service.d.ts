import { Router } from '@angular/router';
import { RoutingService } from '../../routing/facade/routing.service';
import * as ɵngcc0 from '@angular/core';
export declare class AuthRedirectService {
    private routing;
    private router;
    /**
     * This service is responsible for redirecting to the last page before authorization. "The last page" can be:
     * 1. Just the previously opened page; or
     * 2. The page that we just tried to open, but AuthGuard cancelled it
     *
     * For example:
     * 1. The user opens the product page, then clicks /login link and signs in
     *    -> Then we should redirect to the product page; or
     * 2. The user opens the product page, then he clicks /my-account link,
     *    but is automatically redirected to the login page by the AuthGuard, and he signs in
     *    -> Then we should redirect to the my-account page, not the product page
     */
    constructor(routing: RoutingService, router: Router);
    private redirectUrl;
    private ignoredUrls;
    private lastAuthGuardNavigation;
    redirect(): void;
    reportAuthGuard(): void;
    reportNotAuthGuard(): void;
    private getCurrentNavigation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthRedirectService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1yZWRpcmVjdC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImF1dGgtcmVkaXJlY3Quc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFJvdXRpbmdTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcm91dGluZy9mYWNhZGUvcm91dGluZy5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXV0aFJlZGlyZWN0U2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJvdXRpbmc7XHJcbiAgICBwcml2YXRlIHJvdXRlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciByZWRpcmVjdGluZyB0byB0aGUgbGFzdCBwYWdlIGJlZm9yZSBhdXRob3JpemF0aW9uLiBcIlRoZSBsYXN0IHBhZ2VcIiBjYW4gYmU6XHJcbiAgICAgKiAxLiBKdXN0IHRoZSBwcmV2aW91c2x5IG9wZW5lZCBwYWdlOyBvclxyXG4gICAgICogMi4gVGhlIHBhZ2UgdGhhdCB3ZSBqdXN0IHRyaWVkIHRvIG9wZW4sIGJ1dCBBdXRoR3VhcmQgY2FuY2VsbGVkIGl0XHJcbiAgICAgKlxyXG4gICAgICogRm9yIGV4YW1wbGU6XHJcbiAgICAgKiAxLiBUaGUgdXNlciBvcGVucyB0aGUgcHJvZHVjdCBwYWdlLCB0aGVuIGNsaWNrcyAvbG9naW4gbGluayBhbmQgc2lnbnMgaW5cclxuICAgICAqICAgIC0+IFRoZW4gd2Ugc2hvdWxkIHJlZGlyZWN0IHRvIHRoZSBwcm9kdWN0IHBhZ2U7IG9yXHJcbiAgICAgKiAyLiBUaGUgdXNlciBvcGVucyB0aGUgcHJvZHVjdCBwYWdlLCB0aGVuIGhlIGNsaWNrcyAvbXktYWNjb3VudCBsaW5rLFxyXG4gICAgICogICAgYnV0IGlzIGF1dG9tYXRpY2FsbHkgcmVkaXJlY3RlZCB0byB0aGUgbG9naW4gcGFnZSBieSB0aGUgQXV0aEd1YXJkLCBhbmQgaGUgc2lnbnMgaW5cclxuICAgICAqICAgIC0+IFRoZW4gd2Ugc2hvdWxkIHJlZGlyZWN0IHRvIHRoZSBteS1hY2NvdW50IHBhZ2UsIG5vdCB0aGUgcHJvZHVjdCBwYWdlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvdXRpbmc6IFJvdXRpbmdTZXJ2aWNlLCByb3V0ZXI6IFJvdXRlcik7XHJcbiAgICBwcml2YXRlIHJlZGlyZWN0VXJsO1xyXG4gICAgcHJpdmF0ZSBpZ25vcmVkVXJscztcclxuICAgIHByaXZhdGUgbGFzdEF1dGhHdWFyZE5hdmlnYXRpb247XHJcbiAgICByZWRpcmVjdCgpOiB2b2lkO1xyXG4gICAgcmVwb3J0QXV0aEd1YXJkKCk6IHZvaWQ7XHJcbiAgICByZXBvcnROb3RBdXRoR3VhcmQoKTogdm9pZDtcclxuICAgIHByaXZhdGUgZ2V0Q3VycmVudE5hdmlnYXRpb247XHJcbn1cclxuIl19