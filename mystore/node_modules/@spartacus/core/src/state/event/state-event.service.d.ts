import { Type } from '@angular/core';
import { ActionsSubject } from '@ngrx/store';
import { Observable } from 'rxjs';
import { EventService } from '../../event/event.service';
import { ActionToEventMapping } from './action-to-event-mapping';
/**
 * Registers streams of ngrx actions as events source streams
 */
import * as ɵngcc0 from '@angular/core';
export declare class StateEventService {
    protected actionsSubject: ActionsSubject;
    protected eventService: EventService;
    constructor(actionsSubject: ActionsSubject, eventService: EventService);
    /**
     * Registers an event source stream of specific events
     * mapped from a given action type.
     *
     * @param mapping mapping from action to event
     *
     * @returns a teardown function that unregisters the event source
     */
    register<T>(mapping: ActionToEventMapping<T>): () => void;
    /**
     * Returns a stream of specific events mapped from a specific action.
     * @param mapping mapping from action to event
     */
    protected getFromAction<T>(mapping: ActionToEventMapping<T>): Observable<T>;
    /**
     * Creates an event instance for given class out from the action object.
     * Unless the `factory` parameter is given, the action's `payload` is used
     * as the argument for the event's constructor.
     *
     * @param action instance of an Action
     * @param mapping mapping from action to event
     * @param factory optional function getting an action instance and returning an event instance
     *
     * @returns instance of an Event
     */
    protected createEvent<T>(action: {
        type: string;
        payload?: any;
    }, eventType: Type<T>, factory?: (action: any) => T): T;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StateEventService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtZXZlbnQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJzdGF0ZS1ldmVudC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gJy4uLy4uL2V2ZW50L2V2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBY3Rpb25Ub0V2ZW50TWFwcGluZyB9IGZyb20gJy4vYWN0aW9uLXRvLWV2ZW50LW1hcHBpbmcnO1xyXG4vKipcclxuICogUmVnaXN0ZXJzIHN0cmVhbXMgb2YgbmdyeCBhY3Rpb25zIGFzIGV2ZW50cyBzb3VyY2Ugc3RyZWFtc1xyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RhdGVFdmVudFNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIGFjdGlvbnNTdWJqZWN0OiBBY3Rpb25zU3ViamVjdDtcclxuICAgIHByb3RlY3RlZCBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZTtcclxuICAgIGNvbnN0cnVjdG9yKGFjdGlvbnNTdWJqZWN0OiBBY3Rpb25zU3ViamVjdCwgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlcnMgYW4gZXZlbnQgc291cmNlIHN0cmVhbSBvZiBzcGVjaWZpYyBldmVudHNcclxuICAgICAqIG1hcHBlZCBmcm9tIGEgZ2l2ZW4gYWN0aW9uIHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG1hcHBpbmcgbWFwcGluZyBmcm9tIGFjdGlvbiB0byBldmVudFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIGEgdGVhcmRvd24gZnVuY3Rpb24gdGhhdCB1bnJlZ2lzdGVycyB0aGUgZXZlbnQgc291cmNlXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyPFQ+KG1hcHBpbmc6IEFjdGlvblRvRXZlbnRNYXBwaW5nPFQ+KTogKCkgPT4gdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmVhbSBvZiBzcGVjaWZpYyBldmVudHMgbWFwcGVkIGZyb20gYSBzcGVjaWZpYyBhY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gbWFwcGluZyBtYXBwaW5nIGZyb20gYWN0aW9uIHRvIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRGcm9tQWN0aW9uPFQ+KG1hcHBpbmc6IEFjdGlvblRvRXZlbnRNYXBwaW5nPFQ+KTogT2JzZXJ2YWJsZTxUPjtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBldmVudCBpbnN0YW5jZSBmb3IgZ2l2ZW4gY2xhc3Mgb3V0IGZyb20gdGhlIGFjdGlvbiBvYmplY3QuXHJcbiAgICAgKiBVbmxlc3MgdGhlIGBmYWN0b3J5YCBwYXJhbWV0ZXIgaXMgZ2l2ZW4sIHRoZSBhY3Rpb24ncyBgcGF5bG9hZGAgaXMgdXNlZFxyXG4gICAgICogYXMgdGhlIGFyZ3VtZW50IGZvciB0aGUgZXZlbnQncyBjb25zdHJ1Y3Rvci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYWN0aW9uIGluc3RhbmNlIG9mIGFuIEFjdGlvblxyXG4gICAgICogQHBhcmFtIG1hcHBpbmcgbWFwcGluZyBmcm9tIGFjdGlvbiB0byBldmVudFxyXG4gICAgICogQHBhcmFtIGZhY3Rvcnkgb3B0aW9uYWwgZnVuY3Rpb24gZ2V0dGluZyBhbiBhY3Rpb24gaW5zdGFuY2UgYW5kIHJldHVybmluZyBhbiBldmVudCBpbnN0YW5jZVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIGluc3RhbmNlIG9mIGFuIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjcmVhdGVFdmVudDxUPihhY3Rpb246IHtcclxuICAgICAgICB0eXBlOiBzdHJpbmc7XHJcbiAgICAgICAgcGF5bG9hZD86IGFueTtcclxuICAgIH0sIGV2ZW50VHlwZTogVHlwZTxUPiwgZmFjdG9yeT86IChhY3Rpb246IGFueSkgPT4gVCk6IFQ7XHJcbn1cclxuIl19