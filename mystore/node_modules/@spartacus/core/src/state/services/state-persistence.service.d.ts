import { Observable, Subscription } from 'rxjs';
import { StorageSyncType } from '../../state/config/state-config';
import { WindowRef } from '../../window/window-ref';
import * as ɵngcc0 from '@angular/core';
export declare class StatePersistenceService {
    protected winRef: WindowRef;
    constructor(winRef: WindowRef);
    /**
     * Helper to synchronize state to more persistent storage (localStorage, sessionStorage).
     * It is context aware, so you can keep different state for te same feature based on specified context.
     *
     * Eg. cart is valid only under the same base site. So you want to synchronize cart only with the same base site.
     * Usage for that case: `syncWithStorage({ key: 'cart', state$: activeCartSelector$, context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]), onRead: (state) => setCorrectStateInStore(state) })`.
     * Active cart for the `electronics` base site will be stored under `spartacus⚿electronics⚿cart` and for apparel under `spartacus⚿apparel⚿cart`.
     *
     * On each context change onRead function will be executed with state from storage provided as a parameter.
     *
     * Omitting context$ will trigger onRead only once at initialization.
     *
     * @param key Key to use in storage for the synchronized state. Should be unique for each feature.
     * @param state$ State to be saved and later restored.
     * @param context$ Context for state
     * @param storageType Storage type to be used to persist state
     * @param onRead Function to be executed on each storage read after context change
     *
     * @returns Subscriptions for reading/writing in storage on context/state change
     */
    syncWithStorage<T>({ key, state$, context$, storageType, onRead, }: {
        key: string;
        state$: Observable<T>;
        context$?: Observable<string | Array<string>>;
        storageType?: StorageSyncType;
        onRead?: (stateFromStorage: T) => void;
    }): Subscription;
    protected generateKeyWithContext(context: string | Array<string>, key: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StatePersistenceService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtcGVyc2lzdGVuY2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJzdGF0ZS1wZXJzaXN0ZW5jZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFN0b3JhZ2VTeW5jVHlwZSB9IGZyb20gJy4uLy4uL3N0YXRlL2NvbmZpZy9zdGF0ZS1jb25maWcnO1xyXG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuLi8uLi93aW5kb3cvd2luZG93LXJlZic7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlIHtcclxuICAgIHByb3RlY3RlZCB3aW5SZWY6IFdpbmRvd1JlZjtcclxuICAgIGNvbnN0cnVjdG9yKHdpblJlZjogV2luZG93UmVmKTtcclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIHRvIHN5bmNocm9uaXplIHN0YXRlIHRvIG1vcmUgcGVyc2lzdGVudCBzdG9yYWdlIChsb2NhbFN0b3JhZ2UsIHNlc3Npb25TdG9yYWdlKS5cclxuICAgICAqIEl0IGlzIGNvbnRleHQgYXdhcmUsIHNvIHlvdSBjYW4ga2VlcCBkaWZmZXJlbnQgc3RhdGUgZm9yIHRlIHNhbWUgZmVhdHVyZSBiYXNlZCBvbiBzcGVjaWZpZWQgY29udGV4dC5cclxuICAgICAqXHJcbiAgICAgKiBFZy4gY2FydCBpcyB2YWxpZCBvbmx5IHVuZGVyIHRoZSBzYW1lIGJhc2Ugc2l0ZS4gU28geW91IHdhbnQgdG8gc3luY2hyb25pemUgY2FydCBvbmx5IHdpdGggdGhlIHNhbWUgYmFzZSBzaXRlLlxyXG4gICAgICogVXNhZ2UgZm9yIHRoYXQgY2FzZTogYHN5bmNXaXRoU3RvcmFnZSh7IGtleTogJ2NhcnQnLCBzdGF0ZSQ6IGFjdGl2ZUNhcnRTZWxlY3RvciQsIGNvbnRleHQkOiB0aGlzLnNpdGVDb250ZXh0UGFyYW1zU2VydmljZS5nZXRWYWx1ZXMoW0JBU0VfU0lURV9DT05URVhUX0lEXSksIG9uUmVhZDogKHN0YXRlKSA9PiBzZXRDb3JyZWN0U3RhdGVJblN0b3JlKHN0YXRlKSB9KWAuXHJcbiAgICAgKiBBY3RpdmUgY2FydCBmb3IgdGhlIGBlbGVjdHJvbmljc2AgYmFzZSBzaXRlIHdpbGwgYmUgc3RvcmVkIHVuZGVyIGBzcGFydGFjdXPimr9lbGVjdHJvbmljc+Kav2NhcnRgIGFuZCBmb3IgYXBwYXJlbCB1bmRlciBgc3BhcnRhY3Vz4pq/YXBwYXJlbOKav2NhcnRgLlxyXG4gICAgICpcclxuICAgICAqIE9uIGVhY2ggY29udGV4dCBjaGFuZ2Ugb25SZWFkIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgd2l0aCBzdGF0ZSBmcm9tIHN0b3JhZ2UgcHJvdmlkZWQgYXMgYSBwYXJhbWV0ZXIuXHJcbiAgICAgKlxyXG4gICAgICogT21pdHRpbmcgY29udGV4dCQgd2lsbCB0cmlnZ2VyIG9uUmVhZCBvbmx5IG9uY2UgYXQgaW5pdGlhbGl6YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGtleSBLZXkgdG8gdXNlIGluIHN0b3JhZ2UgZm9yIHRoZSBzeW5jaHJvbml6ZWQgc3RhdGUuIFNob3VsZCBiZSB1bmlxdWUgZm9yIGVhY2ggZmVhdHVyZS5cclxuICAgICAqIEBwYXJhbSBzdGF0ZSQgU3RhdGUgdG8gYmUgc2F2ZWQgYW5kIGxhdGVyIHJlc3RvcmVkLlxyXG4gICAgICogQHBhcmFtIGNvbnRleHQkIENvbnRleHQgZm9yIHN0YXRlXHJcbiAgICAgKiBAcGFyYW0gc3RvcmFnZVR5cGUgU3RvcmFnZSB0eXBlIHRvIGJlIHVzZWQgdG8gcGVyc2lzdCBzdGF0ZVxyXG4gICAgICogQHBhcmFtIG9uUmVhZCBGdW5jdGlvbiB0byBiZSBleGVjdXRlZCBvbiBlYWNoIHN0b3JhZ2UgcmVhZCBhZnRlciBjb250ZXh0IGNoYW5nZVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIFN1YnNjcmlwdGlvbnMgZm9yIHJlYWRpbmcvd3JpdGluZyBpbiBzdG9yYWdlIG9uIGNvbnRleHQvc3RhdGUgY2hhbmdlXHJcbiAgICAgKi9cclxuICAgIHN5bmNXaXRoU3RvcmFnZTxUPih7IGtleSwgc3RhdGUkLCBjb250ZXh0JCwgc3RvcmFnZVR5cGUsIG9uUmVhZCwgfToge1xyXG4gICAgICAgIGtleTogc3RyaW5nO1xyXG4gICAgICAgIHN0YXRlJDogT2JzZXJ2YWJsZTxUPjtcclxuICAgICAgICBjb250ZXh0JD86IE9ic2VydmFibGU8c3RyaW5nIHwgQXJyYXk8c3RyaW5nPj47XHJcbiAgICAgICAgc3RvcmFnZVR5cGU/OiBTdG9yYWdlU3luY1R5cGU7XHJcbiAgICAgICAgb25SZWFkPzogKHN0YXRlRnJvbVN0b3JhZ2U6IFQpID0+IHZvaWQ7XHJcbiAgICB9KTogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJvdGVjdGVkIGdlbmVyYXRlS2V5V2l0aENvbnRleHQoY29udGV4dDogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiwga2V5OiBzdHJpbmcpOiBzdHJpbmc7XHJcbn1cclxuIl19