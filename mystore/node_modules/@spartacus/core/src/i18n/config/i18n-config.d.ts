import { TranslationResources } from '../translation-resources';
import * as ɵngcc0 from '@angular/core';
export declare abstract class I18nConfig {
    i18n?: {
        /**
         * When there are missing translation resources for the active language, the fallback language will be used.
         */
        fallbackLang?: string | false;
        /**
         * Configuration for lazy loading of translation files.
         * For eager loading of translations please use config option `i18n.resources`
         */
        backend?: {
            /**
             * The path to JSON translations. It should contain placeholders:
             * - `{{lng}}` for language
             * - `{{ns}}` for the name of chunk.
             *
             * Example:
             * `assets/i18n-assets/{{lng}}/{{ns}}.json`
             */
            loadPath?: string;
        };
        /**
         * Reference to translation resources that are eagerly bundled with JS app.
         * For lazy loading of translations please use config option `i18n.backend` instead.
         */
        resources?: TranslationResources;
        /**
         * Logs i18n events (like loading translation resources) to the console. Don't use in production!
         */
        debug?: boolean;
        /**
         * Mapping that assigns keys' namespaces to specific chunks. The main purpose of chunks is to lazy load them.
         */
        chunks?: {
            [chunk: string]: string[];
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<I18nConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi1jb25maWcuZC50cyIsInNvdXJjZXMiOlsiaTE4bi1jb25maWcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zbGF0aW9uUmVzb3VyY2VzIH0gZnJvbSAnLi4vdHJhbnNsYXRpb24tcmVzb3VyY2VzJztcclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgSTE4bkNvbmZpZyB7XHJcbiAgICBpMThuPzoge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdoZW4gdGhlcmUgYXJlIG1pc3NpbmcgdHJhbnNsYXRpb24gcmVzb3VyY2VzIGZvciB0aGUgYWN0aXZlIGxhbmd1YWdlLCB0aGUgZmFsbGJhY2sgbGFuZ3VhZ2Ugd2lsbCBiZSB1c2VkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZhbGxiYWNrTGFuZz86IHN0cmluZyB8IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIGxhenkgbG9hZGluZyBvZiB0cmFuc2xhdGlvbiBmaWxlcy5cclxuICAgICAgICAgKiBGb3IgZWFnZXIgbG9hZGluZyBvZiB0cmFuc2xhdGlvbnMgcGxlYXNlIHVzZSBjb25maWcgb3B0aW9uIGBpMThuLnJlc291cmNlc2BcclxuICAgICAgICAgKi9cclxuICAgICAgICBiYWNrZW5kPzoge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGhlIHBhdGggdG8gSlNPTiB0cmFuc2xhdGlvbnMuIEl0IHNob3VsZCBjb250YWluIHBsYWNlaG9sZGVyczpcclxuICAgICAgICAgICAgICogLSBge3tsbmd9fWAgZm9yIGxhbmd1YWdlXHJcbiAgICAgICAgICAgICAqIC0gYHt7bnN9fWAgZm9yIHRoZSBuYW1lIG9mIGNodW5rLlxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKiBFeGFtcGxlOlxyXG4gICAgICAgICAgICAgKiBgYXNzZXRzL2kxOG4tYXNzZXRzL3t7bG5nfX0ve3tuc319Lmpzb25gXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBsb2FkUGF0aD86IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0cmFuc2xhdGlvbiByZXNvdXJjZXMgdGhhdCBhcmUgZWFnZXJseSBidW5kbGVkIHdpdGggSlMgYXBwLlxyXG4gICAgICAgICAqIEZvciBsYXp5IGxvYWRpbmcgb2YgdHJhbnNsYXRpb25zIHBsZWFzZSB1c2UgY29uZmlnIG9wdGlvbiBgaTE4bi5iYWNrZW5kYCBpbnN0ZWFkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc291cmNlcz86IFRyYW5zbGF0aW9uUmVzb3VyY2VzO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIExvZ3MgaTE4biBldmVudHMgKGxpa2UgbG9hZGluZyB0cmFuc2xhdGlvbiByZXNvdXJjZXMpIHRvIHRoZSBjb25zb2xlLiBEb24ndCB1c2UgaW4gcHJvZHVjdGlvbiFcclxuICAgICAgICAgKi9cclxuICAgICAgICBkZWJ1Zz86IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWFwcGluZyB0aGF0IGFzc2lnbnMga2V5cycgbmFtZXNwYWNlcyB0byBzcGVjaWZpYyBjaHVua3MuIFRoZSBtYWluIHB1cnBvc2Ugb2YgY2h1bmtzIGlzIHRvIGxhenkgbG9hZCB0aGVtLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNodW5rcz86IHtcclxuICAgICAgICAgICAgW2NodW5rOiBzdHJpbmddOiBzdHJpbmdbXTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufVxyXG4iXX0=