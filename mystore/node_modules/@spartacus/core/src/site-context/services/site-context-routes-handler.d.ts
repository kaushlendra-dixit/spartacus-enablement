import { Injector, OnDestroy } from '@angular/core';
import { SiteContextParamsService } from './site-context-params.service';
import { SiteContextUrlSerializer } from './site-context-url-serializer';
import * as ɵngcc0 from '@angular/core';
export declare class SiteContextRoutesHandler implements OnDestroy {
    private siteContextParams;
    private serializer;
    private injector;
    constructor(siteContextParams: SiteContextParamsService, serializer: SiteContextUrlSerializer, injector: Injector);
    private subscription;
    private contextValues;
    private router;
    private location;
    /**
     * Tells whether there is a pending navigation at the moment, so we can avoid an infinite loop caused by the cyclic dependency:
     * - `subscribeChanges` method triggers a navigation on update of site context state
     * - `subscribeRouting` method updates the site context state on navigation
     */
    private isNavigating;
    /**
     * Initializes the two-way synchronization between the site context state and the URL.
     *
     * @returns Promise that is resolved when the site context state is initialized (updated for the first time) based on the URL.
     */
    init(): Promise<void>;
    /**
     * After each change of the site context state, it modifies the current URL in place.
     * But it happens only for the parameters configured to be persisted in the URL.
     */
    private subscribeChanges;
    /**
     * After each Angular NavigationStart event it updates the site context state based on
     * site context params encoded in the anticipated URL.
     *
     * In particular, it's responsible for initializing the state of the context params
     * on page start, reading the values from the URL.
     *
     * @param onContextInitialized notify that the initialization of the context was done based on the URL
     */
    private subscribeRouting;
    /**
     * Updates the site context state based on the context params encoded in the given URL
     *
     * @param url URL with encoded context params
     */
    private setContextParamsFromRoute;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SiteContextRoutesHandler, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZS1jb250ZXh0LXJvdXRlcy1oYW5kbGVyLmQudHMiLCJzb3VyY2VzIjpbInNpdGUtY29udGV4dC1yb3V0ZXMtaGFuZGxlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2l0ZUNvbnRleHRQYXJhbXNTZXJ2aWNlIH0gZnJvbSAnLi9zaXRlLWNvbnRleHQtcGFyYW1zLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTaXRlQ29udGV4dFVybFNlcmlhbGl6ZXIgfSBmcm9tICcuL3NpdGUtY29udGV4dC11cmwtc2VyaWFsaXplcic7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNpdGVDb250ZXh0Um91dGVzSGFuZGxlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHNpdGVDb250ZXh0UGFyYW1zO1xyXG4gICAgcHJpdmF0ZSBzZXJpYWxpemVyO1xyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcclxuICAgIGNvbnN0cnVjdG9yKHNpdGVDb250ZXh0UGFyYW1zOiBTaXRlQ29udGV4dFBhcmFtc1NlcnZpY2UsIHNlcmlhbGl6ZXI6IFNpdGVDb250ZXh0VXJsU2VyaWFsaXplciwgaW5qZWN0b3I6IEluamVjdG9yKTtcclxuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBjb250ZXh0VmFsdWVzO1xyXG4gICAgcHJpdmF0ZSByb3V0ZXI7XHJcbiAgICBwcml2YXRlIGxvY2F0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZWxscyB3aGV0aGVyIHRoZXJlIGlzIGEgcGVuZGluZyBuYXZpZ2F0aW9uIGF0IHRoZSBtb21lbnQsIHNvIHdlIGNhbiBhdm9pZCBhbiBpbmZpbml0ZSBsb29wIGNhdXNlZCBieSB0aGUgY3ljbGljIGRlcGVuZGVuY3k6XHJcbiAgICAgKiAtIGBzdWJzY3JpYmVDaGFuZ2VzYCBtZXRob2QgdHJpZ2dlcnMgYSBuYXZpZ2F0aW9uIG9uIHVwZGF0ZSBvZiBzaXRlIGNvbnRleHQgc3RhdGVcclxuICAgICAqIC0gYHN1YnNjcmliZVJvdXRpbmdgIG1ldGhvZCB1cGRhdGVzIHRoZSBzaXRlIGNvbnRleHQgc3RhdGUgb24gbmF2aWdhdGlvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGlzTmF2aWdhdGluZztcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHR3by13YXkgc3luY2hyb25pemF0aW9uIGJldHdlZW4gdGhlIHNpdGUgY29udGV4dCBzdGF0ZSBhbmQgdGhlIFVSTC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgc2l0ZSBjb250ZXh0IHN0YXRlIGlzIGluaXRpYWxpemVkICh1cGRhdGVkIGZvciB0aGUgZmlyc3QgdGltZSkgYmFzZWQgb24gdGhlIFVSTC5cclxuICAgICAqL1xyXG4gICAgaW5pdCgpOiBQcm9taXNlPHZvaWQ+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZnRlciBlYWNoIGNoYW5nZSBvZiB0aGUgc2l0ZSBjb250ZXh0IHN0YXRlLCBpdCBtb2RpZmllcyB0aGUgY3VycmVudCBVUkwgaW4gcGxhY2UuXHJcbiAgICAgKiBCdXQgaXQgaGFwcGVucyBvbmx5IGZvciB0aGUgcGFyYW1ldGVycyBjb25maWd1cmVkIHRvIGJlIHBlcnNpc3RlZCBpbiB0aGUgVVJMLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN1YnNjcmliZUNoYW5nZXM7XHJcbiAgICAvKipcclxuICAgICAqIEFmdGVyIGVhY2ggQW5ndWxhciBOYXZpZ2F0aW9uU3RhcnQgZXZlbnQgaXQgdXBkYXRlcyB0aGUgc2l0ZSBjb250ZXh0IHN0YXRlIGJhc2VkIG9uXHJcbiAgICAgKiBzaXRlIGNvbnRleHQgcGFyYW1zIGVuY29kZWQgaW4gdGhlIGFudGljaXBhdGVkIFVSTC5cclxuICAgICAqXHJcbiAgICAgKiBJbiBwYXJ0aWN1bGFyLCBpdCdzIHJlc3BvbnNpYmxlIGZvciBpbml0aWFsaXppbmcgdGhlIHN0YXRlIG9mIHRoZSBjb250ZXh0IHBhcmFtc1xyXG4gICAgICogb24gcGFnZSBzdGFydCwgcmVhZGluZyB0aGUgdmFsdWVzIGZyb20gdGhlIFVSTC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gb25Db250ZXh0SW5pdGlhbGl6ZWQgbm90aWZ5IHRoYXQgdGhlIGluaXRpYWxpemF0aW9uIG9mIHRoZSBjb250ZXh0IHdhcyBkb25lIGJhc2VkIG9uIHRoZSBVUkxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVSb3V0aW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBzaXRlIGNvbnRleHQgc3RhdGUgYmFzZWQgb24gdGhlIGNvbnRleHQgcGFyYW1zIGVuY29kZWQgaW4gdGhlIGdpdmVuIFVSTFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cmwgVVJMIHdpdGggZW5jb2RlZCBjb250ZXh0IHBhcmFtc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldENvbnRleHRQYXJhbXNGcm9tUm91dGU7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==