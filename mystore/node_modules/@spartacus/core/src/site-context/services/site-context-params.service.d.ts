import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { SiteContextConfig } from '../config/site-context-config';
import { SiteContext } from '../facade/site-context.interface';
import { ContextServiceMap } from '../providers/context-service-map';
import * as ɵngcc0 from '@angular/core';
export declare class SiteContextParamsService {
    private config;
    private injector;
    private serviceMap;
    constructor(config: SiteContextConfig, injector: Injector, serviceMap: ContextServiceMap);
    getContextParameters(): string[];
    getUrlEncodingParameters(): string[];
    getParamValues(param: string): string[];
    getParamDefaultValue(param: string): string;
    getSiteContextService(param: string): SiteContext<any>;
    getValue(param: string): string;
    setValue(param: string, value: string): void;
    /**
     * Get active values for all provided context parameters
     *
     * @param params Context parameters
     *
     * @returns Observable emitting array of all passed active context values
     */
    getValues(params: string[]): Observable<Array<string>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SiteContextParamsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SiteContextParamsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l0ZS1jb250ZXh0LXBhcmFtcy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInNpdGUtY29udGV4dC1wYXJhbXMuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNpdGVDb250ZXh0Q29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3NpdGUtY29udGV4dC1jb25maWcnO1xyXG5pbXBvcnQgeyBTaXRlQ29udGV4dCB9IGZyb20gJy4uL2ZhY2FkZS9zaXRlLWNvbnRleHQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgQ29udGV4dFNlcnZpY2VNYXAgfSBmcm9tICcuLi9wcm92aWRlcnMvY29udGV4dC1zZXJ2aWNlLW1hcCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNpdGVDb250ZXh0UGFyYW1zU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGNvbmZpZztcclxuICAgIHByaXZhdGUgaW5qZWN0b3I7XHJcbiAgICBwcml2YXRlIHNlcnZpY2VNYXA7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFNpdGVDb250ZXh0Q29uZmlnLCBpbmplY3RvcjogSW5qZWN0b3IsIHNlcnZpY2VNYXA6IENvbnRleHRTZXJ2aWNlTWFwKTtcclxuICAgIGdldENvbnRleHRQYXJhbWV0ZXJzKCk6IHN0cmluZ1tdO1xyXG4gICAgZ2V0VXJsRW5jb2RpbmdQYXJhbWV0ZXJzKCk6IHN0cmluZ1tdO1xyXG4gICAgZ2V0UGFyYW1WYWx1ZXMocGFyYW06IHN0cmluZyk6IHN0cmluZ1tdO1xyXG4gICAgZ2V0UGFyYW1EZWZhdWx0VmFsdWUocGFyYW06IHN0cmluZyk6IHN0cmluZztcclxuICAgIGdldFNpdGVDb250ZXh0U2VydmljZShwYXJhbTogc3RyaW5nKTogU2l0ZUNvbnRleHQ8YW55PjtcclxuICAgIGdldFZhbHVlKHBhcmFtOiBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgICBzZXRWYWx1ZShwYXJhbTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFjdGl2ZSB2YWx1ZXMgZm9yIGFsbCBwcm92aWRlZCBjb250ZXh0IHBhcmFtZXRlcnNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIENvbnRleHQgcGFyYW1ldGVyc1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGUgZW1pdHRpbmcgYXJyYXkgb2YgYWxsIHBhc3NlZCBhY3RpdmUgY29udGV4dCB2YWx1ZXNcclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWVzKHBhcmFtczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPEFycmF5PHN0cmluZz4+O1xyXG59XHJcbiJdfQ==