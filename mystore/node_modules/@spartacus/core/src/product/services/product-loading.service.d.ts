import { Actions } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { Product } from '../../model/product.model';
import { LoadingScopesService } from '../../occ/services/loading-scopes.service';
import { StateWithProduct } from '../store/product-state';
import * as ɵngcc0 from '@angular/core';
export declare class ProductLoadingService {
    protected store: Store<StateWithProduct>;
    protected loadingScopes: LoadingScopesService;
    protected actions$: Actions;
    protected platformId: any;
    protected products: {
        [code: string]: {
            [scope: string]: Observable<Product>;
        };
    };
    constructor(store: Store<StateWithProduct>, loadingScopes: LoadingScopesService, actions$: Actions, platformId: any);
    get(productCode: string, scopes: string[]): Observable<Product>;
    protected initProductScopes(productCode: string, scopes: string[]): void;
    protected getScopesIndex(scopes: string[]): string;
    /**
     * Creates observable for providing specified product data for the scope
     *
     * @param productCode
     * @param scope
     */
    protected getProductForScope(productCode: string, scope: string): Observable<Product>;
    /**
     * Returns reload triggers for product per scope
     *
     * @param productCode
     * @param scope
     */
    protected getProductReloadTriggers(productCode: string, scope: string): Observable<boolean>[];
    /**
     * Generic method that returns stream triggering reload by maxAge
     *
     * Could be refactored to separate service in future to use in other
     * max age reload implementations
     *
     * @param loadStart$ Stream that emits on load start
     * @param loadFinish$ Stream that emits on load finish
     * @param maxAge max age
     */
    private getMaxAgeTrigger;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProductLoadingService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1sb2FkaW5nLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicHJvZHVjdC1sb2FkaW5nLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSAnLi4vLi4vbW9kZWwvcHJvZHVjdC5tb2RlbCc7XHJcbmltcG9ydCB7IExvYWRpbmdTY29wZXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vb2NjL3NlcnZpY2VzL2xvYWRpbmctc2NvcGVzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdGF0ZVdpdGhQcm9kdWN0IH0gZnJvbSAnLi4vc3RvcmUvcHJvZHVjdC1zdGF0ZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFByb2R1Y3RMb2FkaW5nU2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFN0YXRlV2l0aFByb2R1Y3Q+O1xyXG4gICAgcHJvdGVjdGVkIGxvYWRpbmdTY29wZXM6IExvYWRpbmdTY29wZXNTZXJ2aWNlO1xyXG4gICAgcHJvdGVjdGVkIGFjdGlvbnMkOiBBY3Rpb25zO1xyXG4gICAgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IGFueTtcclxuICAgIHByb3RlY3RlZCBwcm9kdWN0czoge1xyXG4gICAgICAgIFtjb2RlOiBzdHJpbmddOiB7XHJcbiAgICAgICAgICAgIFtzY29wZTogc3RyaW5nXTogT2JzZXJ2YWJsZTxQcm9kdWN0PjtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKHN0b3JlOiBTdG9yZTxTdGF0ZVdpdGhQcm9kdWN0PiwgbG9hZGluZ1Njb3BlczogTG9hZGluZ1Njb3Blc1NlcnZpY2UsIGFjdGlvbnMkOiBBY3Rpb25zLCBwbGF0Zm9ybUlkOiBhbnkpO1xyXG4gICAgZ2V0KHByb2R1Y3RDb2RlOiBzdHJpbmcsIHNjb3Blczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPFByb2R1Y3Q+O1xyXG4gICAgcHJvdGVjdGVkIGluaXRQcm9kdWN0U2NvcGVzKHByb2R1Y3RDb2RlOiBzdHJpbmcsIHNjb3Blczogc3RyaW5nW10pOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIGdldFNjb3Blc0luZGV4KHNjb3Blczogc3RyaW5nW10pOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgb2JzZXJ2YWJsZSBmb3IgcHJvdmlkaW5nIHNwZWNpZmllZCBwcm9kdWN0IGRhdGEgZm9yIHRoZSBzY29wZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwcm9kdWN0Q29kZVxyXG4gICAgICogQHBhcmFtIHNjb3BlXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRQcm9kdWN0Rm9yU2NvcGUocHJvZHVjdENvZGU6IHN0cmluZywgc2NvcGU6IHN0cmluZyk6IE9ic2VydmFibGU8UHJvZHVjdD47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgcmVsb2FkIHRyaWdnZXJzIGZvciBwcm9kdWN0IHBlciBzY29wZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwcm9kdWN0Q29kZVxyXG4gICAgICogQHBhcmFtIHNjb3BlXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRQcm9kdWN0UmVsb2FkVHJpZ2dlcnMocHJvZHVjdENvZGU6IHN0cmluZywgc2NvcGU6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj5bXTtcclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJpYyBtZXRob2QgdGhhdCByZXR1cm5zIHN0cmVhbSB0cmlnZ2VyaW5nIHJlbG9hZCBieSBtYXhBZ2VcclxuICAgICAqXHJcbiAgICAgKiBDb3VsZCBiZSByZWZhY3RvcmVkIHRvIHNlcGFyYXRlIHNlcnZpY2UgaW4gZnV0dXJlIHRvIHVzZSBpbiBvdGhlclxyXG4gICAgICogbWF4IGFnZSByZWxvYWQgaW1wbGVtZW50YXRpb25zXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGxvYWRTdGFydCQgU3RyZWFtIHRoYXQgZW1pdHMgb24gbG9hZCBzdGFydFxyXG4gICAgICogQHBhcmFtIGxvYWRGaW5pc2gkIFN0cmVhbSB0aGF0IGVtaXRzIG9uIGxvYWQgZmluaXNoXHJcbiAgICAgKiBAcGFyYW0gbWF4QWdlIG1heCBhZ2VcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRNYXhBZ2VUcmlnZ2VyO1xyXG59XHJcbiJdfQ==