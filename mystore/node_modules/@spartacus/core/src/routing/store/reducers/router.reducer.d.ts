import { InjectionToken, Provider } from '@angular/core';
import { RouterStateSnapshot } from '@angular/router';
import * as fromNgrxRouter from '@ngrx/router-store';
import { ActionReducerMap } from '@ngrx/store';
import { RoutingConfigService } from '../../configurable-routes/routing-config.service';
import { ActivatedRouterStateSnapshot, RouterState, State } from '../routing-state';
import * as ɵngcc0 from '@angular/core';
export declare const initialState: RouterState;
export declare function getReducers(): ActionReducerMap<State>;
export declare function reducer(state: RouterState, action: any): RouterState;
export declare const reducerToken: InjectionToken<ActionReducerMap<State>>;
export declare const reducerProvider: Provider;
export declare class CustomSerializer implements fromNgrxRouter.RouterStateSerializer<ActivatedRouterStateSnapshot> {
    private routingConfig;
    serialize(routerState: RouterStateSnapshot): ActivatedRouterStateSnapshot;
    /**
     * Returns the semantic route name for given page label.
     *
     * *NOTE*: It works only for simple static urls that are equal to the page label
     * of cms-driven content page. For example: `/my-account/address-book`.
     *
     * It doesn't work for URLs with dynamic parameters. But such case can be handled
     * by reading the defined `data.cxRoute` from the Angular Routes.
     *
     * @param path path to be found in the routing config
     */
    private lookupSemanticRoute;
    constructor(routingConfig: RoutingConfigService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CustomSerializer, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CustomSerializer>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnJlZHVjZXIuZC50cyIsInNvdXJjZXMiOlsicm91dGVyLnJlZHVjZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0ICogYXMgZnJvbU5ncnhSb3V0ZXIgZnJvbSAnQG5ncngvcm91dGVyLXN0b3JlJztcclxuaW1wb3J0IHsgQWN0aW9uUmVkdWNlck1hcCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHsgUm91dGluZ0NvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9jb25maWd1cmFibGUtcm91dGVzL3JvdXRpbmctY29uZmlnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZXJTdGF0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZSwgU3RhdGUgfSBmcm9tICcuLi9yb3V0aW5nLXN0YXRlJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgaW5pdGlhbFN0YXRlOiBSb3V0ZXJTdGF0ZTtcclxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gZ2V0UmVkdWNlcnMoKTogQWN0aW9uUmVkdWNlck1hcDxTdGF0ZT47XHJcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGU6IFJvdXRlclN0YXRlLCBhY3Rpb246IGFueSk6IFJvdXRlclN0YXRlO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCByZWR1Y2VyVG9rZW46IEluamVjdGlvblRva2VuPEFjdGlvblJlZHVjZXJNYXA8U3RhdGU+PjtcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgcmVkdWNlclByb3ZpZGVyOiBQcm92aWRlcjtcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ3VzdG9tU2VyaWFsaXplciBpbXBsZW1lbnRzIGZyb21OZ3J4Um91dGVyLlJvdXRlclN0YXRlU2VyaWFsaXplcjxBY3RpdmF0ZWRSb3V0ZXJTdGF0ZVNuYXBzaG90PiB7XHJcbiAgICBwcml2YXRlIHJvdXRpbmdDb25maWc7XHJcbiAgICBzZXJpYWxpemUocm91dGVyU3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBBY3RpdmF0ZWRSb3V0ZXJTdGF0ZVNuYXBzaG90O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBzZW1hbnRpYyByb3V0ZSBuYW1lIGZvciBnaXZlbiBwYWdlIGxhYmVsLlxyXG4gICAgICpcclxuICAgICAqICpOT1RFKjogSXQgd29ya3Mgb25seSBmb3Igc2ltcGxlIHN0YXRpYyB1cmxzIHRoYXQgYXJlIGVxdWFsIHRvIHRoZSBwYWdlIGxhYmVsXHJcbiAgICAgKiBvZiBjbXMtZHJpdmVuIGNvbnRlbnQgcGFnZS4gRm9yIGV4YW1wbGU6IGAvbXktYWNjb3VudC9hZGRyZXNzLWJvb2tgLlxyXG4gICAgICpcclxuICAgICAqIEl0IGRvZXNuJ3Qgd29yayBmb3IgVVJMcyB3aXRoIGR5bmFtaWMgcGFyYW1ldGVycy4gQnV0IHN1Y2ggY2FzZSBjYW4gYmUgaGFuZGxlZFxyXG4gICAgICogYnkgcmVhZGluZyB0aGUgZGVmaW5lZCBgZGF0YS5jeFJvdXRlYCBmcm9tIHRoZSBBbmd1bGFyIFJvdXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBwYXRoIHRvIGJlIGZvdW5kIGluIHRoZSByb3V0aW5nIGNvbmZpZ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGxvb2t1cFNlbWFudGljUm91dGU7XHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0aW5nQ29uZmlnOiBSb3V0aW5nQ29uZmlnU2VydmljZSk7XHJcbn1cclxuIl19