import { UrlMatcher } from '@angular/router';
import { GlobService } from '../../util/glob.service';
import * as ɵngcc0 from '@angular/core';
export declare class UrlMatcherService {
    protected globService: GlobService;
    constructor(globService: GlobService);
    /**
     * Returns a matcher that is always fails
     */
    getFalsy(): UrlMatcher;
    /**
     * Returns a matcher for given list of paths
     */
    getFromPaths(paths: string[]): UrlMatcher;
    /**
     * Returns a matcher that combines the given matchers
     * */
    getCombined(matchers: UrlMatcher[]): UrlMatcher;
    /**
     * Similar to Angular's defaultUrlMatcher. Differences:
     * - the `path` comes from function's argument, not from `route.path`
     * - the empty path `''` is handled here, but in Angular is handled one level higher in the match() function
     */
    protected getFromPath(path?: string): UrlMatcher;
    /**
     * Returns URL matcher that accepts almost everything (like `**` route), but not paths accepted by the given matcher
     */
    getOpposite(originalMatcher: UrlMatcher): UrlMatcher;
    /**
     * Returns URL matcher for the given list of glob-like patterns. Each pattern must start with `/` or `!/`.
     */
    getFromGlob(globPatterns: string[]): UrlMatcher;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UrlMatcherService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLW1hdGNoZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJ1cmwtbWF0Y2hlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXJsTWF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEdsb2JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbC9nbG9iLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBVcmxNYXRjaGVyU2VydmljZSB7XHJcbiAgICBwcm90ZWN0ZWQgZ2xvYlNlcnZpY2U6IEdsb2JTZXJ2aWNlO1xyXG4gICAgY29uc3RydWN0b3IoZ2xvYlNlcnZpY2U6IEdsb2JTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIG1hdGNoZXIgdGhhdCBpcyBhbHdheXMgZmFpbHNcclxuICAgICAqL1xyXG4gICAgZ2V0RmFsc3koKTogVXJsTWF0Y2hlcjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIG1hdGNoZXIgZm9yIGdpdmVuIGxpc3Qgb2YgcGF0aHNcclxuICAgICAqL1xyXG4gICAgZ2V0RnJvbVBhdGhzKHBhdGhzOiBzdHJpbmdbXSk6IFVybE1hdGNoZXI7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBtYXRjaGVyIHRoYXQgY29tYmluZXMgdGhlIGdpdmVuIG1hdGNoZXJzXHJcbiAgICAgKiAqL1xyXG4gICAgZ2V0Q29tYmluZWQobWF0Y2hlcnM6IFVybE1hdGNoZXJbXSk6IFVybE1hdGNoZXI7XHJcbiAgICAvKipcclxuICAgICAqIFNpbWlsYXIgdG8gQW5ndWxhcidzIGRlZmF1bHRVcmxNYXRjaGVyLiBEaWZmZXJlbmNlczpcclxuICAgICAqIC0gdGhlIGBwYXRoYCBjb21lcyBmcm9tIGZ1bmN0aW9uJ3MgYXJndW1lbnQsIG5vdCBmcm9tIGByb3V0ZS5wYXRoYFxyXG4gICAgICogLSB0aGUgZW1wdHkgcGF0aCBgJydgIGlzIGhhbmRsZWQgaGVyZSwgYnV0IGluIEFuZ3VsYXIgaXMgaGFuZGxlZCBvbmUgbGV2ZWwgaGlnaGVyIGluIHRoZSBtYXRjaCgpIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRGcm9tUGF0aChwYXRoPzogc3RyaW5nKTogVXJsTWF0Y2hlcjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBVUkwgbWF0Y2hlciB0aGF0IGFjY2VwdHMgYWxtb3N0IGV2ZXJ5dGhpbmcgKGxpa2UgYCoqYCByb3V0ZSksIGJ1dCBub3QgcGF0aHMgYWNjZXB0ZWQgYnkgdGhlIGdpdmVuIG1hdGNoZXJcclxuICAgICAqL1xyXG4gICAgZ2V0T3Bwb3NpdGUob3JpZ2luYWxNYXRjaGVyOiBVcmxNYXRjaGVyKTogVXJsTWF0Y2hlcjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBVUkwgbWF0Y2hlciBmb3IgdGhlIGdpdmVuIGxpc3Qgb2YgZ2xvYi1saWtlIHBhdHRlcm5zLiBFYWNoIHBhdHRlcm4gbXVzdCBzdGFydCB3aXRoIGAvYCBvciBgIS9gLlxyXG4gICAgICovXHJcbiAgICBnZXRGcm9tR2xvYihnbG9iUGF0dGVybnM6IHN0cmluZ1tdKTogVXJsTWF0Y2hlcjtcclxufVxyXG4iXX0=