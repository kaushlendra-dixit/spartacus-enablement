import { RoutesConfig } from '../routes-config';
import * as ɵngcc0 from '@angular/core';
export declare const enum RouteLoadStrategy {
    /**
     * Don't reload the data on navigation if it was loaded before
     */
    ONCE = "once",
    /**
     * Always reload the data on navigation
     */
    ALWAYS = "always"
}
export declare abstract class RoutingConfig {
    routing?: {
        /**
         * Configuration of semantic routes. Key is route's name. Value is the config specific to this route.
         */
        routes?: RoutesConfig;
        /**
         * When true, it closes the storefront for unauthorized users, except from routes that have individual config flag `protected: false`
         */
        protected?: boolean;
        /**
         * Global load strategy which is used as a fallback for loading data on each navigation
         */
        loadStrategy?: RouteLoadStrategy;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RoutingConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZy1jb25maWcuZC50cyIsInNvdXJjZXMiOlsicm91dGluZy1jb25maWcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlc0NvbmZpZyB9IGZyb20gJy4uL3JvdXRlcy1jb25maWcnO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBlbnVtIFJvdXRlTG9hZFN0cmF0ZWd5IHtcclxuICAgIC8qKlxyXG4gICAgICogRG9uJ3QgcmVsb2FkIHRoZSBkYXRhIG9uIG5hdmlnYXRpb24gaWYgaXQgd2FzIGxvYWRlZCBiZWZvcmVcclxuICAgICAqL1xyXG4gICAgT05DRSA9IFwib25jZVwiLFxyXG4gICAgLyoqXHJcbiAgICAgKiBBbHdheXMgcmVsb2FkIHRoZSBkYXRhIG9uIG5hdmlnYXRpb25cclxuICAgICAqL1xyXG4gICAgQUxXQVlTID0gXCJhbHdheXNcIlxyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFJvdXRpbmdDb25maWcge1xyXG4gICAgcm91dGluZz86IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9mIHNlbWFudGljIHJvdXRlcy4gS2V5IGlzIHJvdXRlJ3MgbmFtZS4gVmFsdWUgaXMgdGhlIGNvbmZpZyBzcGVjaWZpYyB0byB0aGlzIHJvdXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJvdXRlcz86IFJvdXRlc0NvbmZpZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGVuIHRydWUsIGl0IGNsb3NlcyB0aGUgc3RvcmVmcm9udCBmb3IgdW5hdXRob3JpemVkIHVzZXJzLCBleGNlcHQgZnJvbSByb3V0ZXMgdGhhdCBoYXZlIGluZGl2aWR1YWwgY29uZmlnIGZsYWcgYHByb3RlY3RlZDogZmFsc2VgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJvdGVjdGVkPzogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHbG9iYWwgbG9hZCBzdHJhdGVneSB3aGljaCBpcyB1c2VkIGFzIGEgZmFsbGJhY2sgZm9yIGxvYWRpbmcgZGF0YSBvbiBlYWNoIG5hdmlnYXRpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2FkU3RyYXRlZ3k/OiBSb3V0ZUxvYWRTdHJhdGVneTtcclxuICAgIH07XHJcbn1cclxuIl19