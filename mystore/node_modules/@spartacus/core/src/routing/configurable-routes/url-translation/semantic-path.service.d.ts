import { UrlParsingService } from './url-parsing.service';
import { UrlCommands } from './url-command';
import { RoutingConfigService } from '../routing-config.service';
import * as ɵngcc0 from '@angular/core';
export declare class SemanticPathService {
    protected routingConfigService: RoutingConfigService;
    protected urlParser: UrlParsingService;
    readonly ROOT_URL: string[];
    constructor(routingConfigService: RoutingConfigService, urlParser: UrlParsingService);
    /**
     * Returns the first path alias configured for a given route name. It adds `/` at the beginning.
     */
    get(routeName: string): string;
    /**
     * Transforms the array of url commands. Each command can be:
     * a) string - will be left untouched
     * b) object { cxRoute: <route name> } - will be replaced with semantic path
     * c) object { cxRoute: <route name>, params: { ... } } - same as above, but with passed params
     *
     * If the first command is the object with the `cxRoute` property, returns an absolute url (with the first element of the array `'/'`)
     */
    transform(commands: UrlCommands): any[];
    private isRouteCommand;
    private shouldOutputAbsolute;
    private generateUrlPart;
    private standarizeRouteCommand;
    private provideParamsValues;
    private findPathWithFillableParams;
    private getParams;
    private getMappedParamName;
    private warn;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SemanticPathService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtYW50aWMtcGF0aC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInNlbWFudGljLXBhdGguc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVcmxQYXJzaW5nU2VydmljZSB9IGZyb20gJy4vdXJsLXBhcnNpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IFVybENvbW1hbmRzIH0gZnJvbSAnLi91cmwtY29tbWFuZCc7XHJcbmltcG9ydCB7IFJvdXRpbmdDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vcm91dGluZy1jb25maWcuc2VydmljZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbWFudGljUGF0aFNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHJvdXRpbmdDb25maWdTZXJ2aWNlOiBSb3V0aW5nQ29uZmlnU2VydmljZTtcclxuICAgIHByb3RlY3RlZCB1cmxQYXJzZXI6IFVybFBhcnNpbmdTZXJ2aWNlO1xyXG4gICAgcmVhZG9ubHkgUk9PVF9VUkw6IHN0cmluZ1tdO1xyXG4gICAgY29uc3RydWN0b3Iocm91dGluZ0NvbmZpZ1NlcnZpY2U6IFJvdXRpbmdDb25maWdTZXJ2aWNlLCB1cmxQYXJzZXI6IFVybFBhcnNpbmdTZXJ2aWNlKTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZmlyc3QgcGF0aCBhbGlhcyBjb25maWd1cmVkIGZvciBhIGdpdmVuIHJvdXRlIG5hbWUuIEl0IGFkZHMgYC9gIGF0IHRoZSBiZWdpbm5pbmcuXHJcbiAgICAgKi9cclxuICAgIGdldChyb3V0ZU5hbWU6IHN0cmluZyk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgYXJyYXkgb2YgdXJsIGNvbW1hbmRzLiBFYWNoIGNvbW1hbmQgY2FuIGJlOlxyXG4gICAgICogYSkgc3RyaW5nIC0gd2lsbCBiZSBsZWZ0IHVudG91Y2hlZFxyXG4gICAgICogYikgb2JqZWN0IHsgY3hSb3V0ZTogPHJvdXRlIG5hbWU+IH0gLSB3aWxsIGJlIHJlcGxhY2VkIHdpdGggc2VtYW50aWMgcGF0aFxyXG4gICAgICogYykgb2JqZWN0IHsgY3hSb3V0ZTogPHJvdXRlIG5hbWU+LCBwYXJhbXM6IHsgLi4uIH0gfSAtIHNhbWUgYXMgYWJvdmUsIGJ1dCB3aXRoIHBhc3NlZCBwYXJhbXNcclxuICAgICAqXHJcbiAgICAgKiBJZiB0aGUgZmlyc3QgY29tbWFuZCBpcyB0aGUgb2JqZWN0IHdpdGggdGhlIGBjeFJvdXRlYCBwcm9wZXJ0eSwgcmV0dXJucyBhbiBhYnNvbHV0ZSB1cmwgKHdpdGggdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGFycmF5IGAnLydgKVxyXG4gICAgICovXHJcbiAgICB0cmFuc2Zvcm0oY29tbWFuZHM6IFVybENvbW1hbmRzKTogYW55W107XHJcbiAgICBwcml2YXRlIGlzUm91dGVDb21tYW5kO1xyXG4gICAgcHJpdmF0ZSBzaG91bGRPdXRwdXRBYnNvbHV0ZTtcclxuICAgIHByaXZhdGUgZ2VuZXJhdGVVcmxQYXJ0O1xyXG4gICAgcHJpdmF0ZSBzdGFuZGFyaXplUm91dGVDb21tYW5kO1xyXG4gICAgcHJpdmF0ZSBwcm92aWRlUGFyYW1zVmFsdWVzO1xyXG4gICAgcHJpdmF0ZSBmaW5kUGF0aFdpdGhGaWxsYWJsZVBhcmFtcztcclxuICAgIHByaXZhdGUgZ2V0UGFyYW1zO1xyXG4gICAgcHJpdmF0ZSBnZXRNYXBwZWRQYXJhbU5hbWU7XHJcbiAgICBwcml2YXRlIHdhcm47XHJcbn1cclxuIl19