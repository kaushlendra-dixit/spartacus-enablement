import { StateKey, TransferState } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { I18nConfig } from '../../i18n/config/i18n-config';
import { SiteContextConfig } from '../../site-context/config/site-context-config';
import { OccLoadedConfig } from './occ-loaded-config';
import { OccLoadedConfigConverter } from './occ-loaded-config-converter';
import { OccSitesConfigLoader } from './occ-sites-config-loader';
import * as ɵngcc0 from '@angular/core';
export declare const EXTERNAL_CONFIG_TRANSFER_ID: StateKey<string>;
export declare class OccConfigLoaderService {
    protected platform: any;
    protected document: any;
    protected config: any;
    protected sitesConfigLoader: OccSitesConfigLoader;
    protected converter: OccLoadedConfigConverter;
    protected transferState: TransferState;
    protected serverRequestUrl?: string;
    constructor(platform: any, document: any, config: any, sitesConfigLoader: OccSitesConfigLoader, converter: OccLoadedConfigConverter, transferState: TransferState, serverRequestUrl?: string);
    private get currentUrl();
    /**
     * Initializes the Spartacus config asynchronously basing on the external config
     */
    loadConfig(): Promise<I18nConfig | SiteContextConfig>;
    /**
     * Returns the external config
     */
    protected get(): Observable<OccLoadedConfig>;
    /**
     * Loads the external config from backend
     */
    protected load(): Observable<OccLoadedConfig>;
    /**
     * Tries to rehydrate external config in the browser from SSR
     */
    protected rehydrate(): OccLoadedConfig;
    /**
     * Transfers the given external config in SSR to the browser
     *
     * @param externalConfig
     */
    protected transfer(externalConfig: OccLoadedConfig): void;
    protected getConfigChunks(externalConfig: OccLoadedConfig): (I18nConfig | SiteContextConfig)[];
    private shouldReturnI18nChunk;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OccConfigLoaderService, [null, null, null, null, null, { optional: true; }, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWNvbmZpZy1sb2FkZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJvY2MtY29uZmlnLWxvYWRlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlS2V5LCBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSTE4bkNvbmZpZyB9IGZyb20gJy4uLy4uL2kxOG4vY29uZmlnL2kxOG4tY29uZmlnJztcclxuaW1wb3J0IHsgU2l0ZUNvbnRleHRDb25maWcgfSBmcm9tICcuLi8uLi9zaXRlLWNvbnRleHQvY29uZmlnL3NpdGUtY29udGV4dC1jb25maWcnO1xyXG5pbXBvcnQgeyBPY2NMb2FkZWRDb25maWcgfSBmcm9tICcuL29jYy1sb2FkZWQtY29uZmlnJztcclxuaW1wb3J0IHsgT2NjTG9hZGVkQ29uZmlnQ29udmVydGVyIH0gZnJvbSAnLi9vY2MtbG9hZGVkLWNvbmZpZy1jb252ZXJ0ZXInO1xyXG5pbXBvcnQgeyBPY2NTaXRlc0NvbmZpZ0xvYWRlciB9IGZyb20gJy4vb2NjLXNpdGVzLWNvbmZpZy1sb2FkZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBFWFRFUk5BTF9DT05GSUdfVFJBTlNGRVJfSUQ6IFN0YXRlS2V5PHN0cmluZz47XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE9jY0NvbmZpZ0xvYWRlclNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHBsYXRmb3JtOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgZG9jdW1lbnQ6IGFueTtcclxuICAgIHByb3RlY3RlZCBjb25maWc6IGFueTtcclxuICAgIHByb3RlY3RlZCBzaXRlc0NvbmZpZ0xvYWRlcjogT2NjU2l0ZXNDb25maWdMb2FkZXI7XHJcbiAgICBwcm90ZWN0ZWQgY29udmVydGVyOiBPY2NMb2FkZWRDb25maWdDb252ZXJ0ZXI7XHJcbiAgICBwcm90ZWN0ZWQgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZTtcclxuICAgIHByb3RlY3RlZCBzZXJ2ZXJSZXF1ZXN0VXJsPzogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IocGxhdGZvcm06IGFueSwgZG9jdW1lbnQ6IGFueSwgY29uZmlnOiBhbnksIHNpdGVzQ29uZmlnTG9hZGVyOiBPY2NTaXRlc0NvbmZpZ0xvYWRlciwgY29udmVydGVyOiBPY2NMb2FkZWRDb25maWdDb252ZXJ0ZXIsIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsIHNlcnZlclJlcXVlc3RVcmw/OiBzdHJpbmcpO1xyXG4gICAgcHJpdmF0ZSBnZXQgY3VycmVudFVybCgpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgU3BhcnRhY3VzIGNvbmZpZyBhc3luY2hyb25vdXNseSBiYXNpbmcgb24gdGhlIGV4dGVybmFsIGNvbmZpZ1xyXG4gICAgICovXHJcbiAgICBsb2FkQ29uZmlnKCk6IFByb21pc2U8STE4bkNvbmZpZyB8IFNpdGVDb250ZXh0Q29uZmlnPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZXh0ZXJuYWwgY29uZmlnXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXQoKTogT2JzZXJ2YWJsZTxPY2NMb2FkZWRDb25maWc+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkcyB0aGUgZXh0ZXJuYWwgY29uZmlnIGZyb20gYmFja2VuZFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbG9hZCgpOiBPYnNlcnZhYmxlPE9jY0xvYWRlZENvbmZpZz47XHJcbiAgICAvKipcclxuICAgICAqIFRyaWVzIHRvIHJlaHlkcmF0ZSBleHRlcm5hbCBjb25maWcgaW4gdGhlIGJyb3dzZXIgZnJvbSBTU1JcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlaHlkcmF0ZSgpOiBPY2NMb2FkZWRDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zZmVycyB0aGUgZ2l2ZW4gZXh0ZXJuYWwgY29uZmlnIGluIFNTUiB0byB0aGUgYnJvd3NlclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBleHRlcm5hbENvbmZpZ1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgdHJhbnNmZXIoZXh0ZXJuYWxDb25maWc6IE9jY0xvYWRlZENvbmZpZyk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgZ2V0Q29uZmlnQ2h1bmtzKGV4dGVybmFsQ29uZmlnOiBPY2NMb2FkZWRDb25maWcpOiAoSTE4bkNvbmZpZyB8IFNpdGVDb250ZXh0Q29uZmlnKVtdO1xyXG4gICAgcHJpdmF0ZSBzaG91bGRSZXR1cm5JMThuQ2h1bms7XHJcbn1cclxuIl19