import * as ɵngcc0 from '@angular/core';
export declare class JavaRegExpConverter {
    /**
     * Pattern that extracts modifiers from the Java regexp.
     *
     * Java regexps MAY start with ONE or MANY modifiers like `(?MODIFIERS)PATTERN`. Examples:
     * - `(?i)` for Case Insensitive Mode: `(?i)PATTERN`
     * - `(?u)` for Unicode-Aware Case Folding; `(?u)PATTERN`
     * - or multiple combined:  `(?iu)PATTERN`
     * - (more modifiers in the official Java docs https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)
     *
     * This pattern extracts 3 parts from the input string, i.e. for `(?iu)PATTERN`:
     *    1. original modifiers syntax, i.e. `(?iu)` (or undefined if no modifiers present)
     *    2. extracted modifiers, i.e. `iu` (or undefined if no modifiers present)
     *    3. the rest of the regexp, i.e. `PATTERN`
     */
    private readonly EXTRACT_JAVA_REGEXP_MODIFIERS;
    /**
     * Converts RegExp from Java syntax to Javascript, by recognizing Java regexp modifiers
     * and converting them to the Javascript ones (i.e. case insensitive mode: `(?i)PATTERN` -> `/pattern/i`)
     *
     * **CAUTION!** Not all features and modifiers of Java regexps are valid in Javascript!
     * If unsupported feature or modifier is used, then `null` will be returned instead of Javascript RegExp.
     *
     * See differences between Java and Javascript regexps:
     * - https://stackoverflow.com/questions/8754444/convert-javascript-regular-expression-to-java-syntax
     * - https://en.wikipedia.org/wiki/Comparison_of_regular_expression_engines#Language_features
     */
    toJsRegExp(javaSyntax: string): RegExp;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JavaRegExpConverter, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YS1yZWctZXhwLWNvbnZlcnRlci5kLnRzIiwic291cmNlcyI6WyJqYXZhLXJlZy1leHAtY29udmVydGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlY2xhcmUgY2xhc3MgSmF2YVJlZ0V4cENvbnZlcnRlciB7XHJcbiAgICAvKipcclxuICAgICAqIFBhdHRlcm4gdGhhdCBleHRyYWN0cyBtb2RpZmllcnMgZnJvbSB0aGUgSmF2YSByZWdleHAuXHJcbiAgICAgKlxyXG4gICAgICogSmF2YSByZWdleHBzIE1BWSBzdGFydCB3aXRoIE9ORSBvciBNQU5ZIG1vZGlmaWVycyBsaWtlIGAoP01PRElGSUVSUylQQVRURVJOYC4gRXhhbXBsZXM6XHJcbiAgICAgKiAtIGAoP2kpYCBmb3IgQ2FzZSBJbnNlbnNpdGl2ZSBNb2RlOiBgKD9pKVBBVFRFUk5gXHJcbiAgICAgKiAtIGAoP3UpYCBmb3IgVW5pY29kZS1Bd2FyZSBDYXNlIEZvbGRpbmc7IGAoP3UpUEFUVEVSTmBcclxuICAgICAqIC0gb3IgbXVsdGlwbGUgY29tYmluZWQ6ICBgKD9pdSlQQVRURVJOYFxyXG4gICAgICogLSAobW9yZSBtb2RpZmllcnMgaW4gdGhlIG9mZmljaWFsIEphdmEgZG9jcyBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvOC9kb2NzL2FwaS9qYXZhL3V0aWwvcmVnZXgvUGF0dGVybi5odG1sKVxyXG4gICAgICpcclxuICAgICAqIFRoaXMgcGF0dGVybiBleHRyYWN0cyAzIHBhcnRzIGZyb20gdGhlIGlucHV0IHN0cmluZywgaS5lLiBmb3IgYCg/aXUpUEFUVEVSTmA6XHJcbiAgICAgKiAgICAxLiBvcmlnaW5hbCBtb2RpZmllcnMgc3ludGF4LCBpLmUuIGAoP2l1KWAgKG9yIHVuZGVmaW5lZCBpZiBubyBtb2RpZmllcnMgcHJlc2VudClcclxuICAgICAqICAgIDIuIGV4dHJhY3RlZCBtb2RpZmllcnMsIGkuZS4gYGl1YCAob3IgdW5kZWZpbmVkIGlmIG5vIG1vZGlmaWVycyBwcmVzZW50KVxyXG4gICAgICogICAgMy4gdGhlIHJlc3Qgb2YgdGhlIHJlZ2V4cCwgaS5lLiBgUEFUVEVSTmBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBFWFRSQUNUX0pBVkFfUkVHRVhQX01PRElGSUVSUztcclxuICAgIC8qKlxyXG4gICAgICogQ29udmVydHMgUmVnRXhwIGZyb20gSmF2YSBzeW50YXggdG8gSmF2YXNjcmlwdCwgYnkgcmVjb2duaXppbmcgSmF2YSByZWdleHAgbW9kaWZpZXJzXHJcbiAgICAgKiBhbmQgY29udmVydGluZyB0aGVtIHRvIHRoZSBKYXZhc2NyaXB0IG9uZXMgKGkuZS4gY2FzZSBpbnNlbnNpdGl2ZSBtb2RlOiBgKD9pKVBBVFRFUk5gIC0+IGAvcGF0dGVybi9pYClcclxuICAgICAqXHJcbiAgICAgKiAqKkNBVVRJT04hKiogTm90IGFsbCBmZWF0dXJlcyBhbmQgbW9kaWZpZXJzIG9mIEphdmEgcmVnZXhwcyBhcmUgdmFsaWQgaW4gSmF2YXNjcmlwdCFcclxuICAgICAqIElmIHVuc3VwcG9ydGVkIGZlYXR1cmUgb3IgbW9kaWZpZXIgaXMgdXNlZCwgdGhlbiBgbnVsbGAgd2lsbCBiZSByZXR1cm5lZCBpbnN0ZWFkIG9mIEphdmFzY3JpcHQgUmVnRXhwLlxyXG4gICAgICpcclxuICAgICAqIFNlZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIEphdmEgYW5kIEphdmFzY3JpcHQgcmVnZXhwczpcclxuICAgICAqIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODc1NDQ0NC9jb252ZXJ0LWphdmFzY3JpcHQtcmVndWxhci1leHByZXNzaW9uLXRvLWphdmEtc3ludGF4XHJcbiAgICAgKiAtIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbXBhcmlzb25fb2ZfcmVndWxhcl9leHByZXNzaW9uX2VuZ2luZXMjTGFuZ3VhZ2VfZmVhdHVyZXNcclxuICAgICAqL1xyXG4gICAgdG9Kc1JlZ0V4cChqYXZhU3ludGF4OiBzdHJpbmcpOiBSZWdFeHA7XHJcbn1cclxuIl19