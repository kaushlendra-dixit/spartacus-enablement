import { I18nConfig } from '../../i18n';
import { BaseSite } from '../../model/misc.model';
import { SiteContextConfig } from '../../site-context/config/site-context-config';
import { JavaRegExpConverter } from './java-reg-exp-converter';
import { OccLoadedConfig } from './occ-loaded-config';
import * as ɵngcc0 from '@angular/core';
export declare class OccLoadedConfigConverter {
    private javaRegExpConverter;
    constructor(javaRegExpConverter: JavaRegExpConverter);
    fromOccBaseSites(baseSites: BaseSite[], currentUrl: string): OccLoadedConfig;
    toSiteContextConfig({ baseSite, languages, currencies, urlParameters: urlEncodingAttributes, }: OccLoadedConfig): SiteContextConfig;
    toI18nConfig({ languages }: OccLoadedConfig): I18nConfig;
    private isCurrentBaseSite;
    /**
     * Returns an array of url encoded site context parameters.
     *
     * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
     */
    private getUrlParams;
    /**
     * Returns iso codes in a array, where the first element is the default iso code.
     */
    private getIsoCodes;
    /**
     * Moves to the start of the array the first element that satisfies the given predicate.
     *
     * @param array array to modify
     * @param predicate function called on elements
     */
    private moveToFirst;
    private getError;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OccLoadedConfigConverter, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWxvYWRlZC1jb25maWctY29udmVydGVyLmQudHMiLCJzb3VyY2VzIjpbIm9jYy1sb2FkZWQtY29uZmlnLWNvbnZlcnRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJMThuQ29uZmlnIH0gZnJvbSAnLi4vLi4vaTE4bic7XHJcbmltcG9ydCB7IEJhc2VTaXRlIH0gZnJvbSAnLi4vLi4vbW9kZWwvbWlzYy5tb2RlbCc7XHJcbmltcG9ydCB7IFNpdGVDb250ZXh0Q29uZmlnIH0gZnJvbSAnLi4vLi4vc2l0ZS1jb250ZXh0L2NvbmZpZy9zaXRlLWNvbnRleHQtY29uZmlnJztcclxuaW1wb3J0IHsgSmF2YVJlZ0V4cENvbnZlcnRlciB9IGZyb20gJy4vamF2YS1yZWctZXhwLWNvbnZlcnRlcic7XHJcbmltcG9ydCB7IE9jY0xvYWRlZENvbmZpZyB9IGZyb20gJy4vb2NjLWxvYWRlZC1jb25maWcnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPY2NMb2FkZWRDb25maWdDb252ZXJ0ZXIge1xyXG4gICAgcHJpdmF0ZSBqYXZhUmVnRXhwQ29udmVydGVyO1xyXG4gICAgY29uc3RydWN0b3IoamF2YVJlZ0V4cENvbnZlcnRlcjogSmF2YVJlZ0V4cENvbnZlcnRlcik7XHJcbiAgICBmcm9tT2NjQmFzZVNpdGVzKGJhc2VTaXRlczogQmFzZVNpdGVbXSwgY3VycmVudFVybDogc3RyaW5nKTogT2NjTG9hZGVkQ29uZmlnO1xyXG4gICAgdG9TaXRlQ29udGV4dENvbmZpZyh7IGJhc2VTaXRlLCBsYW5ndWFnZXMsIGN1cnJlbmNpZXMsIHVybFBhcmFtZXRlcnM6IHVybEVuY29kaW5nQXR0cmlidXRlcywgfTogT2NjTG9hZGVkQ29uZmlnKTogU2l0ZUNvbnRleHRDb25maWc7XHJcbiAgICB0b0kxOG5Db25maWcoeyBsYW5ndWFnZXMgfTogT2NjTG9hZGVkQ29uZmlnKTogSTE4bkNvbmZpZztcclxuICAgIHByaXZhdGUgaXNDdXJyZW50QmFzZVNpdGU7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgdXJsIGVuY29kZWQgc2l0ZSBjb250ZXh0IHBhcmFtZXRlcnMuXHJcbiAgICAgKlxyXG4gICAgICogSXQgbWFwcyB0aGUgc3RyaW5nIFwic3RvcmVmcm9udFwiICh1c2VkIGluIE9DQykgdG8gdGhlIFwiYmFzZVNpdGVcIiAodXNlZCBpbiBTcGFydGFjdXMpXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0VXJsUGFyYW1zO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGlzbyBjb2RlcyBpbiBhIGFycmF5LCB3aGVyZSB0aGUgZmlyc3QgZWxlbWVudCBpcyB0aGUgZGVmYXVsdCBpc28gY29kZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRJc29Db2RlcztcclxuICAgIC8qKlxyXG4gICAgICogTW92ZXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSBhcnJheSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IHNhdGlzZmllcyB0aGUgZ2l2ZW4gcHJlZGljYXRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcnJheSBhcnJheSB0byBtb2RpZnlcclxuICAgICAqIEBwYXJhbSBwcmVkaWNhdGUgZnVuY3Rpb24gY2FsbGVkIG9uIGVsZW1lbnRzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbW92ZVRvRmlyc3Q7XHJcbiAgICBwcml2YXRlIGdldEVycm9yO1xyXG59XHJcbiJdfQ==