import { OccConfig } from '../../../config/occ-config';
import { Occ } from '../../../occ-models/occ.models';
import { Converter } from '../../../../util/converter.service';
import { Product } from '../../../../model/product.model';
import { Images } from '../../../../model/image.model';
import * as ɵngcc0 from '@angular/core';
export declare class ProductImageNormalizer implements Converter<Occ.Product, Product> {
    protected config: OccConfig;
    constructor(config: OccConfig);
    convert(source: Occ.Product, target?: Product): Product;
    /**
     * @desc
     * Creates the image structure we'd like to have. Instead of
     * having a single list with all images despite type and format
     * we create a proper structure. With that we can do:
     * - images.primary.thumnail.url
     * - images.GALLERY[0].thumnail.url
     */
    normalize(source: Occ.Image[]): Images;
    /**
     * Traditionally, in an on-prem world, medias and other backend related calls
     * are hosted at the same platform, but in a cloud setup, applications are are
     * typically distributed cross different environments. For media, we use the
     * `backend.media.baseUrl` by default, but fallback to `backend.occ.baseUrl`
     * if none provided.
     */
    private normalizeImageUrl;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProductImageNormalizer, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1pbWFnZS1ub3JtYWxpemVyLmQudHMiLCJzb3VyY2VzIjpbInByb2R1Y3QtaW1hZ2Utbm9ybWFsaXplci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL29jYy1jb25maWcnO1xyXG5pbXBvcnQgeyBPY2MgfSBmcm9tICcuLi8uLi8uLi9vY2MtbW9kZWxzL29jYy5tb2RlbHMnO1xyXG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsL2NvbnZlcnRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUHJvZHVjdCB9IGZyb20gJy4uLy4uLy4uLy4uL21vZGVsL3Byb2R1Y3QubW9kZWwnO1xyXG5pbXBvcnQgeyBJbWFnZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9tb2RlbC9pbWFnZS5tb2RlbCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFByb2R1Y3RJbWFnZU5vcm1hbGl6ZXIgaW1wbGVtZW50cyBDb252ZXJ0ZXI8T2NjLlByb2R1Y3QsIFByb2R1Y3Q+IHtcclxuICAgIHByb3RlY3RlZCBjb25maWc6IE9jY0NvbmZpZztcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogT2NjQ29uZmlnKTtcclxuICAgIGNvbnZlcnQoc291cmNlOiBPY2MuUHJvZHVjdCwgdGFyZ2V0PzogUHJvZHVjdCk6IFByb2R1Y3Q7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjXHJcbiAgICAgKiBDcmVhdGVzIHRoZSBpbWFnZSBzdHJ1Y3R1cmUgd2UnZCBsaWtlIHRvIGhhdmUuIEluc3RlYWQgb2ZcclxuICAgICAqIGhhdmluZyBhIHNpbmdsZSBsaXN0IHdpdGggYWxsIGltYWdlcyBkZXNwaXRlIHR5cGUgYW5kIGZvcm1hdFxyXG4gICAgICogd2UgY3JlYXRlIGEgcHJvcGVyIHN0cnVjdHVyZS4gV2l0aCB0aGF0IHdlIGNhbiBkbzpcclxuICAgICAqIC0gaW1hZ2VzLnByaW1hcnkudGh1bW5haWwudXJsXHJcbiAgICAgKiAtIGltYWdlcy5HQUxMRVJZWzBdLnRodW1uYWlsLnVybFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemUoc291cmNlOiBPY2MuSW1hZ2VbXSk6IEltYWdlcztcclxuICAgIC8qKlxyXG4gICAgICogVHJhZGl0aW9uYWxseSwgaW4gYW4gb24tcHJlbSB3b3JsZCwgbWVkaWFzIGFuZCBvdGhlciBiYWNrZW5kIHJlbGF0ZWQgY2FsbHNcclxuICAgICAqIGFyZSBob3N0ZWQgYXQgdGhlIHNhbWUgcGxhdGZvcm0sIGJ1dCBpbiBhIGNsb3VkIHNldHVwLCBhcHBsaWNhdGlvbnMgYXJlIGFyZVxyXG4gICAgICogdHlwaWNhbGx5IGRpc3RyaWJ1dGVkIGNyb3NzIGRpZmZlcmVudCBlbnZpcm9ubWVudHMuIEZvciBtZWRpYSwgd2UgdXNlIHRoZVxyXG4gICAgICogYGJhY2tlbmQubWVkaWEuYmFzZVVybGAgYnkgZGVmYXVsdCwgYnV0IGZhbGxiYWNrIHRvIGBiYWNrZW5kLm9jYy5iYXNlVXJsYFxyXG4gICAgICogaWYgbm9uZSBwcm92aWRlZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBub3JtYWxpemVJbWFnZVVybDtcclxufVxyXG4iXX0=