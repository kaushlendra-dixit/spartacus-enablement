import { OccConfig } from '../config/occ-config';
import * as ɵngcc0 from '@angular/core';
export declare class LoadingScopesService {
    protected config: OccConfig;
    constructor(config: OccConfig);
    /**
     * Aims to expand scopes based on loading scopes config.
     *
     * I.e. if 'details' scope includes 'list' scope by configuration, it'll return ['details', 'list']
     *
     * If scope data overlaps with each other, the data should be merged in the order of scopes provided,
     * i.e. the last scope is merged last, overwriting parts of the data already provided by preceding scope.
     * It should apply also to implicit scopes (that are included by configuration).
     *
     * @param model
     * @param scopes
     */
    expand(model: string, scopes: string[]): string[];
    /**
     * Return maxAge for product scope in milliseconds
     *
     * @param model
     * @param scope
     */
    getMaxAge(model: string, scope: string): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LoadingScopesService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1zY29wZXMuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJsb2FkaW5nLXNjb3Blcy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9jY0NvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9vY2MtY29uZmlnJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTG9hZGluZ1Njb3Blc1NlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogT2NjQ29uZmlnO1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBPY2NDb25maWcpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBaW1zIHRvIGV4cGFuZCBzY29wZXMgYmFzZWQgb24gbG9hZGluZyBzY29wZXMgY29uZmlnLlxyXG4gICAgICpcclxuICAgICAqIEkuZS4gaWYgJ2RldGFpbHMnIHNjb3BlIGluY2x1ZGVzICdsaXN0JyBzY29wZSBieSBjb25maWd1cmF0aW9uLCBpdCdsbCByZXR1cm4gWydkZXRhaWxzJywgJ2xpc3QnXVxyXG4gICAgICpcclxuICAgICAqIElmIHNjb3BlIGRhdGEgb3ZlcmxhcHMgd2l0aCBlYWNoIG90aGVyLCB0aGUgZGF0YSBzaG91bGQgYmUgbWVyZ2VkIGluIHRoZSBvcmRlciBvZiBzY29wZXMgcHJvdmlkZWQsXHJcbiAgICAgKiBpLmUuIHRoZSBsYXN0IHNjb3BlIGlzIG1lcmdlZCBsYXN0LCBvdmVyd3JpdGluZyBwYXJ0cyBvZiB0aGUgZGF0YSBhbHJlYWR5IHByb3ZpZGVkIGJ5IHByZWNlZGluZyBzY29wZS5cclxuICAgICAqIEl0IHNob3VsZCBhcHBseSBhbHNvIHRvIGltcGxpY2l0IHNjb3BlcyAodGhhdCBhcmUgaW5jbHVkZWQgYnkgY29uZmlndXJhdGlvbikuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVzXHJcbiAgICAgKi9cclxuICAgIGV4cGFuZChtb2RlbDogc3RyaW5nLCBzY29wZXM6IHN0cmluZ1tdKTogc3RyaW5nW107XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBtYXhBZ2UgZm9yIHByb2R1Y3Qgc2NvcGUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG1vZGVsXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVcclxuICAgICAqL1xyXG4gICAgZ2V0TWF4QWdlKG1vZGVsOiBzdHJpbmcsIHNjb3BlOiBzdHJpbmcpOiBudW1iZXI7XHJcbn1cclxuIl19