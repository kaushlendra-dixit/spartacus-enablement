import { HttpErrorResponse, HttpRequest } from '@angular/common/http';
import { GlobalMessageService } from '../../facade/global-message.service';
import { Applicable, Priority } from '../../../util/applicable';
import * as ɵngcc0 from '@angular/core';
export declare abstract class HttpErrorHandler implements Applicable {
    protected globalMessageService: GlobalMessageService;
    constructor(globalMessageService: GlobalMessageService);
    /**
     * The http response status number which is handled by this handler.
     * Implementations can set the response status number, i.e. 404, so that
     * the handler can be found by the error interceptor.
     */
    responseStatus?: number;
    /**
     * Handles the error response for the respose status that is register for the handler
     * @param { HttpRequest<any> } request : http request
     * @param { HttpErrorResponse } errorResponse : Http error response
     */
    abstract handleError(request: HttpRequest<any>, errorResponse: HttpErrorResponse): void;
    /**
     * Error handlers are matched by the error `responseStatus` (i.e. 404). On top of the matching status
     * a priority can be added to distinguish multiple handles for the same response status.
     */
    hasMatch(errorResponse: HttpErrorResponse): boolean;
    abstract getPriority?(): Priority;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HttpErrorHandler, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1lcnJvci5oYW5kbGVyLmQudHMiLCJzb3VyY2VzIjpbImh0dHAtZXJyb3IuaGFuZGxlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEdsb2JhbE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZmFjYWRlL2dsb2JhbC1tZXNzYWdlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBcHBsaWNhYmxlLCBQcmlvcml0eSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvYXBwbGljYWJsZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIEh0dHBFcnJvckhhbmRsZXIgaW1wbGVtZW50cyBBcHBsaWNhYmxlIHtcclxuICAgIHByb3RlY3RlZCBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2U7XHJcbiAgICBjb25zdHJ1Y3RvcihnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaHR0cCByZXNwb25zZSBzdGF0dXMgbnVtYmVyIHdoaWNoIGlzIGhhbmRsZWQgYnkgdGhpcyBoYW5kbGVyLlxyXG4gICAgICogSW1wbGVtZW50YXRpb25zIGNhbiBzZXQgdGhlIHJlc3BvbnNlIHN0YXR1cyBudW1iZXIsIGkuZS4gNDA0LCBzbyB0aGF0XHJcbiAgICAgKiB0aGUgaGFuZGxlciBjYW4gYmUgZm91bmQgYnkgdGhlIGVycm9yIGludGVyY2VwdG9yLlxyXG4gICAgICovXHJcbiAgICByZXNwb25zZVN0YXR1cz86IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUgZXJyb3IgcmVzcG9uc2UgZm9yIHRoZSByZXNwb3NlIHN0YXR1cyB0aGF0IGlzIHJlZ2lzdGVyIGZvciB0aGUgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIHsgSHR0cFJlcXVlc3Q8YW55PiB9IHJlcXVlc3QgOiBodHRwIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZXJyb3JSZXNwb25zZSA6IEh0dHAgZXJyb3IgcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgaGFuZGxlRXJyb3IocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgZXJyb3JSZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFcnJvciBoYW5kbGVycyBhcmUgbWF0Y2hlZCBieSB0aGUgZXJyb3IgYHJlc3BvbnNlU3RhdHVzYCAoaS5lLiA0MDQpLiBPbiB0b3Agb2YgdGhlIG1hdGNoaW5nIHN0YXR1c1xyXG4gICAgICogYSBwcmlvcml0eSBjYW4gYmUgYWRkZWQgdG8gZGlzdGluZ3Vpc2ggbXVsdGlwbGUgaGFuZGxlcyBmb3IgdGhlIHNhbWUgcmVzcG9uc2Ugc3RhdHVzLlxyXG4gICAgICovXHJcbiAgICBoYXNNYXRjaChlcnJvclJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSk6IGJvb2xlYW47XHJcbiAgICBhYnN0cmFjdCBnZXRQcmlvcml0eT8oKTogUHJpb3JpdHk7XHJcbn1cclxuIl19