import { Type } from '@angular/core';
import { Observable } from 'rxjs';
/**
 * A service to register and observe event sources. Events are driven by event types, which are class signatures
 * for the given event.
 *
 * It is possible to register multiple sources to a single event, even without
 * knowing as multiple decoupled features can attach sources to the same
 * event type.
 */
import * as ɵngcc0 from '@angular/core';
export declare class EventService {
    /**
     * The various events meta are collected in a map, stored by the event type class
     */
    private eventsMeta;
    /**
     * Register an event source for the given event type.
     *
     * CAUTION: To avoid memory leaks, the returned teardown function should be called
     *  when the event source is no longer maintained by its creator
     * (i.e. in `ngOnDestroy` if the event source was registered in the component).
     *
     * @param eventType the event type
     * @param source$ an observable that represents the source
     *
     * @returns a teardown function which unregisters the given event source
     */
    register<T>(eventType: Type<T>, source$: Observable<T>): () => void;
    /**
     * Returns a stream of events for the given event type
     * @param eventTypes event type
     */
    get<T>(eventType: Type<T>): Observable<T>;
    /**
     * Dispatches an instance of an individual event.
     */
    dispatch(event: Object): void;
    /**
     * Returns the input subject used to dispatch a single event.
     * The subject is created on demand, when it's needed for the first time.
     * @param eventType type of event
     */
    private getInputSubject;
    /**
     * Returns the event meta object for the given event type
     */
    private getEventMeta;
    /**
     * Creates the event meta object for the given event type
     */
    private createEventMeta;
    /**
     * Checks if the event type is a valid type (is a class with constructor).
     *
     * Should be used only in dev mode.
     */
    private validateEventType;
    /**
     * Returns the given event source with runtime validation whether the emitted values are instances of given event type.
     *
     * Should be used only in dev mode.
     */
    private getValidatedEventStream;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EventService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJldmVudC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG4vKipcclxuICogQSBzZXJ2aWNlIHRvIHJlZ2lzdGVyIGFuZCBvYnNlcnZlIGV2ZW50IHNvdXJjZXMuIEV2ZW50cyBhcmUgZHJpdmVuIGJ5IGV2ZW50IHR5cGVzLCB3aGljaCBhcmUgY2xhc3Mgc2lnbmF0dXJlc1xyXG4gKiBmb3IgdGhlIGdpdmVuIGV2ZW50LlxyXG4gKlxyXG4gKiBJdCBpcyBwb3NzaWJsZSB0byByZWdpc3RlciBtdWx0aXBsZSBzb3VyY2VzIHRvIGEgc2luZ2xlIGV2ZW50LCBldmVuIHdpdGhvdXRcclxuICoga25vd2luZyBhcyBtdWx0aXBsZSBkZWNvdXBsZWQgZmVhdHVyZXMgY2FuIGF0dGFjaCBzb3VyY2VzIHRvIHRoZSBzYW1lXHJcbiAqIGV2ZW50IHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFdmVudFNlcnZpY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdmFyaW91cyBldmVudHMgbWV0YSBhcmUgY29sbGVjdGVkIGluIGEgbWFwLCBzdG9yZWQgYnkgdGhlIGV2ZW50IHR5cGUgY2xhc3NcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBldmVudHNNZXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhbiBldmVudCBzb3VyY2UgZm9yIHRoZSBnaXZlbiBldmVudCB0eXBlLlxyXG4gICAgICpcclxuICAgICAqIENBVVRJT046IFRvIGF2b2lkIG1lbW9yeSBsZWFrcywgdGhlIHJldHVybmVkIHRlYXJkb3duIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWRcclxuICAgICAqICB3aGVuIHRoZSBldmVudCBzb3VyY2UgaXMgbm8gbG9uZ2VyIG1haW50YWluZWQgYnkgaXRzIGNyZWF0b3JcclxuICAgICAqIChpLmUuIGluIGBuZ09uRGVzdHJveWAgaWYgdGhlIGV2ZW50IHNvdXJjZSB3YXMgcmVnaXN0ZXJlZCBpbiB0aGUgY29tcG9uZW50KS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRUeXBlIHRoZSBldmVudCB0eXBlXHJcbiAgICAgKiBAcGFyYW0gc291cmNlJCBhbiBvYnNlcnZhYmxlIHRoYXQgcmVwcmVzZW50cyB0aGUgc291cmNlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgYSB0ZWFyZG93biBmdW5jdGlvbiB3aGljaCB1bnJlZ2lzdGVycyB0aGUgZ2l2ZW4gZXZlbnQgc291cmNlXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyPFQ+KGV2ZW50VHlwZTogVHlwZTxUPiwgc291cmNlJDogT2JzZXJ2YWJsZTxUPik6ICgpID0+IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdHJlYW0gb2YgZXZlbnRzIGZvciB0aGUgZ2l2ZW4gZXZlbnQgdHlwZVxyXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZXMgZXZlbnQgdHlwZVxyXG4gICAgICovXHJcbiAgICBnZXQ8VD4oZXZlbnRUeXBlOiBUeXBlPFQ+KTogT2JzZXJ2YWJsZTxUPjtcclxuICAgIC8qKlxyXG4gICAgICogRGlzcGF0Y2hlcyBhbiBpbnN0YW5jZSBvZiBhbiBpbmRpdmlkdWFsIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICBkaXNwYXRjaChldmVudDogT2JqZWN0KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgaW5wdXQgc3ViamVjdCB1c2VkIHRvIGRpc3BhdGNoIGEgc2luZ2xlIGV2ZW50LlxyXG4gICAgICogVGhlIHN1YmplY3QgaXMgY3JlYXRlZCBvbiBkZW1hbmQsIHdoZW4gaXQncyBuZWVkZWQgZm9yIHRoZSBmaXJzdCB0aW1lLlxyXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZSB0eXBlIG9mIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0SW5wdXRTdWJqZWN0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBldmVudCBtZXRhIG9iamVjdCBmb3IgdGhlIGdpdmVuIGV2ZW50IHR5cGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRFdmVudE1ldGE7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIGV2ZW50IG1ldGEgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZXZlbnQgdHlwZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZUV2ZW50TWV0YTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIHRoZSBldmVudCB0eXBlIGlzIGEgdmFsaWQgdHlwZSAoaXMgYSBjbGFzcyB3aXRoIGNvbnN0cnVjdG9yKS5cclxuICAgICAqXHJcbiAgICAgKiBTaG91bGQgYmUgdXNlZCBvbmx5IGluIGRldiBtb2RlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHZhbGlkYXRlRXZlbnRUeXBlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBnaXZlbiBldmVudCBzb3VyY2Ugd2l0aCBydW50aW1lIHZhbGlkYXRpb24gd2hldGhlciB0aGUgZW1pdHRlZCB2YWx1ZXMgYXJlIGluc3RhbmNlcyBvZiBnaXZlbiBldmVudCB0eXBlLlxyXG4gICAgICpcclxuICAgICAqIFNob3VsZCBiZSB1c2VkIG9ubHkgaW4gZGV2IG1vZGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0VmFsaWRhdGVkRXZlbnRTdHJlYW07XHJcbn1cclxuIl19