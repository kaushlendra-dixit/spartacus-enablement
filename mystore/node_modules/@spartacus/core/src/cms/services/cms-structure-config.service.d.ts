import { Observable } from 'rxjs';
import { CmsPageConfig, CmsPageSlotsConfig, CmsStructureConfig } from '../config/cms-structure.config';
import { ContentSlotComponentData } from '../model/content-slot-component-data.model';
import { CmsStructureModel } from '../model/page.model';
/**
 * Service that provides access to CMS structure from a static
 * configuration or configuration file. This class uses static
 * configuration is designed in async fashion so that configurations
 * can be loaded from a file or stream.
 *
 * The intent of the `CmsStructureConfigService` however is to provide
 * fast loading pages and default cms structure for commodity commerce.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class CmsStructureConfigService {
    protected cmsDataConfig: CmsStructureConfig;
    constructor(cmsDataConfig: CmsStructureConfig);
    /**
     * Merge the cms structure to the pageStructure. The page structure
     * can either hold complete page structures or global structures that
     * might apply to all pages (such has header coponents).
     */
    mergePageStructure(pageId: string, pageStructure: CmsStructureModel): Observable<CmsStructureModel>;
    /**
     *
     * Returns boolean observable to indicate whether the page should not be
     * loaded from the backend. This is useful for pages which are comoditized
     * and follow best practice.
     *
     * By default, configurable pages are driven by static configuration,
     * in order to allow for fast loading pages (preventing network delays).
     */
    shouldIgnoreBackend(pageId: string): Observable<boolean>;
    /**
     * returns an Observable component data from the static configuration.
     */
    getComponentFromConfig(componentId: string): Observable<ContentSlotComponentData | any>;
    /**
     * returns an Observable components data from the static configuration.
     */
    getComponentsFromConfig(ids: string[]): Observable<ContentSlotComponentData[]>;
    /**
     * returns an observable with the `PageConfig`.
     */
    protected getPageFromConfig(pageId: string): Observable<CmsPageConfig>;
    /**
     * Merge page data from the configuration into the given structure, if any.
     * If the given page structure is empty, a page is created and the page slots are
     * are merged into the page.
     */
    protected mergePage(pageId: string, pageStructure: CmsStructureModel): Observable<CmsStructureModel>;
    /**
     * Adds any pre-configured slots for pages that do not use them.
     * If pages have a slot for the given position, the configiuration
     * is ingored. Even if the slot does not have inner structure (such as
     * components), so that the cms structure is able to override the (static)
     * configuration.
     */
    protected mergeSlots(pageStructure: CmsStructureModel, slots?: CmsPageSlotsConfig): Observable<CmsStructureModel>;
    protected getComponentsByPosition(slots: CmsPageSlotsConfig, position: string): ContentSlotComponentData[];
    protected getComponentById(componentId: string): ContentSlotComponentData;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CmsStructureConfigService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXN0cnVjdHVyZS1jb25maWcuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlLWNvbmZpZy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ21zUGFnZUNvbmZpZywgQ21zUGFnZVNsb3RzQ29uZmlnLCBDbXNTdHJ1Y3R1cmVDb25maWcgfSBmcm9tICcuLi9jb25maWcvY21zLXN0cnVjdHVyZS5jb25maWcnO1xyXG5pbXBvcnQgeyBDb250ZW50U2xvdENvbXBvbmVudERhdGEgfSBmcm9tICcuLi9tb2RlbC9jb250ZW50LXNsb3QtY29tcG9uZW50LWRhdGEubW9kZWwnO1xyXG5pbXBvcnQgeyBDbXNTdHJ1Y3R1cmVNb2RlbCB9IGZyb20gJy4uL21vZGVsL3BhZ2UubW9kZWwnO1xyXG4vKipcclxuICogU2VydmljZSB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBDTVMgc3RydWN0dXJlIGZyb20gYSBzdGF0aWNcclxuICogY29uZmlndXJhdGlvbiBvciBjb25maWd1cmF0aW9uIGZpbGUuIFRoaXMgY2xhc3MgdXNlcyBzdGF0aWNcclxuICogY29uZmlndXJhdGlvbiBpcyBkZXNpZ25lZCBpbiBhc3luYyBmYXNoaW9uIHNvIHRoYXQgY29uZmlndXJhdGlvbnNcclxuICogY2FuIGJlIGxvYWRlZCBmcm9tIGEgZmlsZSBvciBzdHJlYW0uXHJcbiAqXHJcbiAqIFRoZSBpbnRlbnQgb2YgdGhlIGBDbXNTdHJ1Y3R1cmVDb25maWdTZXJ2aWNlYCBob3dldmVyIGlzIHRvIHByb3ZpZGVcclxuICogZmFzdCBsb2FkaW5nIHBhZ2VzIGFuZCBkZWZhdWx0IGNtcyBzdHJ1Y3R1cmUgZm9yIGNvbW1vZGl0eSBjb21tZXJjZS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIENtc1N0cnVjdHVyZUNvbmZpZ1NlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIGNtc0RhdGFDb25maWc6IENtc1N0cnVjdHVyZUNvbmZpZztcclxuICAgIGNvbnN0cnVjdG9yKGNtc0RhdGFDb25maWc6IENtc1N0cnVjdHVyZUNvbmZpZyk7XHJcbiAgICAvKipcclxuICAgICAqIE1lcmdlIHRoZSBjbXMgc3RydWN0dXJlIHRvIHRoZSBwYWdlU3RydWN0dXJlLiBUaGUgcGFnZSBzdHJ1Y3R1cmVcclxuICAgICAqIGNhbiBlaXRoZXIgaG9sZCBjb21wbGV0ZSBwYWdlIHN0cnVjdHVyZXMgb3IgZ2xvYmFsIHN0cnVjdHVyZXMgdGhhdFxyXG4gICAgICogbWlnaHQgYXBwbHkgdG8gYWxsIHBhZ2VzIChzdWNoIGhhcyBoZWFkZXIgY29wb25lbnRzKS5cclxuICAgICAqL1xyXG4gICAgbWVyZ2VQYWdlU3RydWN0dXJlKHBhZ2VJZDogc3RyaW5nLCBwYWdlU3RydWN0dXJlOiBDbXNTdHJ1Y3R1cmVNb2RlbCk6IE9ic2VydmFibGU8Q21zU3RydWN0dXJlTW9kZWw+O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogUmV0dXJucyBib29sZWFuIG9ic2VydmFibGUgdG8gaW5kaWNhdGUgd2hldGhlciB0aGUgcGFnZSBzaG91bGQgbm90IGJlXHJcbiAgICAgKiBsb2FkZWQgZnJvbSB0aGUgYmFja2VuZC4gVGhpcyBpcyB1c2VmdWwgZm9yIHBhZ2VzIHdoaWNoIGFyZSBjb21vZGl0aXplZFxyXG4gICAgICogYW5kIGZvbGxvdyBiZXN0IHByYWN0aWNlLlxyXG4gICAgICpcclxuICAgICAqIEJ5IGRlZmF1bHQsIGNvbmZpZ3VyYWJsZSBwYWdlcyBhcmUgZHJpdmVuIGJ5IHN0YXRpYyBjb25maWd1cmF0aW9uLFxyXG4gICAgICogaW4gb3JkZXIgdG8gYWxsb3cgZm9yIGZhc3QgbG9hZGluZyBwYWdlcyAocHJldmVudGluZyBuZXR3b3JrIGRlbGF5cykuXHJcbiAgICAgKi9cclxuICAgIHNob3VsZElnbm9yZUJhY2tlbmQocGFnZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGFuIE9ic2VydmFibGUgY29tcG9uZW50IGRhdGEgZnJvbSB0aGUgc3RhdGljIGNvbmZpZ3VyYXRpb24uXHJcbiAgICAgKi9cclxuICAgIGdldENvbXBvbmVudEZyb21Db25maWcoY29tcG9uZW50SWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Q29udGVudFNsb3RDb21wb25lbnREYXRhIHwgYW55PjtcclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyBhbiBPYnNlcnZhYmxlIGNvbXBvbmVudHMgZGF0YSBmcm9tIHRoZSBzdGF0aWMgY29uZmlndXJhdGlvbi5cclxuICAgICAqL1xyXG4gICAgZ2V0Q29tcG9uZW50c0Zyb21Db25maWcoaWRzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8Q29udGVudFNsb3RDb21wb25lbnREYXRhW10+O1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGFuIG9ic2VydmFibGUgd2l0aCB0aGUgYFBhZ2VDb25maWdgLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0UGFnZUZyb21Db25maWcocGFnZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPENtc1BhZ2VDb25maWc+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBNZXJnZSBwYWdlIGRhdGEgZnJvbSB0aGUgY29uZmlndXJhdGlvbiBpbnRvIHRoZSBnaXZlbiBzdHJ1Y3R1cmUsIGlmIGFueS5cclxuICAgICAqIElmIHRoZSBnaXZlbiBwYWdlIHN0cnVjdHVyZSBpcyBlbXB0eSwgYSBwYWdlIGlzIGNyZWF0ZWQgYW5kIHRoZSBwYWdlIHNsb3RzIGFyZVxyXG4gICAgICogYXJlIG1lcmdlZCBpbnRvIHRoZSBwYWdlLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbWVyZ2VQYWdlKHBhZ2VJZDogc3RyaW5nLCBwYWdlU3RydWN0dXJlOiBDbXNTdHJ1Y3R1cmVNb2RlbCk6IE9ic2VydmFibGU8Q21zU3RydWN0dXJlTW9kZWw+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFueSBwcmUtY29uZmlndXJlZCBzbG90cyBmb3IgcGFnZXMgdGhhdCBkbyBub3QgdXNlIHRoZW0uXHJcbiAgICAgKiBJZiBwYWdlcyBoYXZlIGEgc2xvdCBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uLCB0aGUgY29uZmlnaXVyYXRpb25cclxuICAgICAqIGlzIGluZ29yZWQuIEV2ZW4gaWYgdGhlIHNsb3QgZG9lcyBub3QgaGF2ZSBpbm5lciBzdHJ1Y3R1cmUgKHN1Y2ggYXNcclxuICAgICAqIGNvbXBvbmVudHMpLCBzbyB0aGF0IHRoZSBjbXMgc3RydWN0dXJlIGlzIGFibGUgdG8gb3ZlcnJpZGUgdGhlIChzdGF0aWMpXHJcbiAgICAgKiBjb25maWd1cmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbWVyZ2VTbG90cyhwYWdlU3RydWN0dXJlOiBDbXNTdHJ1Y3R1cmVNb2RlbCwgc2xvdHM/OiBDbXNQYWdlU2xvdHNDb25maWcpOiBPYnNlcnZhYmxlPENtc1N0cnVjdHVyZU1vZGVsPjtcclxuICAgIHByb3RlY3RlZCBnZXRDb21wb25lbnRzQnlQb3NpdGlvbihzbG90czogQ21zUGFnZVNsb3RzQ29uZmlnLCBwb3NpdGlvbjogc3RyaW5nKTogQ29udGVudFNsb3RDb21wb25lbnREYXRhW107XHJcbiAgICBwcm90ZWN0ZWQgZ2V0Q29tcG9uZW50QnlJZChjb21wb25lbnRJZDogc3RyaW5nKTogQ29udGVudFNsb3RDb21wb25lbnREYXRhO1xyXG59XHJcbiJdfQ==