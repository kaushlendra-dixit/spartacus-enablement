import { StaticProvider } from '@angular/core';
import { Routes } from '@angular/router';
import { AuthConfig } from '../../auth/config/auth-config';
import { KymaConfig } from '../../kyma/config/kyma-config';
import { OccConfig } from '../../occ/config/occ-config';
import * as ɵngcc0 from '@angular/core';
export interface StandardCmsComponentConfig {
    CMSSiteContextComponent?: CmsComponentMapping;
    CMSLinkComponent?: CmsComponentMapping;
    SimpleResponsiveBannerComponent?: CmsComponentMapping;
    SimpleBannerComponent?: CmsComponentMapping;
    BannerComponent?: CmsComponentMapping;
    CMSParagraphComponent?: CmsComponentMapping;
    BreadcrumbComponent?: CmsComponentMapping;
    NavigationComponent?: CmsComponentMapping;
    FooterNavigationComponent?: CmsComponentMapping;
    CategoryNavigationComponent?: CmsComponentMapping;
    ProductAddToCartComponent?: CmsComponentMapping;
    MiniCartComponent?: CmsComponentMapping;
    ProductCarouselComponent?: CmsComponentMapping;
    SearchBoxComponent?: CmsComponentMapping;
    ProductReferencesComponent?: CmsComponentMapping;
    CMSTabParagraphComponent?: CmsComponentMapping;
    LoginComponent?: CmsComponentMapping;
}
export interface JspIncludeCmsComponentConfig {
    AccountAddressBookComponent?: CmsComponentMapping;
    ForgotPasswordComponent?: CmsComponentMapping;
    ResetPasswordComponent?: CmsComponentMapping;
    ProductDetailsTabComponent?: CmsComponentMapping;
    ProductSpecsTabComponent?: CmsComponentMapping;
    ProductReviewsTabComponent?: CmsComponentMapping;
}
export declare const JSP_INCLUDE_CMS_COMPONENT_TYPE = "JspIncludeComponent";
export declare const CMS_FLEX_COMPONENT_TYPE = "CMSFlexComponent";
export interface CmsComponentMapping {
    component?: any;
    providers?: StaticProvider[];
    childRoutes?: Routes;
    disableSSR?: boolean;
    i18nKeys?: string[];
    guards?: any[];
    /**
     * DeferLoading can be specified globally, but also per component.
     * Some components require direct loading while it's not initially
     * in the viewport.
     */
    deferLoading?: DeferLoadingStrategy;
}
/** Strategy to control the loading strategy of DOM elements. */
export declare enum DeferLoadingStrategy {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DEFER = "DEFERRED-LOADING",
    /** Renders the DOM instantly without being concerned with the view port */
    INSTANT = "INSTANT-LOADING"
}
export interface CMSComponentConfig extends StandardCmsComponentConfig, JspIncludeCmsComponentConfig {
    [componentType: string]: CmsComponentMapping;
}
export interface FeatureModuleConfig {
    /**
     * Lazy resolved feature module
     */
    module?: () => Promise<any>;
    /**
     * Lazy resolved dependency modules
     */
    dependencies?: (() => Promise<any>)[];
    /**
     * Cms components covered by this feature
     */
    cmsComponents?: string[];
}
export declare abstract class CmsConfig extends OccConfig implements AuthConfig, KymaConfig {
    authentication?: {
        client_id?: string;
        client_secret?: string;
        kyma_client_id?: string;
        kyma_client_secret?: string;
    };
    featureModules?: {
        [featureName: string]: FeatureModuleConfig;
    };
    cmsComponents?: CMSComponentConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CmsConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5kLnRzIiwic291cmNlcyI6WyJjbXMtY29uZmlnLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0aWNQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBBdXRoQ29uZmlnIH0gZnJvbSAnLi4vLi4vYXV0aC9jb25maWcvYXV0aC1jb25maWcnO1xyXG5pbXBvcnQgeyBLeW1hQ29uZmlnIH0gZnJvbSAnLi4vLi4va3ltYS9jb25maWcva3ltYS1jb25maWcnO1xyXG5pbXBvcnQgeyBPY2NDb25maWcgfSBmcm9tICcuLi8uLi9vY2MvY29uZmlnL29jYy1jb25maWcnO1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0YW5kYXJkQ21zQ29tcG9uZW50Q29uZmlnIHtcclxuICAgIENNU1NpdGVDb250ZXh0Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIENNU0xpbmtDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gICAgU2ltcGxlUmVzcG9uc2l2ZUJhbm5lckNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBTaW1wbGVCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gICAgQmFubmVyQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIENNU1BhcmFncmFwaENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBCcmVhZGNydW1iQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIE5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gICAgRm9vdGVyTmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBDYXRlZ29yeU5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gICAgUHJvZHVjdEFkZFRvQ2FydENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBNaW5pQ2FydENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBQcm9kdWN0Q2Fyb3VzZWxDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xyXG4gICAgU2VhcmNoQm94Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIFByb2R1Y3RSZWZlcmVuY2VzQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIENNU1RhYlBhcmFncmFwaENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBMb2dpbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBKc3BJbmNsdWRlQ21zQ29tcG9uZW50Q29uZmlnIHtcclxuICAgIEFjY291bnRBZGRyZXNzQm9va0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBGb3Jnb3RQYXNzd29yZENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBSZXNldFBhc3N3b3JkQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIFByb2R1Y3REZXRhaWxzVGFiQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcclxuICAgIFByb2R1Y3RTcGVjc1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbiAgICBQcm9kdWN0UmV2aWV3c1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgSlNQX0lOQ0xVREVfQ01TX0NPTVBPTkVOVF9UWVBFID0gXCJKc3BJbmNsdWRlQ29tcG9uZW50XCI7XHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IENNU19GTEVYX0NPTVBPTkVOVF9UWVBFID0gXCJDTVNGbGV4Q29tcG9uZW50XCI7XHJcbmV4cG9ydCBpbnRlcmZhY2UgQ21zQ29tcG9uZW50TWFwcGluZyB7XHJcbiAgICBjb21wb25lbnQ/OiBhbnk7XHJcbiAgICBwcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdO1xyXG4gICAgY2hpbGRSb3V0ZXM/OiBSb3V0ZXM7XHJcbiAgICBkaXNhYmxlU1NSPzogYm9vbGVhbjtcclxuICAgIGkxOG5LZXlzPzogc3RyaW5nW107XHJcbiAgICBndWFyZHM/OiBhbnlbXTtcclxuICAgIC8qKlxyXG4gICAgICogRGVmZXJMb2FkaW5nIGNhbiBiZSBzcGVjaWZpZWQgZ2xvYmFsbHksIGJ1dCBhbHNvIHBlciBjb21wb25lbnQuXHJcbiAgICAgKiBTb21lIGNvbXBvbmVudHMgcmVxdWlyZSBkaXJlY3QgbG9hZGluZyB3aGlsZSBpdCdzIG5vdCBpbml0aWFsbHlcclxuICAgICAqIGluIHRoZSB2aWV3cG9ydC5cclxuICAgICAqL1xyXG4gICAgZGVmZXJMb2FkaW5nPzogRGVmZXJMb2FkaW5nU3RyYXRlZ3k7XHJcbn1cclxuLyoqIFN0cmF0ZWd5IHRvIGNvbnRyb2wgdGhlIGxvYWRpbmcgc3RyYXRlZ3kgb2YgRE9NIGVsZW1lbnRzLiAqL1xyXG5leHBvcnQgZGVjbGFyZSBlbnVtIERlZmVyTG9hZGluZ1N0cmF0ZWd5IHtcclxuICAgIC8qKiBEZWZlcnMgbG9hZGluZyBvZiBET00gZWxlbWVudHMgdW50aWwgZWxlbWVudCBpcyBuZWFyL2luIHRoZSB1c2VycyB2aWV3IHBvcnQgKi9cclxuICAgIERFRkVSID0gXCJERUZFUlJFRC1MT0FESU5HXCIsXHJcbiAgICAvKiogUmVuZGVycyB0aGUgRE9NIGluc3RhbnRseSB3aXRob3V0IGJlaW5nIGNvbmNlcm5lZCB3aXRoIHRoZSB2aWV3IHBvcnQgKi9cclxuICAgIElOU1RBTlQgPSBcIklOU1RBTlQtTE9BRElOR1wiXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBDTVNDb21wb25lbnRDb25maWcgZXh0ZW5kcyBTdGFuZGFyZENtc0NvbXBvbmVudENvbmZpZywgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XHJcbiAgICBbY29tcG9uZW50VHlwZTogc3RyaW5nXTogQ21zQ29tcG9uZW50TWFwcGluZztcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVNb2R1bGVDb25maWcge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHJlc29sdmVkIGZlYXR1cmUgbW9kdWxlXHJcbiAgICAgKi9cclxuICAgIG1vZHVsZT86ICgpID0+IFByb21pc2U8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogTGF6eSByZXNvbHZlZCBkZXBlbmRlbmN5IG1vZHVsZXNcclxuICAgICAqL1xyXG4gICAgZGVwZW5kZW5jaWVzPzogKCgpID0+IFByb21pc2U8YW55PilbXTtcclxuICAgIC8qKlxyXG4gICAgICogQ21zIGNvbXBvbmVudHMgY292ZXJlZCBieSB0aGlzIGZlYXR1cmVcclxuICAgICAqL1xyXG4gICAgY21zQ29tcG9uZW50cz86IHN0cmluZ1tdO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIENtc0NvbmZpZyBleHRlbmRzIE9jY0NvbmZpZyBpbXBsZW1lbnRzIEF1dGhDb25maWcsIEt5bWFDb25maWcge1xyXG4gICAgYXV0aGVudGljYXRpb24/OiB7XHJcbiAgICAgICAgY2xpZW50X2lkPzogc3RyaW5nO1xyXG4gICAgICAgIGNsaWVudF9zZWNyZXQ/OiBzdHJpbmc7XHJcbiAgICAgICAga3ltYV9jbGllbnRfaWQ/OiBzdHJpbmc7XHJcbiAgICAgICAga3ltYV9jbGllbnRfc2VjcmV0Pzogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIGZlYXR1cmVNb2R1bGVzPzoge1xyXG4gICAgICAgIFtmZWF0dXJlTmFtZTogc3RyaW5nXTogRmVhdHVyZU1vZHVsZUNvbmZpZztcclxuICAgIH07XHJcbiAgICBjbXNDb21wb25lbnRzPzogQ01TQ29tcG9uZW50Q29uZmlnO1xyXG59XHJcbiJdfQ==