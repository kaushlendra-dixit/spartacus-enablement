import { Observable } from 'rxjs';
import { Page, PageMeta } from '../model/page.model';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import * as ɵngcc0 from '@angular/core';
export declare class PageMetaService {
    protected resolvers: PageMetaResolver[];
    protected cms: CmsService;
    constructor(resolvers: PageMetaResolver[], cms: CmsService);
    /**
     * The list of resolver interfaces will be evaluated for the pageResolvers.
     *
     * TOOD: optimize browser vs SSR resolvers; image, robots and description
     *       aren't needed during browsing.
     * TODO: we can make the list of resolver types configurable
     */
    protected resolverMethods: {
        [key: string]: string;
    };
    getMeta(): Observable<PageMeta>;
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    protected resolve(metaResolver: PageMetaResolver): Observable<PageMeta>;
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    protected getMetaResolver(page: Page): PageMetaResolver;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PageMetaService, [{ optional: true; }, null]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicGFnZS1tZXRhLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUGFnZSwgUGFnZU1ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcclxuaW1wb3J0IHsgUGFnZU1ldGFSZXNvbHZlciB9IGZyb20gJy4uL3BhZ2UvcGFnZS1tZXRhLnJlc29sdmVyJztcclxuaW1wb3J0IHsgQ21zU2VydmljZSB9IGZyb20gJy4vY21zLnNlcnZpY2UnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYWdlTWV0YVNlcnZpY2Uge1xyXG4gICAgcHJvdGVjdGVkIHJlc29sdmVyczogUGFnZU1ldGFSZXNvbHZlcltdO1xyXG4gICAgcHJvdGVjdGVkIGNtczogQ21zU2VydmljZTtcclxuICAgIGNvbnN0cnVjdG9yKHJlc29sdmVyczogUGFnZU1ldGFSZXNvbHZlcltdLCBjbXM6IENtc1NlcnZpY2UpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbGlzdCBvZiByZXNvbHZlciBpbnRlcmZhY2VzIHdpbGwgYmUgZXZhbHVhdGVkIGZvciB0aGUgcGFnZVJlc29sdmVycy5cclxuICAgICAqXHJcbiAgICAgKiBUT09EOiBvcHRpbWl6ZSBicm93c2VyIHZzIFNTUiByZXNvbHZlcnM7IGltYWdlLCByb2JvdHMgYW5kIGRlc2NyaXB0aW9uXHJcbiAgICAgKiAgICAgICBhcmVuJ3QgbmVlZGVkIGR1cmluZyBicm93c2luZy5cclxuICAgICAqIFRPRE86IHdlIGNhbiBtYWtlIHRoZSBsaXN0IG9mIHJlc29sdmVyIHR5cGVzIGNvbmZpZ3VyYWJsZVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZXJNZXRob2RzOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIGdldE1ldGEoKTogT2JzZXJ2YWJsZTxQYWdlTWV0YT47XHJcbiAgICAvKipcclxuICAgICAqIElmIGEgYFBhZ2VSZXNvbHZlcmAgaGFzIGltcGxlbWVudGVkIGEgcmVzb2x2ZXIgaW50ZXJmYWNlLCB0aGUgcmVzb2x2ZWQgZGF0YVxyXG4gICAgICogaXMgbWVyZ2VkIGludG8gdGhlIGBQYWdlTWV0YWAgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIG1ldGFSZXNvbHZlclxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcmVzb2x2ZShtZXRhUmVzb2x2ZXI6IFBhZ2VNZXRhUmVzb2x2ZXIpOiBPYnNlcnZhYmxlPFBhZ2VNZXRhPjtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSByZXNvbHZlciB3aXRoIHRoZSBiZXN0IG1hdGNoLCBiYXNlZCBvbiBhIHNjb3JlXHJcbiAgICAgKiBnZW5lcmF0ZWQgYnkgdGhlIHJlc29sdmVyLlxyXG4gICAgICpcclxuICAgICAqIFJlc29sdmVycyBtYXRjaCBieSBkZWZhdWx0IG9uIGBQYWdlVHlwZWAgYW5kIGBwYWdlLnRlbXBsYXRlYC5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldE1ldGFSZXNvbHZlcihwYWdlOiBQYWdlKTogUGFnZU1ldGFSZXNvbHZlcjtcclxufVxyXG4iXX0=